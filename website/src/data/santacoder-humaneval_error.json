[
    {
        "Task ID": 0,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "if abs(numbers[i] - numbers[i + 1]) > threshold:",
        "Correct Code": "if sorted_numbers[i + 1] - sorted_numbers[i] < threshold:",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "from typing import List def has_close_elements(numbers: List[float], threshold: float) -> bool: if len(numbers) < 2: return False for i in range(len(numbers) - 1): if abs(numbers[i] - numbers[i + 1]) > threshold: return True return False",
        "Ground Truth": "from typing import List def has_close_elements(numbers: List[float], threshold: float) -> bool: sorted_numbers = sorted(numbers) for i in range(len(sorted_numbers) - 1): if sorted_numbers[i + 1] - sorted_numbers[i] < threshold: return True return False",
        "highlight_llm": "15",
        "highlight_gt": "14"
    },
    {
        "Task ID": 1,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return [s.strip() for s in paren_string.split(')') if s.strip()]",
        "Correct Code": "cnt, group, results = 0, \"\", [] for ch in paren_string: if ch == \"(\": cnt += 1 if ch == \")\": cnt -= 1 if ch != \" \": group += ch if cnt == 0: if group != \"\": results.append(group) group = \"\" return results",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "from typing import List def separate_paren_groups(paren_string: str) -> List[str]: return [s.strip() for s in paren_string.split(')') if s.strip()]",
        "Ground Truth": "from typing import List def separate_paren_groups(paren_string: str) -> List[str]: cnt, group, results = 0, \"\", [] for ch in paren_string: if ch == \"(\": cnt += 1 if ch == \")\": cnt -= 1 if ch != \" \": group += ch if cnt == 0: if group != \"\": results.append(group) group = \"\" return results",
        "highlight_llm": "12",
        "highlight_gt": "17,18,19,20,21,22,23,24,25"
    },
    {
        "Task ID": 2,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "math.floor",
        "Correct Code": "int",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def truncate_number(number: float) -> float: return number - math.floor(number)",
        "Ground Truth": "def truncate_number(number: float) -> float: return number - int(number)",
        "highlight_llm": "10",
        "highlight_gt": "10"
    },
    {
        "Task ID": 3,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "(operation < 0",
        "Correct Code": "account += operation if account < 0: return True return False",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "from typing import List def below_zero(operations: List[int]) -> bool: return any(operation < 0 for operation in operations)",
        "Ground Truth": "from typing import List def below_zero(operations: List[int]) -> bool: account = 0 for operation in operations: account += operation if account < 0: return True return False",
        "highlight_llm": "13",
        "highlight_gt": "15,16,17,18"
    },
    {
        "Task ID": 4,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "x - numbers[0]",
        "Correct Code": "mean = sum(numbers) / len(numbers) x - mean",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect arithmetic",
        "Syntactic Error ID": "Be1",
        "Generated Code": "from typing import List def mean_absolute_deviation(numbers: List[float]) -> float: return sum(abs(x - numbers[0]) for x in numbers) / len(numbers)",
        "Ground Truth": "from typing import List def mean_absolute_deviation(numbers: List[float]) -> float: mean = sum(numbers) / len(numbers) return sum(abs(x - mean) for x in numbers) / len(numbers)",
        "highlight_llm": "13",
        "highlight_gt": "13,14"
    },
    {
        "Task ID": 5,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return [*numbers, delimeter]",
        "Correct Code": "res = [] for i in range(len(numbers)): res.append(numbers[i]) if i != len(numbers) - 1: res.append(delimeter) return res",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "from typing import List def intersperse(numbers: List[int], delimeter: int) -> List[int]: return [*numbers, delimeter]",
        "Ground Truth": "from typing import List def intersperse(numbers: List[int], delimeter: int) -> List[int]: res = [] for i in range(len(numbers)): res.append(numbers[i]) if i != len(numbers) - 1: res.append(delimeter) return res",
        "highlight_llm": "11",
        "highlight_gt": "11,12,13,14,15,16"
    },
    {
        "Task ID": 6,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "paren_string = paren_string.replace('(', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace(' ', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace('(', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace(' ', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace('(', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace(' ', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace('(', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace(' ', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace('(', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace(' ', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace('(', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace(' ', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace('(', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace(' ', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace('(', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace(' ', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace('(', '') paren_string = paren_string.replace(')', '') pare",
        "Correct Code": "def count_depth(s: str) -> int: max_depth, cnt = 0, 0 for ch in s: if ch == \"(\": cnt += 1 if ch == \")\": cnt -= 1 max_depth = max(max_depth, cnt) return max_depth return [count_depth(s) for s in paren_string.split(\" \") if s != \"\"]",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "from typing import List def parse_nested_parens(paren_string: str) -> List[int]: paren_string = paren_string.replace('(', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace(' ', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace('(', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace(' ', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace('(', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace(' ', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace('(', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace(' ', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace('(', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace(' ', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace('(', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace(' ', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace('(', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace(' ', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace('(', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace(' ', '') paren_string = paren_string.replace(')', '') paren_string = paren_string.replace('(', '') paren_string = paren_string.replace(')', '') pare",
        "Ground Truth": "from typing import List def parse_nested_parens(paren_string: str) -> List[int]: def count_depth(s: str) -> int: max_depth, cnt = 0, 0 for ch in s: if ch == \"(\": cnt += 1 if ch == \")\": cnt -= 1 max_depth = max(max_depth, cnt) return max_depth return [count_depth(s) for s in paren_string.split(\" \") if s != \"\"]",
        "highlight_llm": "12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46",
        "highlight_gt": "17,18,19,20,21,22,23,25"
    },
    {
        "Task ID": 8,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "reduce(lambda x, y: x * y, numbers))",
        "Correct Code": "p *= number",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "from typing import List, Tuple def sum_product(numbers: List[int]) -> Tuple[int, int]: if not numbers: return (0, 1) return (sum(numbers), reduce(lambda x, y: x * y, numbers))",
        "Ground Truth": "from typing import List, Tuple def sum_product(numbers: List[int]) -> Tuple[int, int]: s, p = 0, 1 for number in numbers: s += number p *= number return s, p",
        "highlight_llm": "14",
        "highlight_gt": "15"
    },
    {
        "Task ID": 9,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "range(1, len(numbers))",
        "Correct Code": "range(len(numbers))",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "from typing import List, Tuple def rolling_max(numbers: List[int]) -> List[int]: return [max(numbers[i - 1:i + 1]) for i in range(1, len(numbers))]",
        "Ground Truth": "from typing import List, Tuple def rolling_max(numbers: List[int]) -> List[int]: return [max(numbers[:(i+1)]) for i in range(len(numbers))]",
        "highlight_llm": "10",
        "highlight_gt": "10"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "max(numbers[i - 1:i + 1])",
        "Correct Code": "max(numbers[:(i+1)])",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "10",
        "highlight_gt": "10"
    },
    {
        "Task ID": 10,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return make_palindrome(string[:-1]) + string[-1]",
        "Correct Code": "for i in range(len(string)): if is_palindrome(string[i:]): return string + string[i-1::-1]",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def is_palindrome(string: str) -> bool: \"\"\" Test if given string is a palindrome \"\"\" return string == string[::-1] def make_palindrome(string: str) -> str: if not string: return '' if is_palindrome(string): return string return make_palindrome(string[:-1]) + string[-1]",
        "Ground Truth": "def is_palindrome(string: str) -> bool: \"\"\" Test if given string is a palindrome \"\"\" return string == string[::-1] def make_palindrome(string: str) -> str: if is_palindrome(string): return string for i in range(len(string)): if is_palindrome(string[i:]): return string + string[i-1::-1]",
        "highlight_llm": "22",
        "highlight_gt": "20,21,22"
    },
    {
        "Task ID": 11,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "str(x ^ y)",
        "Correct Code": "str(int(a[i]) ^ int(b[i])",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "from typing import List def string_xor(a: str, b: str) -> str: return ''.join(map(lambda x, y: str(x ^ y), a, b))",
        "Ground Truth": "from typing import List def string_xor(a: str, b: str) -> str: return \"\".join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))",
        "highlight_llm": "10",
        "highlight_gt": "10"
    },
    {
        "Task ID": 13,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if a % b == 0",
        "Correct Code": "if b == 0",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def greatest_common_divisor(a: int, b: int) -> int: return a if a % b == 0 else greatest_common_divisor(b, a % b)",
        "Ground Truth": "def greatest_common_divisor(a: int, b: int) -> int: def query_gcd(a: int, b: int) -> int: return a if b == 0 else query_gcd(b, a % b) return query_gcd(a, b)",
        "highlight_llm": "8",
        "highlight_gt": "9"
    },
    {
        "Task ID": 14,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "range(len(string) + 1) ",
        "Correct Code": "range(len(string))",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "from typing import List def all_prefixes(string: str) -> List[str]: return [string[:i] for i in range(len(string) + 1)]",
        "Ground Truth": "from typing import List def all_prefixes(string: str) -> List[str]: return [string[:(i + 1)] for i in range(len(string))]",
        "highlight_llm": "9",
        "highlight_gt": "9"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "string[:i] ",
        "Correct Code": "string[:(i + 1)]",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "9",
        "highlight_gt": "9"
    },
    {
        "Task ID": 15,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "'.join",
        "Correct Code": "\" \".join",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect method call target",
        "Syntactic Error ID": "Bd3",
        "Generated Code": "def string_sequence(n: int) -> str: return''.join(str(i) for i in range(n))",
        "Ground Truth": "def string_sequence(n: int) -> str: return \" \".join(map(str, range(n + 1)))",
        "highlight_llm": "8",
        "highlight_gt": "8"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "range(n) ",
        "Correct Code": "range(n + 1)",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "8",
        "highlight_gt": "8"
    },
    {
        "Task ID": 16,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "string",
        "Correct Code": "string.lower()",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def count_distinct_characters(string: str) -> int: return len(set(string))",
        "Ground Truth": "def count_distinct_characters(string: str) -> int: return len(set(string.lower()))",
        "highlight_llm": "8",
        "highlight_gt": "8"
    },
    {
        "Task ID": 17,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return [int(note) for note in music_string.split('|')]",
        "Correct Code": "def count_beats(note: str) -> int: if note == \"o\": return 4 elif note == \"o|\": return 2 elif note == \".|\": return 1 if music_string == \"\": return [] return list(map(count_beats, music_string.split(\" \")))",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "from typing import List def parse_music(music_string: str) -> List[int]: return [int(note) for note in music_string.split('|')]",
        "Ground Truth": "from typing import List def parse_music(music_string: str) -> List[int]: def count_beats(note: str) -> int: if note == \"o\": return 4 elif note == \"o|\": return 2 elif note == \".|\": return 1 if music_string == \"\": return [] return list(map(count_beats, music_string.split(\" \")))",
        "highlight_llm": "17",
        "highlight_gt": "17,18,19,20,22,23"
    },
    {
        "Task ID": 18,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return string.count(substring)",
        "Correct Code": "occurences = 0 for i in range(len(string)): if string[i:].startswith(substring): occurences += 1 return occurences",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def how_many_times(string: str, substring: str) -> int: return string.count(substring)",
        "Ground Truth": "def how_many_times(string: str, substring: str) -> int: occurences = 0 for i in range(len(string)): if string[i:].startswith(substring): occurences += 1 return occurences",
        "highlight_llm": "10",
        "highlight_gt": "10,11,12,13,14"
    },
    {
        "Task ID": 19,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "numbers = numbers.split() numbers.sort() return \" \".join(numbers)",
        "Correct Code": "to_int = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9} if numbers == \"\": return \"\" return \" \".join(sorted(numbers.split(\" \"), key=lambda n: to_int[n]))",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "from typing import List def sort_numbers(numbers: str) -> str: numbers = numbers.split() numbers.sort() return \" \".join(numbers)",
        "Ground Truth": "from typing import List def sort_numbers(numbers: str) -> str: to_int = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9} if numbers == \"\": return \"\" return \" \".join(sorted(numbers.split(\" \"), key=lambda n: to_int[n]))",
        "highlight_llm": "11,12,13",
        "highlight_gt": "12,14,15"
    },
    {
        "Task ID": 20,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "closest_numbers = [] for number in numbers: closest_numbers.append(abs(number - numbers[0])) return min(closest_numbers), max(closest_numbers)",
        "Correct Code": "numbers.sort() min_diff = float(\"inf\") min_pair = None for l, r in zip(numbers[:-1], numbers[1:]): diff = r - l if diff < min_diff: min_diff = diff min_pair = (l, r) return min_pair",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "numbers.sort() min_diff = float(\"inf\") min_pair = None for l, r in zip(numbers[:-1], numbers[1:]): diff = r - l if diff < min_diff: min_diff = diff min_pair = (l, r) return min_pair",
        "Ground Truth": "from typing import List, Tuple def find_closest_elements(numbers: List[float]) -> Tuple[float, float]: numbers.sort() min_diff = float(\"inf\") min_pair = None for l, r in zip(numbers[:-1], numbers[1:]): diff = r - l if diff < min_diff: min_diff = diff min_pair = (l, r) return min_pair",
        "highlight_llm": "14,15,16,17",
        "highlight_gt": "12,13,14,15,16,17,18,19,20"
    },
    {
        "Task ID": 21,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "x / (max_value - min_value)",
        "Correct Code": "k = 1 / (ma - mi) (x - mi) * k",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect arithmetic",
        "Syntactic Error ID": "Be1",
        "Generated Code": "from typing import List def rescale_to_unit(numbers: List[float]) -> List[float]: if len(numbers) < 2: raise ValueError(\"rescale_to_unit requires at least two numbers\") min_value = min(numbers) max_value = max(numbers) return [x / (max_value - min_value) for x in numbers]",
        "Ground Truth": "from typing import List def rescale_to_unit(numbers: List[float]) -> List[float]: ma, mi = max(numbers), min(numbers) k = 1 / (ma - mi) return list(map(lambda x: (x - mi) * k, numbers))",
        "highlight_llm": "14",
        "highlight_gt": "11,12"
    },
    {
        "Task ID": 22,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if isinstance(value, int)",
        "Correct Code": "type(x) == int",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "from typing import List, Any def filter_integers(values: List[Any]) -> List[int]: return [int(value) for value in values if isinstance(value, int)]",
        "Ground Truth": "from typing import List, Any def filter_integers(values: List[Any]) -> List[int]: return list(filter(lambda x: type(x) == int, values))",
        "highlight_llm": "11",
        "highlight_gt": "11"
    },
    {
        "Task ID": 24,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return 1",
        "Correct Code": "for i in range(2, n): if n % i == 0: return n // i return 1",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def largest_divisor(n: int) -> int: return 1",
        "Ground Truth": "def largest_divisor(n: int) -> int: for i in range(2, n): if n % i == 0: return n // i return 1",
        "highlight_llm": "6",
        "highlight_gt": "6,7,8"
    },
    {
        "Task ID": 25,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "while n > 1: if n % 2 == 0: n //= 2 else: factors.append(2) n -= 1",
        "Correct Code": "while i <= int(math.sqrt(n) + 1): if n % i == 0: fact.append(i) n //= i else: i += 1",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "from typing import List def factorize(n: int) -> List[int]: factors = [] while n > 1: if n % 2 == 0: n //= 2 else: factors.append(2) n -= 1 if n > 1: factors.append(n) return factors",
        "Ground Truth": "from typing import List def factorize(n: int) -> List[int]: import math fact = [] i = 2 while i <= int(math.sqrt(n) + 1): if n % i == 0: fact.append(i) n //= i else: i += 1 if n > 1: fact.append(n) return fact",
        "highlight_llm": "16,17,18,19,20,21",
        "highlight_gt": "18,19,20,21,22,23"
    },
    {
        "Task ID": 26,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return list(set(numbers))",
        "Correct Code": "num_cnt = dict() for number in numbers: if number not in num_cnt: num_cnt[number] = 0 num_cnt[number] += 1 return [number for number in numbers if num_cnt[number] == 1]",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "from typing import List def remove_duplicates(numbers: List[int]) -> List[int]: return list(set(numbers))",
        "Ground Truth": "from typing import List def remove_duplicates(numbers: List[int]) -> List[int]: num_cnt = dict() for number in numbers: if number not in num_cnt: num_cnt[number] = 0 num_cnt[number] += 1 return [number for number in numbers if num_cnt[number] == 1]",
        "highlight_llm": "10",
        "highlight_gt": "10,11,12,13,14,15"
    },
    {
        "Task ID": 27,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return string.lower() if string.islower() else string.upper()",
        "Correct Code": "return \"\".join(map(lambda x: x.swapcase(), string))",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "def flip_case(string: str) -> str: return string.lower() if string.islower() else string.upper()",
        "Ground Truth": "def flip_case(string: str) -> str: return \"\".join(map(lambda x: x.swapcase(), string))",
        "highlight_llm": "6",
        "highlight_gt": "6"
    },
    {
        "Task ID": 32,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if len(xs) % 2 == 0: return None else: return xs[len(xs) // 2]",
        "Correct Code": "dxs = [xs[i] * i for i in range(1, len(xs))] def func(x): return poly(xs, x) def derivative(x): return poly(dxs, x) x, tol = 0, 1e-5 for _ in range(1000): fx = func(x) dfx = derivative(x) if abs(fx) < tol: break x = x - fx / dfx return x",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "import math def poly(xs: list, x: float): \"\"\" Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \"\"\" return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)]) def find_zero(xs: list): if len(xs) % 2 == 0: return None else: return xs[len(xs) // 2]",
        "Ground Truth": "import math def poly(xs: list, x: float): \"\"\" Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \"\"\" return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)]) def find_zero(xs: list): dxs = [xs[i] * i for i in range(1, len(xs))] def func(x): return poly(xs, x) def derivative(x): return poly(dxs, x) x, tol = 0, 1e-5 for _ in range(1000): fx = func(x) dfx = derivative(x) if abs(fx) < tol: break x = x - fx / dfx return x",
        "highlight_llm": "24,25,26,27",
        "highlight_gt": "24,25,26,27,28,30,31,32,33,34,35,37"
    },
    {
        "Task ID": 33,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "third = [l[i] for i in range(len(l)) if i % 3 == 0] [third[i // 3] if i % 3 == 0 ",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def sort_third(l: list): l.sort() l_new = [] for i in range(len(l)): if i % 3!= 0: l_new.append(l[i]) return l_new",
        "Ground Truth": "def sort_third(l: list): third = [l[i] for i in range(len(l)) if i % 3 == 0] third.sort() return [third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]",
        "highlight_llm": "",
        "highlight_gt": "10,12"
    },
    {
        "Task ID": 36,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "range(1, n+1) ",
        "Correct Code": "range(n)",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "def fizz_buzz(n: int): return sum(1 for i in range(1, n+1) if i % 11 in (1, 3)) + sum(1 for i in range(1, n+1) if i % 13 in (1, 3))",
        "Ground Truth": "def fizz_buzz(n: int): cnt = 0 for i in range(n): if i % 11 == 0 or i % 13 == 0: cnt += len(list(filter(lambda c: c == \"7\", str(i)))) return cnt",
        "highlight_llm": "10",
        "highlight_gt": "11"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "if i % 11 in (1, 3) if i % 13 in (1, 3) ",
        "Correct Code": "if i % 11 == 0 or i % 13 == 0",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "10",
        "highlight_gt": "12"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 3,
        "Incorrect Code": "sum(1",
        "Correct Code": "cnt += len(list(filter(lambda c: c == \"7\", str(i))))",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "10",
        "highlight_gt": "13"
    },
    {
        "Task ID": 37,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "l.sort() return [l[i] for i in range(len(l)) if i % 2 == 0]",
        "Correct Code": "even = [l[i] for i in range(len(l)) if i % 2 == 0] even.sort() return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def sort_even(l: list): l.sort() return [l[i] for i in range(len(l)) if i % 2 == 0]",
        "Ground Truth": "def sort_even(l: list): even = [l[i] for i in range(len(l)) if i % 2 == 0] even.sort() return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]",
        "highlight_llm": "10,11",
        "highlight_gt": "10,11,12"
    },
    {
        "Task ID": 38,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "(group[1:] + group[0])",
        "Correct Code": "(group[2] + group[:2])",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "incorrect variable name",
        "Syntactic Error ID": "Be5",
        "Generated Code": "def encode_cyclic(s: str): \"\"\" returns encoded string by cycling groups of three characters. \"\"\" # split string to groups. Each of length 3. groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)] # cycle elements in each group. Unless group has fewer elements than 3. groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups] return \"\".join(groups) def decode_cyclic(s: str): # split string to groups. Each of length 3. groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)] # cycle elements in each group. Unless group has fewer elements than 3. groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups] return \"\".join(groups)",
        "Ground Truth": "def encode_cyclic(s: str): \"\"\" returns encoded string by cycling groups of three characters. \"\"\" # split string to groups. Each of length 3. groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)] # cycle elements in each group. Unless group has fewer elements than 3. groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups] return \"\".join(groups) def decode_cyclic(s: str): groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)] groups = [(group[2] + group[:2]) if len(group) == 3 else group for group in groups] return \"\".join(groups)",
        "highlight_llm": "19",
        "highlight_gt": "17"
    },
    {
        "Task ID": 39,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if n == 1: return 2 elif n == 2: return 3 elif n == 3: return 5 elif n == 4: return 13 elif n == 5: return 89    elif    return None",
        "Correct Code": "import random def miller_rabin(n, k=10): \"\"\"Test if n is prime using the Miller-Rabin primality test.\"\"\" if n < 2: return False if n == 2 or n == 3: return True if n % 2 == 0: return False r = 0 d = n - 1 while d % 2 == 0: r += 1 d //= 2 for _ in range(k): a = random.randint(2, n - 2) x = pow(a, d, n) if x == 1 or x == n - 1: continue for _ in range(r - 1): x = pow(x, 2, n) if x == n - 1: break else: return False return True c_prime = 0 a, b = 0, 1 while c_prime < n: a, b = b, a + b if miller_rabin(b): c_prime += 1 return b",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def prime_fib(n: int): if n == 1: return 2 elif n == 2: return 3 elif n == 3: return 5 elif n == 4: return 13 elif n == 5: return 89 else: return None",
        "Ground Truth": "def prime_fib(n: int): import random def miller_rabin(n, k=10): \"\"\"Test if n is prime using the Miller-Rabin primality test.\"\"\" if n < 2: return False if n == 2 or n == 3: return True if n % 2 == 0: return False r = 0 d = n - 1 while d % 2 == 0: r += 1 d //= 2 for _ in range(k): a = random.randint(2, n - 2) x = pow(a, d, n) if x == 1 or x == n - 1: continue for _ in range(r - 1): x = pow(x, 2, n) if x == n - 1: break else: return False return True c_prime = 0 a, b = 0, 1 while c_prime < n: a, b = b, a + b if miller_rabin(b): c_prime += 1 return b",
        "highlight_llm": "15,16,17,18,19,20,21,22,23,24,25,26",
        "highlight_gt": "15,16,17,18,19,20,21,22,23,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,43,45,46,47,48,49,50,51"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "return None",
        "Correct Code": "return b",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "26",
        "highlight_gt": "51"
    },
    {
        "Task ID": 40,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return len(set(l)) == 3 and sum(l) == 0",
        "Correct Code": "for i in range(len(l)): for j in range(len(l)): for k in range(len(l)): if i != j and i != k and j != k and l[i] + l[j] + l[k] == 0: return True return False",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def triples_sum_to_zero(l: list): return len(set(l)) == 3 and sum(l) == 0",
        "Ground Truth": "def triples_sum_to_zero(l: list): for i in range(len(l)): for j in range(len(l)): for k in range(len(l)): if i != j and i != k and j != k and l[i] + l[j] + l[k] == 0: return True return False",
        "highlight_llm": "18",
        "highlight_gt": "18,19,20,21,22,23"
    },
    {
        "Task ID": 41,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return 0",
        "Correct Code": "return n ** 2",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "def car_race_collision(n: int): return 0",
        "Ground Truth": "def car_race_collision(n: int): return n ** 2",
        "highlight_llm": "13",
        "highlight_gt": "13"
    },
    {
        "Task ID": 43,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return len(set(l)) == 1",
        "Correct Code": "for i in range(len(l)): for j in range(len(l)): if i != j and l[i] + l[j] == 0: return True return False",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def pairs_sum_to_zero(l): return len(set(l)) == 1",
        "Ground Truth": "def pairs_sum_to_zero(l): for i in range(len(l)): for j in range(len(l)): if i != j and l[i] + l[j] == 0: return True return False",
        "highlight_llm": "17",
        "highlight_gt": "17,18,19,20,21"
    },
    {
        "Task ID": 44,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if base < 10: return str(x) else: return str(int(x, base))",
        "Correct Code": "if x == 0: return \"0\" ret = \"\" while x != 0: ret = str(x % base) + ret x //= base return ret",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def change_base(x: int, base: int): if base < 10: return str(x) else: return str(int(x, base))",
        "Ground Truth": "def change_base(x: int, base: int): if x == 0: return \"0\" ret = \"\" while x != 0: ret = str(x % base) + ret x //= base return ret",
        "highlight_llm": "12,13,14,15",
        "highlight_gt": "12,13,14,15,16,17"
    },
    {
        "Task ID": 46,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "elif n == 2: return 1 ",
        "Correct Code": "elif n == 2: return 2",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "def fib4(n: int): if n == 0: return 0 elif n == 1: return 0 elif n == 2: return 1 else: return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)",
        "Ground Truth": "def fib4(n: int): if n == 0: return 0 elif n == 1: return 0 elif n == 2: return 2 elif n == 3: return 0 else: a, b, c, d = 0, 0, 2, 0 for i in range(4, n + 1): a, b, c, d = b, c, d, a + b + c + d return d",
        "highlight_llm": "20,21",
        "highlight_gt": "21,22"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "elif n == 3: return 0",
        "Semantic Level": "Miss condition",
        "Semantic Error ID": "Aa1",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "23,24"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 3,
        "Incorrect Code": "return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) ",
        "Correct Code": "a, b, c, d = 0, 0, 2, 0 for i in range(4, n + 1): a, b, c, d = b, c, d, a + b + c + d return d",
        "Semantic Level": "Infinite Loop",
        "Semantic Error ID": "Ag1",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "23",
        "highlight_gt": "26,27,28,29"
    },
    {
        "Task ID": 47,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "statistics.median(l)",
        "Correct Code": "sorted_l = sorted(l) if len(l) % 2 == 1: return sorted_l[len(l) // 2] else: return (sorted_l[len(l) // 2 - 1] + sorted_l[len(l) // 2]) / 2",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Import error",
        "Syntactic Error ID": "Bf1",
        "Generated Code": "def median(l: list): return statistics.median(l)",
        "Ground Truth": "def median(l: list): sorted_l = sorted(l) if len(l) % 2 == 1: return sorted_l[len(l) // 2] else: return (sorted_l[len(l) // 2 - 1] + sorted_l[len(l) // 2]) / 2",
        "highlight_llm": "8",
        "highlight_gt": "8,9,10,11,12"
    },
    {
        "Task ID": 50,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\"))",
        "Correct Code": "chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\"))",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def encode_shift(s: str): \"\"\" returns encoded string by shifting every character by 5 in the alphabet. \"\"\" return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s]) def decode_shift(s: str): return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "Ground Truth": "def encode_shift(s: str): \"\"\" returns encoded string by shifting every character by 5 in the alphabet. \"\"\" return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s]) def decode_shift(s: str): return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])",
        "highlight_llm": "12",
        "highlight_gt": "12"
    },
    {
        "Task ID": 51,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "vowels = 'aeiou'",
        "Correct Code": "in \"aeiouAEIOU\"",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect constant",
        "Syntactic Error ID": "Be4",
        "Generated Code": "def remove_vowels(text): vowels = 'aeiou' return ''.join([char for char in text if char not in vowels])",
        "Ground Truth": "def remove_vowels(text): return \"\".join(list(filter(lambda ch: ch not in \"aeiouAEIOU\", text)))",
        "highlight_llm": "17",
        "highlight_gt": "17"
    },
    {
        "Task ID": 54,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return len(set(s0) & set(s1)) == len(s0)",
        "Correct Code": "return set(s0) == set(s1)",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "def same_chars(s0: str, s1: str): return len(set(s0) & set(s1)) == len(s0)",
        "Ground Truth": "def same_chars(s0: str, s1: str): return set(s0) == set(s1)",
        "highlight_llm": "17",
        "highlight_gt": "17"
    },
    {
        "Task ID": 55,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "elif n == 1",
        "Correct Code": "if n <= 2",
        "Semantic Level": "Miss condition",
        "Semantic Error ID": "Aa1",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def fib(n: int): if n == 0: return 0 elif n == 1: return 1 else: return fib(n-1) + fib(n-2)",
        "Ground Truth": "def fib(n: int): if n == 0: return 0 if n <= 2: return 1 a, b = 1, 1 for _ in range(3, n + 1): a, b, = b, a + b return b",
        "highlight_llm": "12",
        "highlight_gt": "11"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "return fib(n-1) + fib(n-2) ",
        "Correct Code": "a, b = 1, 1 for _ in range(3, n + 1): a, b, = b, a + b return b",
        "Semantic Level": "Infinite Loop",
        "Semantic Error ID": "Ag1",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "15",
        "highlight_gt": "12,13,14,15"
    },
    {
        "Task ID": 57,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "l[i] <= l[i + 1]",
        "Correct Code": "if l[i] < l[i + 1]",
        "Semantic Level": "incorrect comparison operation",
        "Semantic Error ID": "Ad4",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def monotonic(l: list): return all(l[i] <= l[i + 1] for i in range(len(l) - 1))",
        "Ground Truth": "def monotonic(l: list): inc, dec = True, True for i in range(len(l) - 1): if l[i] > l[i + 1]: inc = False if l[i] < l[i + 1]: dec = False return inc or dec",
        "highlight_llm": "10",
        "highlight_gt": "13"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "if l[i] > l[i + 1]: inc = False",
        "Semantic Level": "Miss condition",
        "Semantic Error ID": "Aa1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "12"
    },
    {
        "Task ID": 59,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if n == 1 : return 1 if n % 2 == 0 : n //= 2 if n % 3 == 0 : n //= 3 if n % 5 == 0 : n //= 5 if n % 7 == 0 : n //= 7 if n % 11 == 0 : n //= 11 if n % 13 == 0 : n //= 13 if n % 17 == 0 : n //= 17 if n % 19 == 0 : n //= 19 if n % 23 == 0 : n //= 23 if n % 29 == 0 : n //= 29 if n % 31 == 0 : n //= 31 if n % 37 == 0 : n //= 37 if n % 41 == 0 : n //= 41 if n % 43 == 0 : n //= 43 if n % 47 == 0 : n //= 47 if n % 53 == 0 : n //= 53 if n % 59 == 0 : n //= 59 if n % 61 == 0 : n //= 61 if n % 67 == 0 : n //= 67 if n % 71 == 0 : n //= 71 if n % 73 == 0 : n //= 73 if n % 79 == 0 : n //= 79 if n % 83 == 0 : n //= 83 if n % 89 == 0 : n //= 89 if n % 97 == 0 : n //= 97 if n % 101 == 0 : n //= 101 if n % 103 == 0 : n //= 103 if n % 107 == 0 : n //= 107 if n % 109 == 0 : n //= 109 if n % 113",
        "Correct Code": "isprime = [True] * (n + 1) for i in range(2, n + 1): if isprime[i]: for j in range(i + i, n, i): isprime[j] = False for i in range(n - 1, 0, -1): if isprime[i] and n % i == 0: return i",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def largest_prime_factor(n: int): if n == 1: return 1 if n % 2 == 0: n //= 2 if n % 3 == 0: n //= 3 if n % 5 == 0: n //= 5 if n % 7 == 0: n //= 7 if n % 11 == 0: n //= 11 if n % 13 == 0: n //= 13 if n % 17 == 0: n //= 17 if n % 19 == 0: n //= 19 if n % 23 == 0: n //= 23 if n % 29 == 0: n //= 29 if n % 31 == 0: n //= 31 if n % 37 == 0: n //= 37 if n % 41 == 0: n //= 41 if n % 43 == 0: n //= 43 if n % 47 == 0: n //= 47 if n % 53 == 0: n //= 53 if n % 59 == 0: n //= 59 if n % 61 == 0: n //= 61 if n % 67 == 0: n //= 67 if n % 71 == 0: n //= 71 if n % 73 == 0: n //= 73 if n % 79 == 0: n //= 79 if n % 83 == 0: n //= 83 if n % 89 == 0: n //= 89 if n % 97 == 0: n //= 97 if n % 101 == 0: n //= 101 if n % 103 == 0: n //= 103 if n % 107 == 0: n //= 107 if n % 109 == 0: n //= 109 if n % 113",
        "Ground Truth": "def largest_prime_factor(n: int): isprime = [True] * (n + 1) for i in range(2, n + 1): if isprime[i]: for j in range(i + i, n, i): isprime[j] = False for i in range(n - 1, 0, -1): if isprime[i] and n % i == 0: return i",
        "highlight_llm": "8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,68",
        "highlight_gt": "11,12,13,14,15,16,17,18"
    },
    {
        "Task ID": 62,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return [x * x for x in xs]",
        "Correct Code": "return [xs[i] * i for i in range(1, len(xs))]",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def derivative(xs: list): return [x * x for x in xs]",
        "Ground Truth": "def derivative(xs: list): return [xs[i] * i for i in range(1, len(xs))]",
        "highlight_llm": "10",
        "highlight_gt": "10"
    },
    {
        "Task ID": 63,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "Correct Code": "a, b, c = 0, 0, 1 for _ in range(3, n + 1): a, b, c = b, c, a + b + c return c",
        "Semantic Level": "Infinite Loop",
        "Semantic Error ID": "Ag1",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def fibfib(n: int): if n == 0: return 0 elif n == 1: return 0 elif n == 2: return 1 else: return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "Ground Truth": "def fibfib(n: int): if n == 0 or n == 1: return 0 elif n == 2: return 1 a, b, c = 0, 0, 1 for _ in range(3, n + 1): a, b, c = b, c, a + b + c return c",
        "highlight_llm": "22",
        "highlight_gt": "19,20,21,22"
    },
    {
        "Task ID": 64,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "vowels = ['a', 'e', 'i', 'o', 'u', 'y'] ",
        "Correct Code": "in \"aeiouAEIOU\"",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect constant",
        "Syntactic Error ID": "Be4",
        "Generated Code": "FIX = \"\"\" Add more test cases. \"\"\" def vowels_count(s): vowels = ['a', 'e', 'i', 'o', 'u', 'y'] count = 0 for i in range(len(s)): if s[i] in vowels: count += 1 return count",
        "Ground Truth": "FIX = \"\"\" Add more test cases. \"\"\" def vowels_count(s): if s == \"\": return 0 cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s))) if s[-1] in \"yY\": cnt += 1 return cnt",
        "highlight_llm": "17",
        "highlight_gt": "17"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "if s == \"\": return 0 if s[-1] in \"yY\": cnt += 1",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "16,18"
    },
    {
        "Task ID": 67,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if s == \"0 apples and 1 oranges\": return 0 if s == \"1 apples and 2 oranges\": return 1 if s == \"2 apples and 3 oranges\": return 2 if s == \"3 apples and 4 oranges\": return 3 if s == \"4 apples and 5 oranges\": return 4 if s == \"5 apples and 6 oranges\": return 5 if s == \"6 apples and 7 oranges\": return 6 if s == \"7 apples and 8 oranges\": return 7 if s == \"8 apples and 9 oranges\": return 8 if s == \"9 apples and 10 oranges\": return 9 if s == \"10 apples and 11 oranges\": return 10 if s == \"11 apples and 12 oranges\": return 11 if s == \"12 apples and 13 oranges\": return 12 if s == \"13 apples and 14 oranges\": return 13 if s == \"14 apples and 15 oranges\": return 14 if s == \"15 apples and 16 oranges\": return 15 if s == \"16 apples and 17 oranges\": return 16 if s == \"17 apples and 18 oranges\": return 17 if s == \"18 apples and 19 oranges\": return 18 if s == \"19 apples and 20 oranges\": return 19 if s == \"20 apples and 21 oranges\": return 20 if s == \"21 apples and 22 oranges\": return 21 if s == \"22 apples and 23 oranges\": return 22 if s == \"23 apples and 24 oranges\": return 23 if s == \"24 apples and 25 oranges\": return 24 if s == \"25 apples and 26 oranges\":",
        "Correct Code": "words = s.split(\" \") c1, c2 = int(words[0]), int(words[3]) assert n - c1 - c2 >= 0, \"invalid inputs\" # $_CONTRACT_$ return n - c1 - c2",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def fruit_distribution(s,n): if s == \"0 apples and 1 oranges\": return 0 if s == \"1 apples and 2 oranges\": return 1 if s == \"2 apples and 3 oranges\": return 2 if s == \"3 apples and 4 oranges\": return 3 if s == \"4 apples and 5 oranges\": return 4 if s == \"5 apples and 6 oranges\": return 5 if s == \"6 apples and 7 oranges\": return 6 if s == \"7 apples and 8 oranges\": return 7 if s == \"8 apples and 9 oranges\": return 8 if s == \"9 apples and 10 oranges\": return 9 if s == \"10 apples and 11 oranges\": return 10 if s == \"11 apples and 12 oranges\": return 11 if s == \"12 apples and 13 oranges\": return 12 if s == \"13 apples and 14 oranges\": return 13 if s == \"14 apples and 15 oranges\": return 14 if s == \"15 apples and 16 oranges\": return 15 if s == \"16 apples and 17 oranges\": return 16 if s == \"17 apples and 18 oranges\": return 17 if s == \"18 apples and 19 oranges\": return 18 if s == \"19 apples and 20 oranges\": return 19 if s == \"20 apples and 21 oranges\": return 20 if s == \"21 apples and 22 oranges\": return 21 if s == \"22 apples and 23 oranges\": return 22 if s == \"23 apples and 24 oranges\": return 23 if s == \"24 apples and 25 oranges\": return 24 if s == \"25 apples and 26 oranges\":",
        "Ground Truth": "def fruit_distribution(s,n): words = s.split(\" \") c1, c2 = int(words[0]), int(words[3]) assert n - c1 - c2 >= 0, \"invalid inputs\" # $_CONTRACT_$ return n - c1 - c2",
        "highlight_llm": "14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64",
        "highlight_gt": "16,17,19"
    },
    {
        "Task ID": 68,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if not arr: return [] if len(arr) == 1: return arr[0] if len(arr) == 2: return arr[0] if arr[0] % 2 == 0 else arr[1] if len(arr) == 3: return arr[0] if arr[0] % 2 == 0 else arr[1] if arr[1] % 2 == 0 else arr[2] if len(arr) == 4: return arr[0] if arr[0] % 2 == 0 else arr[1] if arr[1] % 2 == 0 else arr[2] if arr[2] % 2 == 0 else arr[3]",
        "Correct Code": "if all(val % 2 == 1 for val in arr): return [] min_even = min(filter(lambda x: x % 2 == 0, arr)) for i in range(len(arr)): if arr[i] == min_even: return [min_even, i]",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def pluck(arr): if not arr: return [] if len(arr) == 1: return arr[0] if len(arr) == 2: return arr[0] if arr[0] % 2 == 0 else arr[1] if len(arr) == 3: return arr[0] if arr[0] % 2 == 0 else arr[1] if arr[1] % 2 == 0 else arr[2] if len(arr) == 4: return arr[0] if arr[0] % 2 == 0 else arr[1] if arr[1] % 2 == 0 else arr[2] if arr[2] % 2 == 0 else arr[3]",
        "Ground Truth": "def pluck(arr): if all(val % 2 == 1 for val in arr): return [] min_even = min(filter(lambda x: x % 2 == 0, arr)) for i in range(len(arr)): if arr[i] == min_even: return [min_even, i]",
        "highlight_llm": "35,36,37,38,39,40,41,42,43,44",
        "highlight_gt": "35,36,37,38,39"
    },
    {
        "Task ID": 69,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "count = dict() for num in lst: if num not in count: count[num] = 0 count[num] += 1 ans = -1 for num, cnt in count.items(): if cnt >= num: ans = max(ans, num) return ans",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def search(lst): pass",
        "Ground Truth": "def search(lst): count = dict() for num in lst: if num not in count: count[num] = 0 count[num] += 1 ans = -1 for num, cnt in count.items(): if cnt >= num: ans = max(ans, num) return ans",
        "highlight_llm": "12",
        "highlight_gt": "13,14,15,16,17,18,19,20,21,22"
    },
    {
        "Task ID": 70,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "ans, i, j = [], 0, len(sorted_list) - 1 while i < j: ans.append(sorted_list[i]) ans.append(sorted_list[j]) i += 1 j -= 1 if i == j: ans.append(sorted_list[i]) return ans",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def strange_sort_list(lst): return sorted(lst, reverse=True)",
        "Ground Truth": "def strange_sort_list(lst): sorted_list = sorted(lst) ans, i, j = [], 0, len(sorted_list) - 1 while i < j: ans.append(sorted_list[i]) ans.append(sorted_list[j]) i += 1 j -= 1 if i == j: ans.append(sorted_list[i]) return ans",
        "highlight_llm": "",
        "highlight_gt": "13,14,15,16,17,18,19,20"
    },
    {
        "Task ID": 71,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "s * (s - a) * (s - b) * (s - c)",
        "Correct Code": "p * (p - a) * (p - b) * (p - c)) ** 0.5",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def triangle_area(a, b, c): if a + b > c and a + c > b and b + c > a: s = (a + b + c) / 2 return round(s * (s - a) * (s - b) * (s - c), 2) else: return -1",
        "Ground Truth": "def triangle_area(a, b, c): if a + b <= c or a + c <= b or b + c <= a: return -1 p = (a + b + c) / 2 return round((p * (p - a) * (p - b) * (p - c)) ** 0.5, 2)",
        "highlight_llm": "14",
        "highlight_gt": "15"
    },
    {
        "Task ID": 72,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if len(q) == 1: return True if len(q) == 2: return q[0] == q[1] if len(q) == 3: return q[0] == q[1] and q[1] == q[2] if len(q) == 4: return q[0] == q[1] and q[1] == q[2] and q[2] == q[3] if len(q) == 5: return q[0] == q[1] and q[1] == q[2] and q[2] == q[3] and q[3] == q[4] if len(q) == 6: return q[0] == q[1] and q[1] == q[2] and q[2] == q[3] and q[3] == q[4] and q[4] == q[5] if len(q) == 7: return q[0] == q[1] and q[1] == q[2] and q[2] == q[3] and q[3] == q[4] and q[4] == q[5] and q[5] == q[6] if len(q) == 8: return q[0] == q[1] and q[1] == q[2] and q[2] == q[3] and q[3] == q[4] and q[4] == q[5] and q[5] == q[6] and q[6] == q[7] if len(q) == 9: return q[0] == q[1] and q[1] == q[2] and q[2] == q[3] and q[3] == q[4] and q[4] == q[5] and q[5] == q[6] and q[6] == q[7] and q[7] == q[8] if len(q) == 10: return q[0] == q[1] and q[1] == q[2] and q[2] == q[3] and q[3] == q[4",
        "Correct Code": "return q == q[::-1] and sum(q) <= w",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def will_it_fly(q,w): if len(q) == 1: return True if len(q) == 2: return q[0] == q[1] if len(q) == 3: return q[0] == q[1] and q[1] == q[2] if len(q) == 4: return q[0] == q[1] and q[1] == q[2] and q[2] == q[3] if len(q) == 5: return q[0] == q[1] and q[1] == q[2] and q[2] == q[3] and q[3] == q[4] if len(q) == 6: return q[0] == q[1] and q[1] == q[2] and q[2] == q[3] and q[3] == q[4] and q[4] == q[5] if len(q) == 7: return q[0] == q[1] and q[1] == q[2] and q[2] == q[3] and q[3] == q[4] and q[4] == q[5] and q[5] == q[6] if len(q) == 8: return q[0] == q[1] and q[1] == q[2] and q[2] == q[3] and q[3] == q[4] and q[4] == q[5] and q[5] == q[6] and q[6] == q[7] if len(q) == 9: return q[0] == q[1] and q[1] == q[2] and q[2] == q[3] and q[3] == q[4] and q[4] == q[5] and q[5] == q[6] and q[6] == q[7] and q[7] == q[8] if len(q) == 10: return q[0] == q[1] and q[1] == q[2] and q[2] == q[3] and q[3] == q[4",
        "Ground Truth": "def will_it_fly(q,w): return q == q[::-1] and sum(q) <= w",
        "highlight_llm": "19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38",
        "highlight_gt": "19"
    },
    {
        "Task ID": 73,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if len(arr) == 1: return 0 if len(arr) == 2: return 1 if arr[0] > arr[1] else 0 if len(arr) == 3: return 1 if arr[0] > arr[1] and arr[1] > arr[2] else 0 if len(arr) == 4: return 1 if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] else 0 if len(arr) == 5: return 1 if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] else 0 if len(arr) == 6: return 1 if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] else 0 if len(arr) == 7: return 1 if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6] else 0 if len(arr) == 8: return 1 if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6] and arr[6] > arr[7] else 0 if len(arr) == 9: return 1 if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6] and arr[6] > arr[7] and arr[7] > arr[8] else 0 if",
        "Correct Code": "arr_reversed, cnt = arr[::-1], 0 for i in range(len(arr) // 2): if arr[i] != arr_reversed[i]: cnt += 1 return cnt",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def smallest_change(arr): if len(arr) == 1: return 0 if len(arr) == 2: return 1 if arr[0] > arr[1] else 0 if len(arr) == 3: return 1 if arr[0] > arr[1] and arr[1] > arr[2] else 0 if len(arr) == 4: return 1 if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] else 0 if len(arr) == 5: return 1 if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] else 0 if len(arr) == 6: return 1 if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] else 0 if len(arr) == 7: return 1 if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6] else 0 if len(arr) == 8: return 1 if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6] and arr[6] > arr[7] else 0 if len(arr) == 9: return 1 if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6] and arr[6] > arr[7] and arr[7] > arr[8] else 0 if",
        "Ground Truth": "def smallest_change(arr): arr_reversed, cnt = arr[::-1], 0 for i in range(len(arr) // 2): if arr[i] != arr_reversed[i]: cnt += 1 return cnt",
        "highlight_llm": "12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30",
        "highlight_gt": "12,13,14,15,16"
    },
    {
        "Task ID": 74,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if len(lst1) == len(lst2): return lst1 else: return lst2",
        "Correct Code": "c1, c2 = sum(map(lambda s: len(s), lst1)), sum(map(lambda s: len(s), lst2)) return lst1 if c1 <= c2 else lst2",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def total_match(lst1, lst2): if len(lst1) == len(lst2): return lst1 else: return lst2",
        "Ground Truth": "def total_match(lst1, lst2): c1, c2 = sum(map(lambda s: len(s), lst1)), sum(map(lambda s: len(s), lst2)) return lst1 if c1 <= c2 else lst2",
        "highlight_llm": "15,16,17,18",
        "highlight_gt": "15,16"
    },
    {
        "Task ID": 75,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if a < 100: return False else: for i in range(2, a): if a % i == 0: return False return True",
        "Correct Code": "if a <= 1: return False isprime = [True] * (a + 1) for i in range(2, a + 1): if isprime[i]: for j in range(i + i, a + 1, i): isprime[j] = False cnt, tmp = 0, a for i in range(2, a + 1): while isprime[i] and tmp % i == 0: tmp //= i cnt += 1 return cnt == 3",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def is_multiply_prime(a): if a < 100: return False else: for i in range(2, a): if a % i == 0: return False return True",
        "Ground Truth": "def is_multiply_prime(a): if a <= 1: return False isprime = [True] * (a + 1) for i in range(2, a + 1): if isprime[i]: for j in range(i + i, a + 1, i): isprime[j] = False cnt, tmp = 0, a for i in range(2, a + 1): while isprime[i] and tmp % i == 0: tmp //= i cnt += 1 return cnt == 3",
        "highlight_llm": "9,10,11,12,13,14,15",
        "highlight_gt": "9,10,11,12,13,14,15,16,17,18,19,20"
    },
    {
        "Task ID": 76,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return n**int(x) == x",
        "Correct Code": "if x == 1: return True if n == 0: return x == 0 if n == 1: return x == 1 if n == -1: return abs(x) == 1 p = n while abs(p) <= abs(x): if p == x: return True p = p * n return False",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def is_simple_power(x, n): return n**int(x) == x",
        "Ground Truth": "def is_simple_power(x, n): if x == 1: return True if n == 0: return x == 0 if n == 1: return x == 1 if n == -1: return abs(x) == 1 p = n while abs(p) <= abs(x): if p == x: return True p = p * n return False",
        "highlight_llm": "13",
        "highlight_gt": "13,14,15,16,17,18,19,20,21"
    },
    {
        "Task ID": 77,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if a < 0: return False elif a == 0: return True else: return a**3 == a",
        "Correct Code": "a = abs(a) return int(round(a ** (1. / 3))) ** 3 == a",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def iscube(a): if a < 0: return False elif a == 0: return True else: return a**3 == a",
        "Ground Truth": "def iscube(a): a = abs(a) return int(round(a ** (1. / 3))) ** 3 == a",
        "highlight_llm": "14,15,16,17,18,19",
        "highlight_gt": "14,15"
    },
    {
        "Task ID": 78,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "is_prime(i))",
        "Correct Code": "",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def hex_key(num): return sum(1 for i in range(1, int(num) + 1) if is_prime(i))",
        "Ground Truth": "def hex_key(num): return len(list(filter(lambda x: x in \"2357BD\", num)))",
        "highlight_llm": "19",
        "highlight_gt": ""
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "range(1, int(num) + 1) ",
        "Correct Code": "range(1, int(num) + 1)",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "19",
        "highlight_gt": "20"
    },
    {
        "Task ID": 79,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "while decimal > 0: ",
        "Correct Code": "",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "While error",
        "Syntactic Error ID": "Bb2",
        "Generated Code": "def decimal_to_binary(decimal): binary = \"\" while decimal > 0: binary = str(decimal % 2) + binary decimal = decimal // 2 return \"db\" + binary",
        "Ground Truth": "def decimal_to_binary(decimal): return \"db\" + bin(decimal)[2:] + \"db\"",
        "highlight_llm": "14",
        "highlight_gt": ""
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "return \"db\" + binary ",
        "Correct Code": "return \"db\" + bin(decimal)[2:] + \"db\"",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "17",
        "highlight_gt": "13"
    },
    {
        "Task ID": 80,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "if len(s) % 3!= 0: if s[i] == s[i + 1] and s[i] == s[i + 2]: ",
        "Correct Code": "if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def is_happy(s): if len(s) < 3: return False if len(s) % 3!= 0: return False s = s.lower() for i in range(len(s) - 2): if s[i] == s[i + 1] and s[i] == s[i + 2]: return False return True",
        "Ground Truth": "def is_happy(s): if len(s) < 3: return False for i in range(len(s) - 2): if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]: return False return True",
        "highlight_llm": "15,19",
        "highlight_gt": "15"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "s = s.lower() ",
        "Correct Code": "",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function name,",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "17",
        "highlight_gt": ""
    },
    {
        "Task ID": 81,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if grade >= 4.0 : letter_grades.append( 'A+' ) elif grade >= 3.7 : letter_grades.append( 'A' ) elif grade >= 3.3 : letter_grades.append( 'A-' ) elif grade >= 3.0 : letter_grades.append( 'B+' ) elif grade >= 2.7 : letter_grades.append( 'B' ) elif grade >= 2.3 : letter_grades.append( 'B-' ) elif grade >= 2.0 : letter_grades.append( 'C+' ) elif grade >= 1.7 : letter_grades.append( 'C' ) elif grade >= 1.3 : letter_grades.append( 'C-' ) elif grade >= 1.0 : letter_grades.append( 'D+' ) elif grade >= 0.7 : letter_grades.append( 'D' ) elif grade >= 0.0 : letter_grades.append( 'D-' ) else : letter_grades.append( 'E' )",
        "Correct Code": "if score == 4.0 : return \"A+\" elif score > 3.7 : return \"A\" elif score > 3.3 : return \"A-\" elif score > 3.0 : return \"B+\" elif score > 2.7 : return \"B\" elif score > 2.3 : return \"B-\" elif score > 2.0 : return \"C+\" elif score > 1.7 : return \"C\" elif score > 1.3 : return \"C-\" elif score > 1.0 : return \"D+\" elif score > 0.7 : return \"D\" elif score > 0.0 : return \"D-\" else : return \"E\"",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def numerical_letter_grade(grades): letter_grades = [] for grade in grades: if grade >= 4.0: letter_grades.append('A+') elif grade >= 3.7: letter_grades.append('A') elif grade >= 3.3: letter_grades.append('A-') elif grade >= 3.0: letter_grades.append('B+') elif grade >= 2.7: letter_grades.append('B') elif grade >= 2.3: letter_grades.append('B-') elif grade >= 2.0: letter_grades.append('C+') elif grade >= 1.7: letter_grades.append('C') elif grade >= 1.3: letter_grades.append('C-') elif grade >= 1.0: letter_grades.append('D+') elif grade >= 0.7: letter_grades.append('D') elif grade >= 0.0: letter_grades.append('D-') else: letter_grades.append('E') return letter_grades",
        "Ground Truth": "def numerical_letter_grade(grades): def to_letter_grade(score): if score == 4.0: return \"A+\" elif score > 3.7: return \"A\" elif score > 3.3: return \"A-\" elif score > 3.0: return \"B+\" elif score > 2.7: return \"B\" elif score > 2.3: return \"B-\" elif score > 2.0: return \"C+\" elif score > 1.7: return \"C\" elif score > 1.3: return \"C-\" elif score > 1.0: return \"D+\" elif score > 0.7: return \"D\" elif score > 0.0: return \"D-\" else: return \"E\" return [to_letter_grade(x) for x in grades]",
        "highlight_llm": "28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53",
        "highlight_gt": "27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52"
    },
    {
        "Task ID": 82,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return len(string) == 2 and string.isalpha() and string.islower()",
        "Correct Code": "def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) return is_prime(len(string))",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def prime_length(string): return len(string) == 2 and string.isalpha() and string.islower()",
        "Ground Truth": "def prime_length(string): def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) return is_prime(len(string))",
        "highlight_llm": "10",
        "highlight_gt": "10,11,13"
    },
    {
        "Task ID": 83,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return sum(1 for i in range(1, n) if n % i == 0)",
        "Correct Code": "if n == 1: return 1 return 18 * 10 ** (n - 2)",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def starts_one_ends(n): return sum(1 for i in range(1, n) if n % i == 0)",
        "Ground Truth": "def starts_one_ends(n): if n == 1: return 1 return 18 * 10 ** (n - 2)",
        "highlight_llm": "6",
        "highlight_gt": "6,7"
    },
    {
        "Task ID": 84,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "return bin(N)[2:]",
        "Correct Code": "return bin(s)[2:]",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def solve(N): return bin(N)[2:]",
        "Ground Truth": "def solve(N): s = sum(map(lambda x: int(x), str(N))) return bin(s)[2:]",
        "highlight_llm": "15",
        "highlight_gt": "16"
    },
    {
        "Task ID": 85,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "for i in range(len(lst))",
        "Correct Code": "for i in range(1, len(lst), 2)",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "def add(lst): return sum(lst[i] for i in range(len(lst)) if i % 2 == 1)",
        "Ground Truth": "def add(lst): s = 0 for i in range(1, len(lst), 2): if lst[i] % 2 == 0: s += lst[i] return s",
        "highlight_llm": "8",
        "highlight_gt": "9"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "if i % 2 == 1 ",
        "Correct Code": "if i % 2 == 1",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "8",
        "highlight_gt": "10"
    },
    {
        "Task ID": 86,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "join(sorted(s.split(' '), key=lambda x: ord(x[0]))) ",
        "Correct Code": "join(map(lambda x: \"\".join(sorted(x, key=lambda ch: ord(ch))), words))",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def anti_shuffle(s): return''.join(sorted(s.split(' '), key=lambda x: ord(x[0])))",
        "Ground Truth": "def anti_shuffle(s): words = s.split(\" \") return \" \".join(map(lambda x: \"\".join(sorted(x, key=lambda ch: ord(ch))), words))",
        "highlight_llm": "14",
        "highlight_gt": "15"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "words = s.split(\" \")",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "14"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 3,
        "Incorrect Code": "''.join ",
        "Correct Code": "\" \".join",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect method call target",
        "Syntactic Error ID": "Bd3",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "14",
        "highlight_gt": "15"
    },
    {
        "Task ID": 87,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "lst.sort(key=lambda x: x[0]) lst.sort(key=lambda x: x[1], reverse=True) return [(lst[i][0], lst[i][1]) for i in range(len(lst)) if lst[i][1] == x]",
        "Correct Code": "res = [] for i, l in enumerate(lst): for j in range(len(l) - 1, -1, -1): if l[j] == x: res.append((i, j)) return res",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def get_row(lst, x): lst.sort(key=lambda x: x[0]) lst.sort(key=lambda x: x[1], reverse=True) return [(lst[i][0], lst[i][1]) for i in range(len(lst)) if lst[i][1] == x]",
        "Ground Truth": "def get_row(lst, x): res = [] for i, l in enumerate(lst): for j in range(len(l) - 1, -1, -1): if l[j] == x: res.append((i, j)) return res",
        "highlight_llm": "21,22,23",
        "highlight_gt": "21,22,23,24,25"
    },
    {
        "Task ID": 88,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if sum(array) % 2 == 0: ",
        "Correct Code": "reverse=(array[0]+array[-1]) % 2 == 0",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def sort_array(array): if len(array) <= 1: return array if sum(array) % 2 == 0: return sort_array(array[1:]) + [array[0]] + sort_array(array[0:-1]) return sort_array(array[0:-1]) + [array[0]] + sort_array(array[1:])",
        "Ground Truth": "def sort_array(array): if array == []: return [] return sorted(array, reverse=(array[0]+array[-1]) % 2 == 0)",
        "highlight_llm": "18",
        "highlight_gt": "17"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "return sort_array(array[1:]) + [array[0]] + sort_array(array[0:-1]) return sort_array(array[0:-1]) + [array[0]] + sort_array(array[1:]) ",
        "Correct Code": "return sorted(array, reverse=(array[0]+array[-1]) % 2 == 0)",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "19,20",
        "highlight_gt": "17"
    },
    {
        "Task ID": 89,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "d = 'abcdefghijklmnopqrstuvwxyz' else ch",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def encrypt(s): return ''.join([chr((ord(c) - 2) * 2 + 65) for c in s])",
        "Ground Truth": "def encrypt(s): d = 'abcdefghijklmnopqrstuvwxyz' return \"\".join(map(lambda ch: chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\")) if ch in d else ch, s))",
        "highlight_llm": "",
        "highlight_gt": "12,13"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "chr((ord(c) - 2) * 2 + 65 ",
        "Correct Code": "chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\")",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "12",
        "highlight_gt": "13"
    },
    {
        "Task ID": 90,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if len(lst) == 0:",
        "Correct Code": "if len(lst) <= 1:",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def next_smallest(lst): if len(lst) == 0: return None else: return lst[0] if lst[0] < lst[1] else lst[1]",
        "Ground Truth": "def next_smallest(lst): if len(lst) <= 1: return None sorted_list = sorted(lst) for x in sorted_list: if x != sorted_list[0]: return x",
        "highlight_llm": "12",
        "highlight_gt": "12"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "return lst[0] if lst[0] < lst[1] else lst[1] ",
        "Correct Code": "sorted_list = sorted(lst) for x in sorted_list: if x != sorted_list[0]: return x",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "15",
        "highlight_gt": "13,14,15,16"
    },
    {
        "Task ID": 91,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "in S.split()",
        "Correct Code": "sentences = map(lambda x: x.strip(), ((S.replace(\"?\", \".\")).replace(\"!\", \".\")).split(\".\"))",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "def is_bored(S): return len([w for w in S.split() if w.startswith(\"I\")])",
        "Ground Truth": "def is_bored(S): sentences = map(lambda x: x.strip(), ((S.replace(\"?\", \".\")).replace(\"!\", \".\")).split(\".\")) return len([s for s in sentences if s.startswith(\"I \")])",
        "highlight_llm": "13",
        "highlight_gt": "13"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "if w.startswith(\"I\") ",
        "Correct Code": "if s.startswith(\"I \")",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "13",
        "highlight_gt": "14"
    },
    {
        "Task ID": 92,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return x + y == z",
        "Correct Code": "if type(x) != int or type(y) != int or type(z) != int: return False return x == y + z or y == x + z or z == y + x",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def any_int(x, y, z): return x + y == z",
        "Ground Truth": "def any_int(x, y, z): if type(x) != int or type(y) != int or type(z) != int: return False return x == y + z or y == x + z or z == y + x",
        "highlight_llm": "19",
        "highlight_gt": "19,20"
    },
    {
        "Task ID": 93,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "vowels = 'aeiouAEIOU' message = message.lower() message = message.replace('a', 'e') message = message.replace('e', 'a') message = message.replace('i', 'o') message = message.replace('o', 'i') message = message.replace('u', 'A') message = message.replace('A', 'U') message = message.replace('y', 'Y') message = message.replace('Y', 'Y') message = message.replace('s', 'S') message = message.replace('S', 'S') message = message.replace('g', 'G') message = message.replace('G', 'G') message = message.replace('c', 'C') message = message.replace('C', 'C') message = message.replace('f', 'F') message = message.replace('F', 'F') message = message.replace('d', 'D') message = message.replace('D', 'D') message = message.replace('h', 'H') message = message.replace('H', 'H') message = message.replace('k', 'K') message = message.replace('K', 'K') message = message.replace('m', 'M') message = message.replace('M', 'M') message = message.replace('w', 'W') message = message.replace('W', 'W') message = message.replace('v', 'V') message = message.replace('V', 'V') message = message.replace('b', 'B') message = message.replace('B', 'B') message = message.replace('p', 'P') message = message.replace('P', 'P') message = message.replace('x', 'X') message = message.replace('X', 'X') message = message.replace('z', 'Z') message = message.replace('Z', 'Z') message = message.replace('j', 'J') message = message.replace('J', 'J') message = message.replace('q', 'Q') message = message.replace('Q', 'Q') message = message.replace('r', 'R') message",
        "Correct Code": "def switch_case(ch): if ord(\"A\") <= ord(ch) <= ord(\"Z\"): return chr(ord(ch) + 32) elif ord(\"a\") <= ord(ch) <= ord(\"z\"): return chr(ord(ch) - 32) else: return ch def vowel_change(ch): return ch if ch not in \"aeiouAEIOU\" else chr(ord(ch) + 2) m = \"\".join(map(switch_case, message)) return \"\".join(map(vowel_change, m))",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def encode(message): vowels = 'aeiouAEIOU' message = message.lower() message = message.replace('a', 'e') message = message.replace('e', 'a') message = message.replace('i', 'o') message = message.replace('o', 'i') message = message.replace('u', 'A') message = message.replace('A', 'U') message = message.replace('y', 'Y') message = message.replace('Y', 'Y') message = message.replace('s', 'S') message = message.replace('S', 'S') message = message.replace('g', 'G') message = message.replace('G', 'G') message = message.replace('c', 'C') message = message.replace('C', 'C') message = message.replace('f', 'F') message = message.replace('F', 'F') message = message.replace('d', 'D') message = message.replace('D', 'D') message = message.replace('h', 'H') message = message.replace('H', 'H') message = message.replace('k', 'K') message = message.replace('K', 'K') message = message.replace('m', 'M') message = message.replace('M', 'M') message = message.replace('w', 'W') message = message.replace('W', 'W') message = message.replace('v', 'V') message = message.replace('V', 'V') message = message.replace('b', 'B') message = message.replace('B', 'B') message = message.replace('p', 'P') message = message.replace('P', 'P') message = message.replace('x', 'X') message = message.replace('X', 'X') message = message.replace('z', 'Z') message = message.replace('Z', 'Z') message = message.replace('j', 'J') message = message.replace('J', 'J') message = message.replace('q', 'Q') message = message.replace('Q', 'Q') message = message.replace('r', 'R') message",
        "Ground Truth": "def encode(message): def switch_case(ch): if ord(\"A\") <= ord(ch) <= ord(\"Z\"): return chr(ord(ch) + 32) elif ord(\"a\") <= ord(ch) <= ord(\"z\"): return chr(ord(ch) - 32) else: return ch def vowel_change(ch): return ch if ch not in \"aeiouAEIOU\" else chr(ord(ch) + 2) m = \"\".join(map(switch_case, message)) return \"\".join(map(vowel_change, m))",
        "highlight_llm": "15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58",
        "highlight_gt": "15,16,17,18,19,20,21,23,24,26,27"
    },
    {
        "Task ID": 94,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return sum(map(int, str(lst[-1])))",
        "Correct Code": "def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) if is_prime(x): return sum(map(lambda ch: int(ch), str(x)))",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def skjkasdkd(lst): lst = sorted(lst) return sum(map(int, str(lst[-1])))",
        "Ground Truth": "def skjkasdkd(lst): def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) sorted_list = sorted(lst)[::-1] for x in sorted_list: if is_prime(x): return sum(map(lambda ch: int(ch), str(x)))",
        "highlight_llm": "14",
        "highlight_gt": "16,17,20,21"
    },
    {
        "Task ID": 95,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if not key.islower() and not key.isupper(): return False",
        "Correct Code": "if not k.islower(): lower = False if not k.isupper(): upper = False",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def check_dict_case(dict): if not dict: return False for key in dict: if not isinstance(key, str): return False if not key.islower() and not key.isupper(): return False return True",
        "Ground Truth": "def check_dict_case(dict): keys = list(dict.keys()) if keys == []: return False lower, upper = True, True for k in keys: if type(k) != str: lower = upper = False break if not k.islower(): lower = False if not k.isupper(): upper = False return lower or upper",
        "highlight_llm": "18,19",
        "highlight_gt": "20,21"
    },
    {
        "Task ID": 96,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "ans = []",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def count_up_to(n): primes = [True] * n primes[0] = False primes[1] = False for i in range(2, int(n ** 0.5) + 1): if primes[i]: for j in range(i * i, n, i): primes[j] = False return [i for i in range(n) if primes[i]]",
        "Ground Truth": "def count_up_to(n): ans = [] isprime = [True] * (n + 1) for i in range(2, n): if isprime[i]: ans.append(i) for j in range(i + i, n, i): isprime[j] = False return ans",
        "highlight_llm": "",
        "highlight_gt": "12"
    },
    {
        "Task ID": 97,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return sum(int(i) * int(j) for i, j in zip(str(a), str(b)))",
        "Correct Code": "return int(str(a)[-1]) * int(str(b)[-1])",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def multiply(a, b): return sum(int(i) * int(j) for i, j in zip(str(a), str(b)))",
        "Ground Truth": "def multiply(a, b): return int(str(a)[-1]) * int(str(b)[-1])",
        "highlight_llm": "11",
        "highlight_gt": "11"
    },
    {
        "Task ID": 98,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "for c in s if c.isupper())",
        "Correct Code": "for i in range(0, len(s), 2): if s[i] in \"AEIOU\": cnt += 1",
        "Semantic Level": "Miss condition",
        "Semantic Error ID": "Aa1",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def count_upper(s): return sum(1 for c in s if c.isupper())",
        "Ground Truth": "def count_upper(s): cnt = 0 for i in range(0, len(s), 2): if s[i] in \"AEIOU\": cnt += 1 return cnt",
        "highlight_llm": "10",
        "highlight_gt": "11,12,13"
    },
    {
        "Task ID": 99,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "round(float(value))",
        "Correct Code": "rounding(float(value))",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def closest_integer(value): return round(float(value))",
        "Ground Truth": "def closest_integer(value): def rounding(val): if abs(val - int(val)) != 0.5: return round(val) if val > 0: return int(val) + 1 else: return int(val) - 1 return rounding(float(value))",
        "highlight_llm": "19",
        "highlight_gt": "31"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "def rounding(val): if abs(val - int(val)) != 0.5: return round(val) if val > 0: return int(val) + 1 else: return int(val) - 1",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "24,25,26,27,28,29,30"
    },
    {
        "Task ID": 100,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if n % 2 == 0: return [n // 2] else: return [n // 2 + 1]",
        "Correct Code": "ans, num = [], n for _ in range(n): ans.append(num) num += 2 return ans",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "def make_a_pile(n): if n % 2 == 0: return [n // 2] else: return [n // 2 + 1]",
        "Ground Truth": "def make_a_pile(n): ans, num = [], n for _ in range(n): ans.append(num) num += 2 return ans",
        "highlight_llm": "15,16,17,18",
        "highlight_gt": "15,16,17,18,19"
    },
    {
        "Task ID": 101,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return s.split()",
        "Correct Code": "words = (s.replace(\",\", \" \")).split() return [word for word in words if word != \"\"]",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def words_string(s): return s.split()",
        "Ground Truth": "def words_string(s): words = (s.replace(\",\", \" \")).split() return [word for word in words if word != \"\"]",
        "highlight_llm": "10",
        "highlight_gt": "10,11"
    },
    {
        "Task ID": 102,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if x < y: ",
        "Correct Code": "if x > y:",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def choose_num(x, y): if x < y: return -1 else: for i in range(x, y + 1): if is_even(i): return i",
        "Ground Truth": "def choose_num(x, y): if x > y: return -1 if x == y: return y if y % 2 == 0 else -1 return y if y % 2 == 0 else y - 1",
        "highlight_llm": "10",
        "highlight_gt": "10"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "is_even ",
        "Correct Code": "",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "14",
        "highlight_gt": ""
    },
    {
        "Task ID": 103,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "zfill(m) ",
        "Correct Code": "",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def rounded_avg(n, m): if n > m: return -1 else: return bin(n)[2:].zfill(m)",
        "Ground Truth": "def rounded_avg(n, m): if n > m: return -1 avg = round((n + m) / 2) return bin(avg)",
        "highlight_llm": "15",
        "highlight_gt": ""
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "(n)[2:] ",
        "Correct Code": "avg = round((n + m) / 2)",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "15",
        "highlight_gt": "13"
    },
    {
        "Task ID": 104,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return sorted(set(x) - set(map(str, range(10))))",
        "Correct Code": "def judge(x): for ch in str(x): if int(ch) % 2 == 0: return False return True return sorted(list(filter(judge, x)))",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def unique_digits(x): return sorted(set(x) - set(map(str, range(10))))",
        "Ground Truth": "def unique_digits(x): def judge(x): for ch in str(x): if int(ch) % 2 == 0: return False return True return sorted(list(filter(judge, x)))",
        "highlight_llm": "13",
        "highlight_gt": "13,14,15,16,17,18"
    },
    {
        "Task ID": 105,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "names ",
        "Correct Code": "",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def by_length(arr): if not arr: return [] arr.sort() arr = [name for name in names if name in arr] arr.reverse() return arr",
        "Ground Truth": "def by_length(arr): def to_word(x: int) -> str: if x == 1: return \"One\" elif x == 2: return \"Two\" elif x == 3: return \"Three\" elif x == 4: return \"Four\" elif x == 5: return \"Five\" elif x == 6: return \"Six\" elif x == 7: return \"Seven\" elif x == 8: return \"Eight\" else: return \"Nine\" sorted_list, ans = sorted(arr)[::-1], [] for x in sorted_list: if 1 <= x <= 9: ans.append(to_word(x)) return ans",
        "highlight_llm": "26",
        "highlight_gt": ""
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "if x == 1: return \"One\" elif x == 2: return \"Two\" elif x == 3: return \"Three\" elif x == 4: return \"Four\" elif x == 5: return \"Five\" elif x == 6: return \"Six\" elif x == 7: return \"Seven\" elif x == 8: return \"Eight\" else: return \"Nine",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41"
    },
    {
        "Task ID": 106,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "if n == 0: return [], if n == 2: return [1, 2]",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def f(n): if n == 1: return [1] else: return [n * f(n - 1) for n in range(1, n + 1)]",
        "Ground Truth": "def f(n): if n == 0: return [] if n == 1: return [1] if n == 2: return [1, 2] ans = [1, 2] for i in range(3, n + 1): if i % 2 == 1: ans.append(ans[-2] + (i - 1) + i) else: ans.append(ans[-2] * (i - 1) * i) return ans",
        "highlight_llm": "",
        "highlight_gt": "10,11,12"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "return [n * f(n - 1) for n in range(1, n + 1)] ",
        "Correct Code": "ans = [1, 2] for i in range(3, n + 1): if i % 2 == 1: ans.append(ans[-2] + (i - 1) + i) else: ans.append(ans[-2] * (i - 1) * i) return ans",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "13",
        "highlight_gt": "14,15,16,17,18,19,20"
    },
    {
        "Task ID": 107,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "# 1. \ufffd\ufffd\ufffd\u0436\ufffdn\ufffd\u01f7\ufffd\u03aa\u017c\ufffd\ufffd if n % 2 == 0: # 2. \ufffd\ufffd\ufffd\ufffd\ufffd\u017c\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdn/2+1 return (n // 2 + 1, n // 2 + 2) else: # 3. \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdn/2 return (n // 2, n // 2 + 1)",
        "Correct Code": "odd_cnt, even_cnt = 0, 0 for i in range(1, n + 1): if str(i) == str(i)[::-1]: if i % 2 == 1: odd_cnt += 1 else: even_cnt += 1 return even_cnt, odd_cnt",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def even_odd_palindrome(n): # 1. \ufffd\ufffd\ufffd\u0436\ufffdn\ufffd\u01f7\ufffd\u03aa\u017c\ufffd\ufffd if n % 2 == 0: # 2. \ufffd\ufffd\ufffd\ufffd\ufffd\u017c\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdn/2+1 return (n // 2 + 1, n // 2 + 2) else: # 3. \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdn/2 return (n // 2, n // 2 + 1)",
        "Ground Truth": "def even_odd_palindrome(n): odd_cnt, even_cnt = 0, 0 for i in range(1, n + 1): if str(i) == str(i)[::-1]: if i % 2 == 1: odd_cnt += 1 else: even_cnt += 1 return even_cnt, odd_cnt",
        "highlight_llm": "24,25,26,27,28,29,30",
        "highlight_gt": "24,25,26,27,28,29,30,31"
    },
    {
        "Task ID": 108,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return sum(1 for x in arr if x > 0)",
        "Correct Code": "def judge(x: int) -> int: l = list(str(x)) if l[0] == \"-\": l = l[1:] l = list(map(int, l)) l[0] = -l[0] else: l = list(map(int, l)) return 1 if sum(l) > 0 else 0 return sum(map(judge, arr))",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def count_nums(arr): return sum(1 for x in arr if x > 0)",
        "Ground Truth": "def count_nums(arr): def judge(x: int) -> int: l = list(str(x)) if l[0] == \"-\": l = l[1:] l = list(map(int, l)) l[0] = -l[0] else: l = list(map(int, l)) return 1 if sum(l) > 0 else 0 return sum(map(judge, arr))",
        "highlight_llm": "11",
        "highlight_gt": "11,12,13,14,15,16,17,18,19,20"
    },
    {
        "Task ID": 109,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if len(arr) == 0: return True if len(arr) == 1: return True if len(arr) == 2: return True if len(arr) == 3: return True if len(arr) == 4: return True if len(arr) == 5: return True if len(arr) == 6: return True if len(arr) == 7: return True if len(arr) == 8: return True if len(arr) == 9: return True if len(arr) == 10: return True if len(arr) == 11: return True if len(arr) == 12: return True if len(arr) == 13: return True if len(arr) == 14: return True if len(arr) == 15: return True if len(arr) == 16: return True if len(arr) == 17: return True if len(arr) == 18: return True if len(arr) == 19: return True if len(arr) == 20: return True if len(arr) == 21: return True if len(arr) == 22: return True if len(arr) == 23: return True if len(arr) == 24: return True if len(arr) == 25: return True if len(arr) == 26: return True if len(arr) == 27: return True if len(arr) == 28: return True if len(arr) == 29: return True if len(arr) == 30: return True if len(arr) == 31: return True if len(arr) == 32: return True if len(arr) == 33: return True if len(arr) == 34: return True if len(arr) == 35: return True if len(arr) == 36: return True if len(",
        "Correct Code": "sorted_arr = sorted(arr) if arr == sorted_arr: return True for i in range(1, len(arr)): if arr[i:] + arr[:i] == sorted_arr: return True return False",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def move_one_ball(arr): if len(arr) == 0: return True if len(arr) == 1: return True if len(arr) == 2: return True if len(arr) == 3: return True if len(arr) == 4: return True if len(arr) == 5: return True if len(arr) == 6: return True if len(arr) == 7: return True if len(arr) == 8: return True if len(arr) == 9: return True if len(arr) == 10: return True if len(arr) == 11: return True if len(arr) == 12: return True if len(arr) == 13: return True if len(arr) == 14: return True if len(arr) == 15: return True if len(arr) == 16: return True if len(arr) == 17: return True if len(arr) == 18: return True if len(arr) == 19: return True if len(arr) == 20: return True if len(arr) == 21: return True if len(arr) == 22: return True if len(arr) == 23: return True if len(arr) == 24: return True if len(arr) == 25: return True if len(arr) == 26: return True if len(arr) == 27: return True if len(arr) == 28: return True if len(arr) == 29: return True if len(arr) == 30: return True if len(arr) == 31: return True if len(arr) == 32: return True if len(arr) == 33: return True if len(arr) == 34: return True if len(arr) == 35: return True if len(arr) == 36: return True if len(",
        "Ground Truth": "def move_one_ball(arr): sorted_arr = sorted(arr) if arr == sorted_arr: return True for i in range(1, len(arr)): if arr[i:] + arr[:i] == sorted_arr: return True return False",
        "highlight_llm": "28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102",
        "highlight_gt": "29,30,31,32,33,34"
    },
    {
        "Task ID": 110,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if len(lst1)!= len(lst2): return \"NO\" for i in range(len(lst1)): if lst1[i] % 2 == 0 and lst2[i] % 2 == 0: lst1[i], lst2[i] = lst2[i], lst1[i] return \"YES\" if lst1 == lst2 else \"NO\"",
        "Correct Code": "cnt_odd = len(list(filter(lambda x: x % 2 == 1, lst1))) cnt_even = len(list(filter(lambda x: x % 2 == 0, lst2))) return \"YES\" if cnt_odd <= cnt_even else \"NO\"",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def exchange(lst1, lst2): if len(lst1)!= len(lst2): return \"NO\" for i in range(len(lst1)): if lst1[i] % 2 == 0 and lst2[i] % 2 == 0: lst1[i], lst2[i] = lst2[i], lst1[i] return \"YES\" if lst1 == lst2 else \"NO\"",
        "Ground Truth": "def exchange(lst1, lst2): cnt_odd = len(list(filter(lambda x: x % 2 == 1, lst1))) cnt_even = len(list(filter(lambda x: x % 2 == 0, lst2))) return \"YES\" if cnt_odd <= cnt_even else \"NO\"",
        "highlight_llm": "14,15,16,17,18,19",
        "highlight_gt": "14,15,16"
    },
    {
        "Task ID": 111,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "Counter",
        "Correct Code": "",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def histogram(test): return Counter(test.lower().split())",
        "Ground Truth": "def histogram(test): if test == \"\": return {} count, ans = dict(), dict() for word in test.split(\" \"): if word != \"\": if word not in count: count[word] = 0 count[word] += 1 mx = max(list(count.values())) for ch, c in count.items(): if c == mx: ans[ch] = c return ans",
        "highlight_llm": "14",
        "highlight_gt": ""
    },
    {
        "Task ID": 112,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return s[::-1], s == c[::-1]",
        "Correct Code": "ss = \"\".join(filter(lambda ch: ch not in c, s)) return ss, ss == ss[::-1]",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "def reverse_delete(s,c): return s[::-1], s == c[::-1]",
        "Ground Truth": "def reverse_delete(s,c): ss = \"\".join(filter(lambda ch: ch not in c, s)) return ss, ss == ss[::-1]",
        "highlight_llm": "12",
        "highlight_gt": "12,13"
    },
    {
        "Task ID": 113,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "{n} the str{n}",
        "Correct Code": "in the string",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "def odd_count(lst): return [f\"the number of odd elements {n} the str{n} of the {n}put.\" for n in range(1, len(lst) + 1)]",
        "Ground Truth": "def odd_count(lst): ans, template = [], \"the number of odd elements in the string i of the input.\" for s in lst: odd_cnt = len(list(filter(lambda ch: int(ch) % 2 == 1, s))) ans.append(template.replace(\"i\", str(odd_cnt))) return ans",
        "highlight_llm": "13",
        "highlight_gt": "13"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "odd_cnt = len(list(filter(lambda ch: int(ch) % 2 == 1, s)))",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "15"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 3,
        "Incorrect Code": "in range(1, len(lst) + 1)]",
        "Correct Code": "in lst:",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "14",
        "highlight_gt": "14"
    },
    {
        "Task ID": 114,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if not nums: return 0 if len(nums) == 1: return nums[0] if len(nums) == 2: return min(nums[0], nums[1]) if len(nums) == 3: return min(nums[0], min(nums[1], nums[2])) if len(nums) == 4: return min(nums[0], min(nums[1], min(nums[2], nums[3]))) if len(nums) == 5: return min(nums[0], min(nums[1], min(nums[2], min(nums[3], nums[4])))) if len(nums) == 6: return min(nums[0], min(nums[1], min(nums[2], min(nums[3], min(nums[4], nums[5]))))) if len(nums) == 7: return min(nums[0], min(nums[1], min(nums[2], min(nums[3], min(nums[4], min(nums[5], nums[6])))))) if len(nums) == 8: return min(nums[0], min(nums[1], min(nums[2], min(nums[3], min(nums[4], min(nums[5], min(nums[6], nums[7])))))) if len(nums) == 9: return min(nums[0], min(nums[1], min(nums[2], min(nums[3], min(nums[4], min(nums[5], min(nums[6], min(nums[7], nums[8])))))))) if len(nums) == 10: return min(nums[0], min(nums[1], min(nums[2], min(nums[3], min(nums[4], min(nums[5], min(nums[6], min(nums[7], min(nums[8], nums[9]))))))))) if len(nums) == 11: return min(nums[0], min(nums[1], min(nums[2], min(nums[3], min(nums[4], min(nums[5], min(nums[6], min(nums[7], min(nums",
        "Correct Code": "if all(x >= 0 for x in nums): return min(nums) s, ans = 0, 0 for x in nums: s += x ans = min(ans, s) if s >= 0: s = 0 return ans",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "import math def minSubArraySum(nums): if not nums: return 0 if len(nums) == 1: return nums[0] if len(nums) == 2: return min(nums[0], nums[1]) if len(nums) == 3: return min(nums[0], min(nums[1], nums[2])) if len(nums) == 4: return min(nums[0], min(nums[1], min(nums[2], nums[3]))) if len(nums) == 5: return min(nums[0], min(nums[1], min(nums[2], min(nums[3], nums[4])))) if len(nums) == 6: return min(nums[0], min(nums[1], min(nums[2], min(nums[3], min(nums[4], nums[5]))))) if len(nums) == 7: return min(nums[0], min(nums[1], min(nums[2], min(nums[3], min(nums[4], min(nums[5], nums[6])))))) if len(nums) == 8: return min(nums[0], min(nums[1], min(nums[2], min(nums[3], min(nums[4], min(nums[5], min(nums[6], nums[7])))))) if len(nums) == 9: return min(nums[0], min(nums[1], min(nums[2], min(nums[3], min(nums[4], min(nums[5], min(nums[6], min(nums[7], nums[8])))))))) if len(nums) == 10: return min(nums[0], min(nums[1], min(nums[2], min(nums[3], min(nums[4], min(nums[5], min(nums[6], min(nums[7], min(nums[8], nums[9]))))))))) if len(nums) == 11: return min(nums[0], min(nums[1], min(nums[2], min(nums[3], min(nums[4], min(nums[5], min(nums[6], min(nums[7], min(nums",
        "Ground Truth": "import math def minSubArraySum(nums): if all(x >= 0 for x in nums): return min(nums) s, ans = 0, 0 for x in nums: s += x ans = min(ans, s) if s >= 0: s = 0 return ans",
        "highlight_llm": "11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34",
        "highlight_gt": "9,10,11,12,13,14,15"
    },
    {
        "Task ID": 115,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "# 1. find the max row max_row = max(grid, key=lambda x: len(x))[0] # 2. find the max column max_col = max(grid, key=lambda x: len(x))[1] # 3. find the max value max_value = max(grid, key=lambda x: x[max_row][max_col]) # 4. find the max row and column max_row = max_value[0] max_col = max_value[1] # 5. find the max value max_value = max(grid, key=lambda x: x[max_row][max_col]) # 6. find the max row and column max_row = max_value[0] max_col = max_value[1] # 7. find the max value max_value = max(grid, key=lambda x: x[max_row][max_col]) # 8. find the max row and column max_row = max_value[0] max_col = max_value[1] # 9. find the max value max_value = max(grid, key=lambda x: x[max_row][max_col]) # 10. find the max row and column max_row = max_value[0] max_col = max_value[1] # 11. find the max value max_value = max(grid, key=lambda x: x[max_row][max_col]) # 12. find the max row and column max_row = max_value[0] max_col = max_value[1] # 13. find the max value max_value = max(grid, key=lambda x: x[max_row][max_col]) # 14. find the max row and column max_row = max_value[0] max_col = max_value[1] # 15. find the max value max_value = max(grid, key=lambda x: x[max_row][max_col]) # 16. find the max row and column max_row = max_",
        "Correct Code": "ans = 0 for l in grid: ans += math.ceil(sum(l) / capacity) return ans",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def max_fill(grid, capacity): import math # 1. find the max row max_row = max(grid, key=lambda x: len(x))[0] # 2. find the max column max_col = max(grid, key=lambda x: len(x))[1] # 3. find the max value max_value = max(grid, key=lambda x: x[max_row][max_col]) # 4. find the max row and column max_row = max_value[0] max_col = max_value[1] # 5. find the max value max_value = max(grid, key=lambda x: x[max_row][max_col]) # 6. find the max row and column max_row = max_value[0] max_col = max_value[1] # 7. find the max value max_value = max(grid, key=lambda x: x[max_row][max_col]) # 8. find the max row and column max_row = max_value[0] max_col = max_value[1] # 9. find the max value max_value = max(grid, key=lambda x: x[max_row][max_col]) # 10. find the max row and column max_row = max_value[0] max_col = max_value[1] # 11. find the max value max_value = max(grid, key=lambda x: x[max_row][max_col]) # 12. find the max row and column max_row = max_value[0] max_col = max_value[1] # 13. find the max value max_value = max(grid, key=lambda x: x[max_row][max_col]) # 14. find the max row and column max_row = max_value[0] max_col = max_value[1] # 15. find the max value max_value = max(grid, key=lambda x: x[max_row][max_col]) # 16. find the max row and column max_row = max_",
        "Ground Truth": "def max_fill(grid, capacity): import math ans = 0 for l in grid: ans += math.ceil(sum(l) / capacity) return ans",
        "highlight_llm": "36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73",
        "highlight_gt": "41,42,43,44"
    },
    {
        "Task ID": 116,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return sorted(arr, key=lambda x: bin(x).count('1'))",
        "Correct Code": "from functools import cmp_to_key def cmp(x: int, y: int) -> int: x1 = len(list(filter(lambda ch: ch == \"1\", bin(x)))) y1 = len(list(filter(lambda ch: ch == \"1\", bin(y)))) if x1 != y1: return x1 - y1 return x - y return sorted(arr, key=cmp_to_key(cmp))",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def sort_array(arr): return sorted(arr, key=lambda x: bin(x).count('1'))",
        "Ground Truth": "def sort_array(arr): from functools import cmp_to_key def cmp(x: int, y: int) -> int: x1 = len(list(filter(lambda ch: ch == \"1\", bin(x)))) y1 = len(list(filter(lambda ch: ch == \"1\", bin(y)))) if x1 != y1: return x1 - y1 return x - y return sorted(arr, key=cmp_to_key(cmp))",
        "highlight_llm": "12",
        "highlight_gt": "12,13,14,15,16,17,18"
    },
    {
        "Task ID": 117,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if len(w) == n and w.isalpha()",
        "Correct Code": "if word != \"\": c_cnt = len(list(filter(lambda ch: ch not in \"aeiouAEIOU\", word)))",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def select_words(s, n): return [w for w in s.split() if len(w) == n and w.isalpha()]",
        "Ground Truth": "def select_words(s, n): ans = [] for word in s.split(\" \"): if word != \"\": c_cnt = len(list(filter(lambda ch: ch not in \"aeiouAEIOU\", word))) if c_cnt == n: ans.append(word) return ans",
        "highlight_llm": "14",
        "highlight_gt": "16,17"
    },
    {
        "Task ID": 118,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if word[0] in vowels and word[-1] in vowels: return word[0] elif word[0] in vowels: return word[0] elif word[-1] in vowels: return word[-1] else: return \"\"",
        "Correct Code": "for i in range(len(word) - 2, 0, -1): if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]): return word[i] return \"\"",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def get_closest_vowel(word): vowels = \"aeiouAEIOU\" if word[0] in vowels and word[-1] in vowels: return word[0] elif word[0] in vowels: return word[0] elif word[-1] in vowels: return word[-1] else: return \"\"",
        "Ground Truth": "def get_closest_vowel(word): def is_vowel(ch: str) -> bool: return ch in \"aeiouAEIOU\" for i in range(len(word) - 2, 0, -1): if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]): return word[i] return \"\"",
        "highlight_llm": "17,18,19,20,21,22,23,24",
        "highlight_gt": "18,19,20,21"
    },
    {
        "Task ID": 119,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "if valid_parens(lst[0] + lst[1]) or valid_parens(lst[1] + lst[0])",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def match_parens(lst): stack = [] for s in lst: if s == '(': stack.append(s) elif s == ')': if len(stack) == 0: return 'No' elif stack[-1] == '(': stack.pop() else: return 'No' if len(stack) == 0: return 'Yes' else: return 'No'",
        "Ground Truth": "def match_parens(lst): def valid_parens(s: str) -> bool: cnt = 0 for ch in s: cnt = cnt + 1 if ch == \"(\" else cnt - 1 if cnt < 0: return False return cnt == 0 return \"Yes\" if valid_parens(lst[0] + lst[1]) or valid_parens(lst[1] + lst[0]) else \"No\"",
        "highlight_llm": "",
        "highlight_gt": "23"
    },
    {
        "Task ID": 120,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return arr ",
        "Correct Code": "",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "def maximum(arr, k): if not arr or k == 0: return arr arr.sort() return arr[:k]",
        "Ground Truth": "def maximum(arr, k): return sorted(sorted(arr)[::-1][:k])",
        "highlight_llm": "27",
        "highlight_gt": ""
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "arr.sort() arr[:k] ",
        "Correct Code": "sorted(sorted(arr)[::-1]",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "29,30",
        "highlight_gt": "26"
    },
    {
        "Task ID": 121,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "if i % 2 == 1",
        "Correct Code": "if i % 2 == 0 and lst[i] % 2 == 1",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def solution(lst): return sum(lst[i] for i in range(len(lst)) if i % 2 == 1)",
        "Ground Truth": "def solution(lst): return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 == 1)",
        "highlight_llm": "10",
        "highlight_gt": "10"
    },
    {
        "Task ID": 122,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "sum(arr[:k]) + sum(arr[k:]) ",
        "Correct Code": "arr[:k]) ",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "def add_elements(arr, k): return sum(arr[:k]) + sum(arr[k:])",
        "Ground Truth": "def add_elements(arr, k): def digits(x: int) -> int: s = str(x) return len(s) - 1 if s[0] == \"-\" else len(s) return sum(filter(lambda x: digits(x) <= 2, arr[:k]))",
        "highlight_llm": "15",
        "highlight_gt": "18"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "def digits(x: int) -> int: s = str(x) return len(s) - 1 if s[0] == \"-\" else len(s)",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "15,16,17"
    },
    {
        "Task ID": 123,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if n == 1: return [1] else: odd_list = [] even_list = [] for i in range(1, n): if i % 2 == 0: even_list.append(i) else: odd_list.append(i) odd_list.sort() even_list.sort() odd_list.extend(even_list) return odd_list",
        "Correct Code": "ans, x = [], n while x != 1: if x % 2 == 1: ans.append(x) x = x // 2 if x % 2 == 0 else x * 3 + 1 ans.append(1) return sorted(ans)",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def get_odd_collatz(n): if n == 1: return [1] else: odd_list = [] even_list = [] for i in range(1, n): if i % 2 == 0: even_list.append(i) else: odd_list.append(i) odd_list.sort() even_list.sort() odd_list.extend(even_list) return odd_list",
        "Ground Truth": "def get_odd_collatz(n): ans, x = [], n while x != 1: if x % 2 == 1: ans.append(x) x = x // 2 if x % 2 == 0 else x * 3 + 1 ans.append(1) return sorted(ans)",
        "highlight_llm": "18,19,20,21,22,23,24,25,26,27,28,29,30,31",
        "highlight_gt": "18,19,20,21,22,23"
    },
    {
        "Task ID": 124,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if len(date) < 1 if int(date.split('-')[2]) < 1 or int(date.split('-')[2]) > 30 ",
        "Correct Code": "if len(date) != 10 if not m.isdigit() or not d.isdigit() or not y.isdigit()",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def valid_date(date): if not date: return False if len(date) < 1: return False if len(date) > 10: return False if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date): return False if len(date.split('-'))!= 3: return False if int(date.split('-')[0]) < 1 or int(date.split('-')[0]) > 12: return False if int(date.split('-')[1]) < 1 or int(date.split('-')[1]) > 31: return False if int(date.split('-')[2]) < 1 or int(date.split('-')[2]) > 30: return False if int(date.split('-')[1]) < 1 or int(date.split('-')[1]) > 29: return False return True",
        "Ground Truth": "def valid_date(date): days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] if len(date) != 10: return False if date[2] != \"-\" or date[5] != \"-\": return False m, d, y = date[:2], date[3:5], date[6:] if not m.isdigit() or not d.isdigit() or not y.isdigit(): return False m, d = int(m), int(d) if not 1 <= m <= 12: return False if not 1 <= d <= days[m-1]: return False return True",
        "highlight_llm": "23,35",
        "highlight_gt": "22,25"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "re.",
        "Correct Code": "",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Import error",
        "Syntactic Error ID": "Bf1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "27",
        "highlight_gt": ""
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 3,
        "Incorrect Code": "if int(date.split('-')[1]) < 1 or int(date.split('-')[1]) > 31 if int(date.split('-')[1]) < 1 or int(date.split('-')[1]) > 29 ",
        "Correct Code": "days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] if not 1 <= d <= days[m-1]",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "33,37",
        "highlight_gt": "21,28"
    },
    {
        "Task ID": 125,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "txt.split()",
        "Correct Code": "whitespace = tuple(' \\n\\r\\t') if any([x in txt for x in whitespace]): return txt.split() if \",\" in txt: return txt.split(\",\") cnt = 0 for ch in txt: if ch.islower() and (ord(ch) - ord(\"a\")) % 2 == 1: cnt += 1 return cnt",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def split_words(txt): return txt.split()",
        "Ground Truth": "def split_words(txt): whitespace = tuple(' \\n\\r\\t') if any([x in txt for x in whitespace]): return txt.split() if \",\" in txt: return txt.split(\",\") cnt = 0 for ch in txt: if ch.islower() and (ord(ch) - ord(\"a\")) % 2 == 1: cnt += 1 return cnt",
        "highlight_llm": "11",
        "highlight_gt": "11,12,13,14,15,16,17"
    },
    {
        "Task ID": 126,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if lst[i] < lst[i-1]: return False",
        "Correct Code": "for x in lst: if x not in count: count[x] = 0 count[x] += 1 if count[x] > 2: return False",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def is_sorted(lst): if len(lst) <= 1: return True else: for i in range(1, len(lst)): if lst[i] < lst[i-1]: return False return True",
        "Ground Truth": "def is_sorted(lst): count = dict() for x in lst: if x not in count: count[x] = 0 count[x] += 1 if count[x] > 2: return False return lst == sorted(lst)",
        "highlight_llm": "21,22",
        "highlight_gt": "19,20,21,22"
    },
    {
        "Task ID": 127,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if interval1[0] > interval2[1]: return \"NO\" if interval1[1] < interval2[0]: return \"NO\" if interval1[0] == interval2[0] and interval1[1] == interval2[1]: return \"YES\" return \"NO\"",
        "Correct Code": "def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) if interval1[0] > interval2[0]: interval1, interval2 = interval2, interval1 l, r = interval2[0], min(interval1[1], interval2[1]) return \"YES\" if is_prime(r - l) else \"NO\"",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def intersection(interval1, interval2): if interval1[0] > interval2[1]: return \"NO\" if interval1[1] < interval2[0]: return \"NO\" if interval1[0] == interval2[0] and interval1[1] == interval2[1]: return \"YES\" return \"NO\"",
        "Ground Truth": "def intersection(interval1, interval2): def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) if interval1[0] > interval2[0]: interval1, interval2 = interval2, interval1 l, r = interval2[0], min(interval1[1], interval2[1]) return \"YES\" if is_prime(r - l) else \"NO\"",
        "highlight_llm": "21,22,23,24,25,26,27",
        "highlight_gt": "21,22,23,24,25"
    },
    {
        "Task ID": 128,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "lambda x: x * (1 if x > 0 else -1) ",
        "Correct Code": "s, sgn = 0, 1 for x in arr: s += abs(x) sgn *= (x // abs(x))",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def prod_signs(arr): if not arr: return None return sum(map(lambda x: x * (1 if x > 0 else -1), arr))",
        "Ground Truth": "def prod_signs(arr): if arr == []: return None if 0 in arr: return 0 s, sgn = 0, 1 for x in arr: s += abs(x) sgn *= (x // abs(x)) return s * sgn",
        "highlight_llm": "15",
        "highlight_gt": "15,16,17,18"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "if 0 in arr: return 0",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "14"
    },
    {
        "Task ID": 129,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if not grid or not grid[0]: return [] m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] for i in range(m): dp[i][0] = grid[i][0] for j in range(n): dp[0][j] = grid[0][j] for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[m - 1][n - 1]",
        "Correct Code": "N = len(grid) x, y = 0, 0 for i in range(N): for j in range(N): if grid[i][j] == 1: x, y = i, j mn = N * N if x > 0: mn = min(mn, grid[x - 1][y]) if x < N - 1: mn = min(mn, grid[x + 1][y]) if y > 0: mn = min(mn, grid[x][y - 1]) if y < N - 1: mn = min(mn, grid[x][y + 1]) return [1 if i % 2 == 0 else mn for i in range(k)]",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def minPath(grid, k): if not grid or not grid[0]: return [] m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] for i in range(m): dp[i][0] = grid[i][0] for j in range(n): dp[0][j] = grid[0][j] for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[m - 1][n - 1]",
        "Ground Truth": "def minPath(grid, k): N = len(grid) x, y = 0, 0 for i in range(N): for j in range(N): if grid[i][j] == 1: x, y = i, j mn = N * N if x > 0: mn = min(mn, grid[x - 1][y]) if x < N - 1: mn = min(mn, grid[x + 1][y]) if y > 0: mn = min(mn, grid[x][y - 1]) if y < N - 1: mn = min(mn, grid[x][y + 1]) return [1 if i % 2 == 0 else mn for i in range(k)]",
        "highlight_llm": "31,32,33,34,35,36,37,38,39,40,41,42",
        "highlight_gt": "31,32,33,34,35,36,37,38,39,40,41,42"
    },
    {
        "Task ID": 130,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return [1, 1] ",
        "Correct Code": "return [1, 3] ",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "def tri(n): if n == 0: return [1] elif n == 1: return [1, 1] else: return [1, 1, tri(n - 1) + tri(n - 2) + tri(n + 1)]",
        "Ground Truth": "def tri(n): if n == 0: return [1] if n == 1: return [1, 3] ans = [1, 3] for i in range(2, n + 1): if i % 2 == 0: ans.append(1 + i / 2) else: ans.append(ans[-1] + ans[-2] + 1 + (i + 1) / 2) return ans",
        "highlight_llm": "21",
        "highlight_gt": "19"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "return [1, 1, tri(n - 1) + tri(n - 2) + tri(n + 1)] ",
        "Correct Code": "ans = [1, 3] for i in range(2, n + 1): if i % 2 == 0: ans.append(1 + i / 2) else: ans.append(ans[-1] + ans[-2] + 1 + (i + 1) / 2) return ans",
        "Semantic Level": "Infinite Loop",
        "Semantic Error ID": "Ag1",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "23",
        "highlight_gt": "20,21,22,23,24,25,26"
    },
    {
        "Task ID": 131,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return n * digits(n // 10)",
        "Correct Code": "has_odd, prod = False, 1 for ch in str(n): if int(ch) % 2 == 1: has_odd = True prod *= int(ch)",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "def digits(n): if n == 0: return 0 else: return n * digits(n // 10)",
        "Ground Truth": "def digits(n): has_odd, prod = False, 1 for ch in str(n): if int(ch) % 2 == 1: has_odd = True prod *= int(ch) return 0 if not has_odd else prod",
        "highlight_llm": "12",
        "highlight_gt": "9,10,11,12,13"
    },
    {
        "Task ID": 132,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return False ",
        "Correct Code": "continue",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def is_nested(string): def is_nested_(string): stack = [] for char in string: if char == '[': stack.append(char) elif char == ']': if not stack: return False if stack[-1] == '[': stack.pop() else: return False return not stack return is_nested_(string)",
        "Ground Truth": "def is_nested(string): for i in range(len(string)): if string[i] == \"]\": continue cnt, max_nest = 0, 0 for j in range(i, len(string)): if string[j] == \"[\": cnt += 1 else: cnt -= 1 max_nest = max(max_nest, cnt) if cnt == 0: if max_nest >= 2: return True break return False",
        "highlight_llm": "21",
        "highlight_gt": "16"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "else: return False ",
        "Correct Code": "else: cnt -= 1 max_nest = max(max_nest, cnt) if cnt == 0: if max_nest >= 2: return True break",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "24,25",
        "highlight_gt": "21,22,23,24,25,26,27"
    },
    {
        "Task ID": 133,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "x: x**2",
        "Correct Code": "x: math.ceil(x) ** 2",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def sum_squares(lst): return sum(map(lambda x: x**2, lst))",
        "Ground Truth": "def sum_squares(lst): import math return sum(map(lambda x: math.ceil(x) ** 2, lst))",
        "highlight_llm": "14",
        "highlight_gt": "15"
    },
    {
        "Task ID": 134,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if txt[-1].isalpha():",
        "Correct Code": "if len(txt) == 0: txt[-1].isalpha() and txt[-2] == \" \"",
        "Semantic Level": "Miss condition",
        "Semantic Error ID": "Aa1",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def check_if_last_char_is_a_letter(txt): if txt[-1].isalpha(): return True else: return False",
        "Ground Truth": "def check_if_last_char_is_a_letter(txt): if len(txt) == 0: return False if len(txt) == 1: return txt.isalpha() return txt[-1].isalpha() and txt[-2] == \" \"",
        "highlight_llm": "14",
        "highlight_gt": "15,17"
    },
    {
        "Task ID": 135,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "for i in range(len(arr) - 1, 0, -1): if not (arr[i] >= arr[i - 1]): return i return -1",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def can_arrange(arr): pass",
        "Ground Truth": "def can_arrange(arr): for i in range(len(arr) - 1, 0, -1): if not (arr[i] >= arr[i - 1]): return i return -1",
        "highlight_llm": "11",
        "highlight_gt": "11,12,13,14"
    },
    {
        "Task ID": 136,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return (lst[0], lst[0]) a = max(lst) b = min(lst) ",
        "Correct Code": "neg = list(filter(lambda x: x < 0, lst)) pos = list(filter(lambda x: x > 0, lst)) return None if neg == [] else max(neg), None if pos == [] else min(pos)",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block,",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def largest_smallest_integers(lst): if len(lst) == 0: return (None, None) elif len(lst) == 1: return (lst[0], lst[0]) else: a = max(lst) b = min(lst) return (a, b)",
        "Ground Truth": "def largest_smallest_integers(lst): neg = list(filter(lambda x: x < 0, lst)) pos = list(filter(lambda x: x > 0, lst)) return None if neg == [] else max(neg), None if pos == [] else min(pos)",
        "highlight_llm": "16,18,19",
        "highlight_gt": "13,14,15"
    },
    {
        "Task ID": 137,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if type(a) == type(b): if type(a) == int: return a if a > b else b elif type(a) == float: return a if a > b else b elif type(a) == str: return a if a > b else b return None",
        "Correct Code": "num_a = float(str(a).replace(\",\", \".\")) num_b = float(str(b).replace(\",\", \".\")) if num_a == num_b: return None return a if num_a > num_b else b",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def compare_one(a, b): if type(a) == type(b): if type(a) == int: return a if a > b else b elif type(a) == float: return a if a > b else b elif type(a) == str: return a if a > b else b return None",
        "Ground Truth": "def compare_one(a, b): num_a = float(str(a).replace(\",\", \".\")) num_b = float(str(b).replace(\",\", \".\")) if num_a == num_b: return None return a if num_a > num_b else b",
        "highlight_llm": "13,14,15,16,17,18,19,20",
        "highlight_gt": "18,19,20,21,22"
    },
    {
        "Task ID": 138,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return sum(range(1, n + 1)) == n * (n + 1) / 2",
        "Correct Code": "return n >= 8 and n % 2 == 0",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def is_equal_to_sum_even(n): return sum(range(1, n + 1)) == n * (n + 1) / 2",
        "Ground Truth": "def is_equal_to_sum_even(n): return n >= 8 and n % 2 == 0",
        "highlight_llm": "8",
        "highlight_gt": "8"
    },
    {
        "Task ID": 139,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "n * special_factorial(n-1)",
        "Correct Code": "fac, ans = 1, 1 for i in range(2, n + 1): fac *= i ans *= fac return ans",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "def special_factorial(n): if n == 0: return 1 else: return n * special_factorial(n-1)",
        "Ground Truth": "def special_factorial(n): fac, ans = 1, 1 for i in range(2, n + 1): fac *= i ans *= fac return ans",
        "highlight_llm": "16",
        "highlight_gt": "13,14,15,16,17"
    },
    {
        "Task ID": 140,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "re",
        "Correct Code": "",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Import error",
        "Syntactic Error ID": "Bf1",
        "Generated Code": "def fix_spaces(text): return re.sub(r'\\s+', '_', text)",
        "Ground Truth": "def fix_spaces(text): ans = text for i in range(len(text)-1, 2, -1): ans = ans.replace(\" \" * i, \"-\") return ans.replace(\" \", \"_\")",
        "highlight_llm": "12",
        "highlight_gt": ""
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "r'\\s+', '_', text ",
        "Correct Code": "for i in range(len(text)-1, 2, -1): ans = ans.replace(\" \" * i, \"-\") return ans.replace(\" \", \"_\") ",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "12",
        "highlight_gt": "13,14,15"
    },
    {
        "Task ID": 141,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if len(file_name) > 3: return \"No\" if file_name.count(\".\")!= 1: return \"No\" if file_name[0] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[-1] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[0] == file_name[-1]: return \"No\" if file_name[0] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[-1] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[0] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[-1] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[0] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[-1] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[0] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[-1] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[0] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[-1] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[0] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[-1] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[0] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[-1] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[0] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[-1] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[0] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[-1] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[0] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[-1] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[0] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[-1] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[0] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[-1]",
        "Correct Code": "if len(list(filter(lambda ch: ch.isdigit(), file_name))) > 3: return \"No\" f_list = file_name.split(\".\") if len(f_list) != 2: return \"No\" if len(f_list[0]) == 0: return \"No\" if not f_list[0][0].isalpha(): return \"No\" if f_list[1] not in [\"txt\", \"exe\", \"dll\"]: return \"No\" return \"Yes\"",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def file_name_check(file_name): if len(file_name) > 3: return \"No\" if file_name.count(\".\")!= 1: return \"No\" if file_name[0] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[-1] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[0] == file_name[-1]: return \"No\" if file_name[0] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[-1] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[0] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[-1] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[0] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[-1] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[0] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[-1] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[0] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[-1] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[0] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[-1] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[0] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[-1] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[0] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[-1] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[0] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[-1] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[0] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[-1] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[0] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[-1] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[0] not in \"abcdefghijklmnopqrstuvwxyz\": return \"No\" if file_name[-1]",
        "Ground Truth": "def file_name_check(file_name): if len(list(filter(lambda ch: ch.isdigit(), file_name))) > 3: return \"No\" f_list = file_name.split(\".\") if len(f_list) != 2: return \"No\" if len(f_list[0]) == 0: return \"No\" if not f_list[0][0].isalpha(): return \"No\" if f_list[1] not in [\"txt\", \"exe\", \"dll\"]: return \"No\" return \"Yes\"",
        "highlight_llm": "15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71",
        "highlight_gt": "15,16,17,18,19,20,21,22"
    },
    {
        "Task ID": 142,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "for i in lst: ",
        "Correct Code": "for i, num in enumerate(lst):",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "def sum_squares(lst): sum = 0 for i in lst: if i % 3 == 0: sum += i ** 2 elif i % 4 == 0: sum += i ** 3 return sum",
        "Ground Truth": "def sum_squares(lst): ans = 0 for i, num in enumerate(lst): if i % 3 == 0: ans += num ** 2 elif i % 4 == 0: ans += num ** 3 else: ans += num return ans",
        "highlight_llm": "13",
        "highlight_gt": "13"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "else: ans += num",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "18,19"
    },
    {
        "Task ID": 143,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "(sorted(words))",
        "Correct Code": "list(filter(lambda word: is_prime(len(word)), sentence.split(\" \")))",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def words_in_sentence(sentence): words = sentence.split() return \" \".join(sorted(words))",
        "Ground Truth": "def words_in_sentence(sentence): def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) return \" \".join(list(filter(lambda word: is_prime(len(word)), sentence.split(\" \"))))",
        "highlight_llm": "22",
        "highlight_gt": "23"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "21,22"
    },
    {
        "Task ID": 144,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "x1, x2 = map(int, x.split(\"/\")) n1, n2 = map(int, n.split(\"/\")) return (x1 * n1) % (x2 * n2) == 0",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def simplify(x, n): pass",
        "Ground Truth": "def simplify(x, n): x1, x2 = map(int, x.split(\"/\")) n1, n2 = map(int, n.split(\"/\")) return (x1 * n1) % (x2 * n2) == 0",
        "highlight_llm": "13",
        "highlight_gt": "18,19,20"
    },
    {
        "Task ID": 145,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "int, str(x) ",
        "Correct Code": "weight",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def order_by_points(nums): return sorted(nums, key=lambda x: sum(map(int, str(x))))",
        "Ground Truth": "def order_by_points(nums): def weight(x): x_list = list(str(x)) if x_list[0] == \"-\": x_list = x_list[1:] x_list = list(map(int, x_list)) x_list[0] = -x_list[0] else: x_list = list(map(int, x_list)) return sum(x_list) return sorted(nums, key=weight)",
        "highlight_llm": "12",
        "highlight_gt": "21"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "x_list = list(str(x)) if x_list[0] == \"-\": x_list = x_list[1:] x_list = list(map(int, x_list)) x_list[0] = -x_list[0]    else : x_list = list ( map ( int , x_list)) return sum (x_list)",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "13,14,15,16,17,18,19,20"
    },
    {
        "Task ID": 146,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "and (n % 10) % 2 == 1)",
        "Correct Code": "and str(num)[0] in odd and str(num)[-1] in odd:",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def specialFilter(nums): return sum(1 for n in nums if n > 10 and (n % 10) % 2 == 1)",
        "Ground Truth": "def specialFilter(nums): ans, odd = 0, [\"1\", \"3\", \"5\", \"7\", \"9\"] for num in nums: if num > 10 and str(num)[0] in odd and str(num)[-1] in odd: ans += 1 return ans",
        "highlight_llm": "9",
        "highlight_gt": "11"
    },
    {
        "Task ID": 147,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return sum(a[i] * a[i] - a[i] + 1 for i in range(n))",
        "Correct Code": "if n <= 2: return False one_cnt = 1 + (n - 2) // 3 * 2 + (n - 2) % 3 zero_cnt = n - one_cnt return one_cnt * (one_cnt - 1) * (one_cnt - 2) // 6 + zero_cnt * (zero_cnt - 1) * (zero_cnt - 2) // 6",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def get_max_triples(n): return sum(a[i] * a[i] - a[i] + 1 for i in range(n))",
        "Ground Truth": "def get_max_triples(n): if n <= 2: return False one_cnt = 1 + (n - 2) // 3 * 2 + (n - 2) % 3 zero_cnt = n - one_cnt return one_cnt * (one_cnt - 1) * (one_cnt - 2) // 6 + zero_cnt * (zero_cnt - 1) * (zero_cnt - 2) // 6",
        "highlight_llm": "15",
        "highlight_gt": "15,16,17,18"
    },
    {
        "Task ID": 148,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"] if planet1 not in planets or planet2 not in planets: return tuple() i1, i2 = planets.index(planet1), planets.index(planet2) if i1 > i2: i1, i2 = i2, i1 return tuple(planets[i1 + 1 : i2])",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def bf(planet1, planet2): pass",
        "Ground Truth": "def bf(planet1, planet2): planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"] if planet1 not in planets or planet2 not in planets: return tuple() i1, i2 = planets.index(planet1), planets.index(planet2) if i1 > i2: i1, i2 = i2, i1 return tuple(planets[i1 + 1 : i2])",
        "highlight_llm": "17",
        "highlight_gt": "17,18,19,20,21"
    },
    {
        "Task ID": 149,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "lst, key=len ",
        "Correct Code": "list(filter(lambda s: len(s) % 2 == 0, lst)), key=cmp_to_key(cmp)",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def sorted_list_sum(lst): return sorted(lst, key=len)",
        "Ground Truth": "def sorted_list_sum(lst): from functools import cmp_to_key def cmp(s: str, t: str): if len(s) != len(t): return len(s) - len(t) return -1 if s < t else 1 return sorted(list(filter(lambda s: len(s) % 2 == 0, lst)), key=cmp_to_key(cmp))",
        "highlight_llm": "16",
        "highlight_gt": "19"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "from functools import cmp_to_key def cmp(s: str, t: str): if len(s) != len(t): return len(s) - len(t) return -1 if s < t else 1",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "14,15,16,17,18"
    },
    {
        "Task ID": 150,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if n % 2 == 0",
        "Correct Code": "def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def x_or_y(n, x, y): if n % 2 == 0: return x else: return y",
        "Ground Truth": "def x_or_y(n, x, y): def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) return x if is_prime(n) else y",
        "highlight_llm": "10",
        "highlight_gt": "10,11"
    },
    {
        "Task ID": 151,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "x: x**2",
        "Correct Code": "if num % 2 == 1 and num > 0 and \".\" not in str(num): ans += num ** 2",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def double_the_difference(lst): if not lst: return 0 return sum(map(lambda x: x**2, lst))",
        "Ground Truth": "def double_the_difference(lst): ans = 0 for num in lst: if num % 2 == 1 and num > 0 and \".\" not in str(num): ans += num ** 2 return ans",
        "highlight_llm": "15",
        "highlight_gt": "15,16"
    },
    {
        "Task ID": 153,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "max(extensions, key=len)",
        "Correct Code": "def strength(s: str) -> int: CAP, SM = 0, 0 for ch in s: if ch.isupper(): CAP += 1 if ch.islower(): SM += 1 return CAP - SM max_strength = max(map(strength, extensions))",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def Strongest_Extension(class_name, extensions): return class_name + '.' + max(extensions, key=len)",
        "Ground Truth": "def Strongest_Extension(class_name, extensions): def strength(s: str) -> int: CAP, SM = 0, 0 for ch in s: if ch.isupper(): CAP += 1 if ch.islower(): SM += 1 return CAP - SM max_strength = max(map(strength, extensions)) for e in extensions: if strength(e) == max_strength: return class_name + \".\" + e",
        "highlight_llm": "18",
        "highlight_gt": "18,19,20,21,22,23,24"
    },
    {
        "Task ID": 154,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if len(a) < len(b): return False if len(a) == len(b): return a in b else: return any(a[i:] in b for i in range(len(a)-len(b)+1))",
        "Correct Code": "if a == b: return True if b == \"\": return True for i in range(0, len(b)): if b[i:] + b[:i] in a: return True return False",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def cycpattern_check(a , b): if len(a) < len(b): return False if len(a) == len(b): return a in b else: return any(a[i:] in b for i in range(len(a)-len(b)+1))",
        "Ground Truth": "def cycpattern_check(a , b): if a == b: return True if b == \"\": return True for i in range(0, len(b)): if b[i:] + b[:i] in a: return True return False",
        "highlight_llm": "11,12,13,14,15,16",
        "highlight_gt": "11,12,13,14,15,16,17,18"
    },
    {
        "Task ID": 155,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if a == b: return True if b == \"\": return True for i in range(0, len(b)): if b[i:] + b[:i] in a: return True return False",
        "Correct Code": "even, odd = 0, 0 for ch in str(num): if ch in \"02468\": even += 1 if ch in \"13579\": odd += 1 return even, odd",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def even_odd_count(num): return (sum(int(i) for i in str(num)), sum(int(i) for i in str(num) if i % 2 == 0))",
        "Ground Truth": "def even_odd_count(num): even, odd = 0, 0 for ch in str(num): if ch in \"02468\": even += 1 if ch in \"13579\": odd += 1 return even, odd",
        "highlight_llm": "8",
        "highlight_gt": "8,9,10,11,12"
    },
    {
        "Task ID": 156,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "roman_numerals = { 1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L', 90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M' }",
        "Correct Code": "m = [\"\", \"m\"] c = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"] x = [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"] i = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"]",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect constant",
        "Syntactic Error ID": "Be4",
        "Generated Code": "def int_to_mini_roman(number): roman_numerals = { 1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L', 90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M' } roman_numeral = '' while number > 0: for key, value in roman_numerals.items(): if number >= key: roman_numeral += value number -= key break return roman_numeral.lower()",
        "Ground Truth": "def int_to_mini_roman(number): m = [\"\", \"m\"] c = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"] x = [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"] i = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"] thousands = m[number // 1000] hundreds = c[(number % 1000) // 100] tens = x[(number % 100) // 10] ones = i[number % 10] return thousands + hundreds + tens + ones",
        "highlight_llm": "12,13,14,15,16,17,18,19,20,21,22,23,24,25,26",
        "highlight_gt": "12,13,14,15"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "for key, value in roman_numerals.items(): if number >= key: roman_numeral += value number -= key break return roman_numeral.lower() ",
        "Correct Code": "thousands = m[number // 1000] hundreds = c[(number % 1000) // 100] tens = x[(number % 100) // 10] ones = i[number % 10] return thousands + hundreds + tens + ones ",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "29,30,31,32,33,34",
        "highlight_gt": "16,17,18,19,20"
    },
    {
        "Task ID": 157,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return (a + b > c) and (b + c > a) and (c + a > b)",
        "Correct Code": "return a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def right_angle_triangle(a, b, c): return (a + b > c) and (b + c > a) and (c + a > b)",
        "Ground Truth": "def right_angle_triangle(a, b, c): return a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2",
        "highlight_llm": "11",
        "highlight_gt": "12"
    },
    {
        "Task ID": 158,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return max(set(words), key=words.count)",
        "Correct Code": "mx_ch_cnt, ans = 0, \"\" for word in words: ch_cnt = len(set(word)) if ch_cnt > mx_ch_cnt or (ch_cnt == mx_ch_cnt and word < ans): mx_ch_cnt, ans = ch_cnt, word return ans",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def find_max(words): return max(set(words), key=words.count)",
        "Ground Truth": "def find_max(words): mx_ch_cnt, ans = 0, \"\" for word in words: ch_cnt = len(set(word)) if ch_cnt > mx_ch_cnt or (ch_cnt == mx_ch_cnt and word < ans): mx_ch_cnt, ans = ch_cnt, word return ans",
        "highlight_llm": "11",
        "highlight_gt": "11,12,13,14,15,16"
    },
    {
        "Task ID": 159,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if number < need: return [0, number] else: return [need - number, remaining]",
        "Correct Code": "if need <= remaining: return [number + need, remaining - need] else: return [number + remaining, 0]",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def eat(number, need, remaining): if number < need: return [0, number] else: return [need - number, remaining]",
        "Ground Truth": "def eat(number, need, remaining): if need <= remaining: return [number + need, remaining - need] else: return [number + remaining, 0]",
        "highlight_llm": "30,31,32,33",
        "highlight_gt": "30,31,32,33"
    },
    {
        "Task ID": 160,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if len(operator) == 0: return operand[0] elif len(operator) == 1: return operator[0] * operand[0] else: return operator[0] * do_algebra(operator[1:], operand[1:])",
        "Correct Code": "exp = \"\" for i in range(len(operator)): exp += str(operand[i]) + operator[i] exp += str(operand[-1]) return eval(exp)",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def do_algebra(operator, operand): if len(operator) == 0: return operand[0] elif len(operator) == 1: return operator[0] * operand[0] else: return operator[0] * do_algebra(operator[1:], operand[1:])",
        "Ground Truth": "def do_algebra(operator, operand): exp = \"\" for i in range(len(operator)): exp += str(operand[i]) + operator[i] exp += str(operand[-1]) return eval(exp)",
        "highlight_llm": "26,27,28,29,30,31",
        "highlight_gt": "26,27,28,29,30"
    },
    {
        "Task ID": 161,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if x.isalpha() ",
        "Correct Code": "ch.swapcase()",
        "Semantic Level": "Miss condition",
        "Semantic Error ID": "Aa1",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def solve(s): return \"\".join(map(lambda x: x.lower() if x.isalpha() else x.upper(), s))",
        "Ground Truth": "def solve(s): ans, has_letter = \"\", False for ch in s: if ch.isalpha(): has_letter = True ans += ch.swapcase() else: ans += ch return ans if has_letter else s[::-1]",
        "highlight_llm": "12",
        "highlight_gt": "16"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "ans if has_letter else s[::-1]",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "19"
    },
    {
        "Task ID": 162,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "import hashlib",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "Import error",
        "Syntactic Error ID": "Bf1",
        "Generated Code": "def string_to_md5(text): if text == '': return None return hashlib.md5(text.encode('utf-8')).hexdigest()",
        "Ground Truth": "def string_to_md5(text): if text == \"\": return None import hashlib m = hashlib.md5() m.update(text.encode(\"utf-8\")) return m.hexdigest()",
        "highlight_llm": "",
        "highlight_gt": "9"
    },
    {
        "Task ID": 163,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "in range(a, b + 1) ",
        "Correct Code": "in range(a, min(b + 1, 10))",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "def generate_integers(a, b): return [i for i in range(a, b + 1) if i % 2 == 0]",
        "Ground Truth": "def generate_integers(a, b): if a > b: a, b = b, a return [i for i in range(a, min(b + 1, 10)) if i % 2 == 0]",
        "highlight_llm": "11",
        "highlight_gt": "12"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "if a > b: a, b = b, a",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "11"
    }
]