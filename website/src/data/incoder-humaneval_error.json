[
    {
        "Task ID": 0,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "close = abs(numbers[0] - numbers[1]) < threshold\n    close = close or abs(numbers[2] - numbers[3]) < threshold\n    return close",
        "Correct Code": "sorted_numbers = sorted(numbers)\n    for i in range(len(sorted_numbers) - 1):\n        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold:\n            return True\n    return False",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "from typing import List def has_close_elements(numbers: List[float], threshold: float) -> bool: close = abs(numbers[0] - numbers[1]) < threshold close = close or abs(numbers[2] - numbers[3]) < threshold return close",
        "Ground Truth": "from typing import List def has_close_elements(numbers: List[float], threshold: float) -> bool: sorted_numbers = sorted(numbers) for i in range(len(sorted_numbers) - 1): if sorted_numbers[i + 1] - sorted_numbers[i] < threshold: return True return False",
        "highlight_llm": "12,13,14",
        "highlight_gt": "12,13,14,15,16"
    },
    {
        "Task ID": 1,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "while paren_stack:\n        paren_string = paren_stack.pop()\n        if paren_string == '(':\n            paren_groups.append(paren_string)\n        elif paren_string == ')':\n            paren_stack.append(paren_string)\n        elif paren_string == ')(':\n            paren_stack.append(paren_string)\n            paren_groups.append(paren_string)",
        "Correct Code": "for ch in paren_string:\n        if ch == \"(\": cnt += 1\n        if ch == \")\": cnt -= 1\n        if ch != \" \": group += ch\n        if cnt == 0:\n            if group != \"\": results.append(group)\n            group = \"",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "from typing import List def separate_paren_groups(paren_string: str) -> List[str]: paren_groups = [] paren_stack = [] paren_stack.append(paren_string) while paren_stack: paren_string = paren_stack.pop() if paren_string == '(': paren_groups.append(paren_string) elif paren_string == ')': paren_stack.append(paren_string) elif paren_string == ')(': paren_stack.append(paren_string) paren_groups.append(paren_string) return paren_groups",
        "Ground Truth": "from typing import List def separate_paren_groups(paren_string: str) -> List[str]: cnt, group, results = 0, \"\", [] for ch in paren_string: if ch == \"(\": cnt += 1 if ch == \")\": cnt -= 1 if ch != \" \": group += ch if cnt == 0: if group != \"\": results.append(group) group = \"\" return results",
        "highlight_llm": "15,16,17,18,19,20,21,22,23",
        "highlight_gt": "18,19,20,21,22,23,24"
    },
    {
        "Task ID": 2,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "precision",
        "Correct Code": "",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def truncate_number(number: float) -> float: return int(number * 10 ** -precision)",
        "Ground Truth": "def truncate_number(number: float) -> float: return number - int(number)",
        "highlight_llm": "10",
        "highlight_gt": ""
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "int(number * 10 ** -precision)",
        "Correct Code": "number - int(number)",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "10",
        "highlight_gt": "10"
    },
    {
        "Task ID": 3,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "elif operations_len == 1: return operations[0] == 0 elif operations_len == 2: return operations[0] == 0 and operations[1] == 0 elif operations_len == 3: return operations[0] == 0 and operations[1] == 0 and operations[2] == 0 elif operations_len == 4: return operations[0] == 0 and operations[1] == 0 and operations[2] == 0 and operations[3] == 0 elif operations_len == 5: return operations[0] == 0 and operations[1] == 0 and operations[2] == 0 and operations[3] == 0 and operations[4] == 0 else: return False",
        "Correct Code": "account = 0\n    for operation in operations:\n        account += operation\n        if account < 0:\n            return True\n    return False",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "from typing import List def below_zero(operations: List[int]) -> bool: operations_len = len(operations) if operations_len == 0: return False elif operations_len == 1: return operations[0] == 0 elif operations_len == 2: return operations[0] == 0 and operations[1] == 0 elif operations_len == 3: return operations[0] == 0 and operations[1] == 0 and operations[2] == 0 elif operations_len == 4: return operations[0] == 0 and operations[1] == 0 and operations[2] == 0 and operations[3] == 0 elif operations_len == 5: return operations[0] == 0 and operations[1] == 0 and operations[2] == 0 and operations[3] == 0 and operations[4] == 0 else: return False",
        "Ground Truth": "from typing import List def below_zero(operations: List[int]) -> bool: account = 0 for operation in operations: account += operation if account < 0: return True return False",
        "highlight_llm": "16,17,18,19,20,21,22,23,24,25,26,27",
        "highlight_gt": "13,14,15,16,17,18"
    },
    {
        "Task ID": 4,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "x.mean()",
        "Correct Code": "mean",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "from typing import List def mean_absolute_deviation(numbers: List[float]) -> float: return sum(abs(x - x.mean()) for x in numbers) / len(numbers)",
        "Ground Truth": "from typing import List def mean_absolute_deviation(numbers: List[float]) -> float: mean = sum(numbers) / len(numbers) return sum(abs(x - mean) for x in numbers) / len(numbers)",
        "highlight_llm": "13",
        "highlight_gt": "14"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "mean = sum(numbers) / len(numbers)",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "13"
    },
    {
        "Task ID": 5,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "numbers = numbers[::2] + numbers[1::2]\n    return numbers + [delimeter] * (len(numbers) - 1)",
        "Correct Code": "res = []\n    for i in range(len(numbers)):\n        res.append(numbers[i])\n        if i != len(numbers) - 1:\n            res.append(delimeter)\n    return res",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "from typing import List def intersperse(numbers: List[int], delimeter: int) -> List[int]: numbers = numbers[::2] + numbers[1::2] return numbers + [delimeter] * (len(numbers) - 1)",
        "Ground Truth": "from typing import List def intersperse(numbers: List[int], delimeter: int) -> List[int]: res = [] for i in range(len(numbers)): res.append(numbers[i]) if i != len(numbers) - 1: res.append(delimeter) return res",
        "highlight_llm": "11,12",
        "highlight_gt": "11,12,13,14,15,16"
    },
    {
        "Task ID": 6,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "paren_groups = []\n    for paren in paren_string.split():\n        paren_groups.append(paren.count('('))\n        paren_groups.append(paren.count(')'))\n    return paren_groups",
        "Correct Code": "def count_depth(s: str) -> int:\n        max_depth, cnt = 0, 0\n        for ch in s:\n            if ch == \"(\": cnt += 1\n            if ch == \")\": cnt -= 1\n            max_depth = max(max_depth, cnt)\n        return max_depth\n    \n    return [count_depth(s) for s in paren_string.split(\" \") if s != \"\"]",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "from typing import List def intersperse(numbers: List[int], delimeter: int) -> List[int]: res = [] for i in range(len(numbers)): res.append(numbers[i]) if i != len(numbers) - 1: res.append(delimeter) return res",
        "Ground Truth": "from typing import List def parse_nested_parens(paren_string: str) -> List[int]: def count_depth(s: str) -> int: max_depth, cnt = 0, 0 for ch in s: if ch == \"(\": cnt += 1 if ch == \")\": cnt -= 1 max_depth = max(max_depth, cnt) return max_depth return [count_depth(s) for s in paren_string.split(\" \") if s != \"\"]",
        "highlight_llm": "12,13,14,15,16",
        "highlight_gt": "17,18,19,20,21,22,23,25"
    },
    {
        "Task ID": 7,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if s.startswith(substring)",
        "Correct Code": "substring in s",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "from typing import List def filter_by_substring(strings: List[str], substring: str) -> List[str]: return [s for s in strings if s.startswith(substring)]",
        "Ground Truth": "from typing import List def filter_by_substring(strings: List[str], substring: str) -> List[str]: return list(filter(lambda s: substring in s, strings))",
        "highlight_llm": "11",
        "highlight_gt": "11"
    },
    {
        "Task ID": 9,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "max(numbers[:(i+1)])",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "from typing import List, Tuple def rolling_max(numbers: List[int]) -> List[int]: rolling_max_list = [] rolling_max_index = 0 rolling_max_value = 0 for number in numbers: if number > rolling_max_value: rolling_max_value = number rolling_max_index = rolling_max_index + 1 if rolling_max_index == len(numbers): rolling_max_list.append(rolling_max_value) rolling_max_value = 0 rolling_max_index = 0 return rolling_max_list",
        "Ground Truth": "from typing import List, Tuple def rolling_max(numbers: List[int]) -> List[int]: return [max(numbers[:(i+1)]) for i in range(len(numbers))]",
        "highlight_llm": "",
        "highlight_gt": "10"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "if rolling_max_index == len(numbers):",
        "Correct Code": "",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "17",
        "highlight_gt": ""
    },
    {
        "Task ID": 10,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "find_longest_palindrome(postfix, prefix) reverse_palindrome(prefix, longest_palindrome)",
        "Correct Code": "",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def is_palindrome(string: str) -> bool: \"\"\" Test if given string is a palindrome \"\"\" return string == string[::-1] def make_palindrome(string: str) -> str: string = str(string) length = len(string) prefix = string[:length//2] postfix = string[length//2:] # Find longesat postfix of supplied string that is a palindrome longest_palindrome = find_longest_palindrome(postfix, prefix) # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix suffix = postfix + reverse_palindrome(prefix, longest_palindrome) return suffix",
        "Ground Truth": "def is_palindrome(string: str) -> bool: \"\"\" Test if given string is a palindrome \"\"\" return string == string[::-1] def make_palindrome(string: str) -> str: if is_palindrome(string): return string for i in range(len(string)): if is_palindrome(string[i:]): return string + string[i-1::-1]",
        "highlight_llm": "24,27",
        "highlight_gt": ""
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "prefix = string[:length//2] postfix = string[length//2:] suffix = postfix + reverse_palindrome(prefix, longest_palindrome)",
        "Correct Code": "if is_palindrome(string[i:]): return string + string[i-1::-1]",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "incorrect variable name",
        "Syntactic Error ID": "Be5",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "20,21,27",
        "highlight_gt": "21,22"
    },
    {
        "Task ID": 11,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "bin(int",
        "Correct Code": "str",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "from typing import List def string_xor(a: str, b: str) -> str: return bin(int(''.join(map(str, a)), 2))",
        "Ground Truth": "from typing import List def string_xor(a: str, b: str) -> str: return \"\".join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))",
        "highlight_llm": "10",
        "highlight_gt": "10"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "join(map(str, a)), 2))",
        "Correct Code": "join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "10",
        "highlight_gt": "10"
    },
    {
        "Task ID": 12,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "sorted(strings, key=len)",
        "Correct Code": " maxlen = max(len(x) for x in strings) for s in strings: if len(s) == maxlen:",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "from typing import List, Optional def longest(strings: List[str]) -> Optional[str]: if len(strings) == 0: return None if len(strings) == 1: return strings[0] strings = sorted(strings, key=len) return strings[0]",
        "Ground Truth": "from typing import List, Optional def longest(strings: List[str]) -> Optional[str]: if not strings: return None maxlen = max(len(x) for x in strings) for s in strings: if len(s) == maxlen: return s",
        "highlight_llm": "18",
        "highlight_gt": "17,18,19"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "return strings[0]",
        "Correct Code": "return s",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "19",
        "highlight_gt": "20"
    },
    {
        "Task ID": 14,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "in string.split(' ')",
        "Correct Code": "in range(len(string))",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "from typing import List def all_prefixes(string: str) -> List[str]: prefixes: List[str] = [] for prefix in string.split(' '): prefixes.append(prefix) return prefixes",
        "Ground Truth": "from typing import List def all_prefixes(string: str) -> List[str]: return [string[:(i + 1)] for i in range(len(string))]",
        "highlight_llm": "10",
        "highlight_gt": "9"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "append(prefix)",
        "Correct Code": "string[:(i + 1)]",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "11",
        "highlight_gt": "9"
    },
    {
        "Task ID": 15,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "'.join",
        "Correct Code": " \".join",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect method call target",
        "Syntactic Error ID": "Bd3",
        "Generated Code": "def string_sequence(n: int) -> str: return''.join(str(n) for n in range(n))",
        "Ground Truth": "def string_sequence(n: int) -> str: return \" \".join(map(str, range(n + 1)))",
        "highlight_llm": "8",
        "highlight_gt": "8"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "in range(n)",
        "Correct Code": "range(n + 1)",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "8",
        "highlight_gt": "8"
    },
    {
        "Task ID": 16,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "set(string)",
        "Correct Code": "set(string.lower())",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def count_distinct_characters(string: str) -> int: return len(set(string))",
        "Ground Truth": "def count_distinct_characters(string: str) -> int: return len(set(string.lower()))",
        "highlight_llm": "8",
        "highlight_gt": "8"
    },
    {
        "Task ID": 17,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "notes: List[int] = []\n    notes_string: str = music_string\n    notes_string: str = notes_string.replace('o', '|').replace('.', '|')\n    notes_string: str = notes_string.replace('o|', '|').replace('.|', '|')\n    notes_string: str = notes_string.replace('o|', '|').replace('.|', '|')\n    notes_string: str = notes_string.replace('o|', '|').replace('.|', '|')\n    notes_string: str = notes_string.replace('o|', '|').replace('.|', '|')\n    notes_string: str = notes_string.replace('o|', '|').replace('.|', '|')\n    notes_string: str = notes_string.replace('o|', '|').replace('.|', '|')\n    notes_string: str = notes_string.replace('o|', '|').replace('.|', '|')\n    notes_string: str = notes_string.replace('o|', '|').replace('.|', '|')\n    notes_string: str = notes_string.replace('o|', '|').replace('.|', '|')\n    notes_string: str = notes_string.replace('o|', '|').replace('.|', '|')\n    notes_string: str = notes_string.replace('o|', '|').replace('.|', '|')\n    notes_string: str = notes_string.replace('o|', '|').replace('.|', '|')\n    notes_string: str = notes_string.replace('o|', '|').replace('.|', '|')\n    notes_string: str = notes_string.replace('o|', '|').replace('.|', '|')\n    notes_string: str = notes_string.replace('o|', '|').replace('.|', '|')\n    notes_string: str = notes_string.replace('o|', '|').replace('.|', '|')\n    notes_string: str = notes_string.replace('o|', '|').replace('.|', '|')\n    notes_string: str = notes_string.replace('o|', '|').replace('.|', '|')\n    notes_string: str = notes_string.replace('o|', '|').replace('.|', '|')\n    notes_string: str = notes_string.replace('o|', '|').replace('.|', '|')\n    notes_string: str = notes_string.replace('o|', '|').replace('.|', '|')\n    notes_string: str = notes_string.replace('o|', '|').replace('.|', '|')\n    notes_string: str = notes_string.replace('o|', '|').replace('.|', '|')\n    notes_string: str = notes_string.replace('o|', '|').replace('.|', '|')",
        "Correct Code": "def count_beats(note: str) -> int:\n        if note == \"o\": return 4\n        elif note == \"o|\": return 2\n        elif note == \".|\": return 1\n    \n    if music_string == \"\": return []\n    return list(map(count_beats, music_string.split(\" \")))",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "from typing import List def parse_music(music_string: str) -> List[int]: notes: List[int] = [] notes_string: str = music_string notes_string: str = notes_string.replace('o', '|').replace('.', '|') notes_string: str = notes_string.replace('o|', '|').replace('.|', '|') notes_string: str = notes_string.replace('o|', '|').replace('.|', '|') notes_string: str = notes_string.replace('o|', '|').replace('.|', '|') notes_string: str = notes_string.replace('o|', '|').replace('.|', '|') notes_string: str = notes_string.replace('o|', '|').replace('.|', '|') notes_string: str = notes_string.replace('o|', '|').replace('.|', '|') notes_string: str = notes_string.replace('o|', '|').replace('.|', '|') notes_string: str = notes_string.replace('o|', '|').replace('.|', '|') notes_string: str = notes_string.replace('o|', '|').replace('.|', '|') notes_string: str = notes_string.replace('o|', '|').replace('.|', '|') notes_string: str = notes_string.replace('o|', '|').replace('.|', '|') notes_string: str = notes_string.replace('o|', '|').replace('.|', '|') notes_string: str = notes_string.replace('o|', '|').replace('.|', '|') notes_string: str = notes_string.replace('o|', '|').replace('.|', '|') notes_string: str = notes_string.replace('o|', '|').replace('.|', '|') notes_string: str = notes_string.replace('o|', '|').replace('.|', '|') notes_string: str = notes_string.replace('o|', '|').replace('.|', '|') notes_string: str = notes_string.replace('o|', '|').replace('.|', '|') notes_string: str = notes_string.replace('o|', '|').replace('.|', '|') notes_string: str = notes_string.replace('o|', '|').replace('.|', '|') notes_string: str = notes_string.replace('o|', '|').replace('.|', '|') notes_string: str = notes_string.replace('o|', '|').replace('.|', '|') notes_string: str = notes_string.replace('o|', '|').replace('.|', '|') notes_string: str = notes_string.replace('o|', '|').replace('.|', '|')",
        "Ground Truth": "from typing import List def parse_music(music_string: str) -> List[int]: def count_beats(note: str) -> int: if note == \"o\": return 4 elif note == \"o|\": return 2 elif note == \".|\": return 1 if music_string == \"\": return [] return list(map(count_beats, music_string.split(\" \")))",
        "highlight_llm": "17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43",
        "highlight_gt": "17,18,19,20,22,23"
    },
    {
        "Task ID": 18,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "i += len(substring)",
        "Correct Code": "",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect arithmetic",
        "Syntactic Error ID": "Be1",
        "Generated Code": "def how_many_times(string: str, substring: str) -> int: count = 0 i = 0 while i < len(string): if string[i:i+len(substring)] == substring: count += 1 i += len(substring) return count",
        "Ground Truth": "def how_many_times(string: str, substring: str) -> int: occurences = 0 for i in range(len(string)): if string[i:].startswith(substring): occurences += 1 return occurences",
        "highlight_llm": "15",
        "highlight_gt": ""
    },
    {
        "Task ID": 19,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "numbers = [int(n) for n in numbers]\n    numbers.sort()\n    return''.join(map(str, numbers))",
        "Correct Code": "to_int = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n\n    if numbers == \"\": return \"\"\n    return \" \".join(sorted(numbers.split(\" \"), key=lambda n: to_int[n]))",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "from typing import List def sort_numbers(numbers: str) -> str: numbers = numbers.split() numbers = [int(n) for n in numbers] numbers.sort() return''.join(map(str, numbers))",
        "Ground Truth": "from typing import List def sort_numbers(numbers: str) -> str: to_int = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9} if numbers == \"\": return \"\" return \" \".join(sorted(numbers.split(\" \"), key=lambda n: to_int[n]))",
        "highlight_llm": "12,13,14",
        "highlight_gt": "12,14,15"
    },
    {
        "Task ID": 20,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "closest_to_one = numbers[0]\n    closest_to_two = numbers[1]\n    for number in numbers:\n        if number < closest_to_one:\n            closest_to_one = number\n        if number > closest_to_two:\n            closest_to_two = number\n    return closest_to_one, closest_to_two",
        "Correct Code": "numbers.sort()\n    min_diff = float(\"inf\")\n    min_pair = None\n    for l, r in zip(numbers[:-1], numbers[1:]):\n        diff = r - l\n        if diff < min_diff:\n            min_diff = diff\n            min_pair = (l, r)\n    return min_pair",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "from typing import List, Tuple def find_closest_elements(numbers: List[float]) -> Tuple[float, float]: closest_to_one = numbers[0] closest_to_two = numbers[1] for number in numbers: if number < closest_to_one: closest_to_one = number if number > closest_to_two: closest_to_two = number return closest_to_one, closest_to_two",
        "Ground Truth": "from typing import List, Tuple def find_closest_elements(numbers: List[float]) -> Tuple[float, float]: numbers.sort() min_diff = float(\"inf\") min_pair = None for l, r in zip(numbers[:-1], numbers[1:]): diff = r - l if diff < min_diff: min_diff = diff min_pair = (l, r) return min_pair",
        "highlight_llm": "12,13,14,15,16,17,18,19",
        "highlight_gt": "12,13,14,15,16,17,18,19,20"
    },
    {
        "Task ID": 21,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "sorted(numbers)",
        "Correct Code": "",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "from typing import List def rescale_to_unit(numbers: List[float]) -> List[float]: numbers = sorted(numbers) minimum = min(numbers) maximum = max(numbers) scale = maximum - minimum return [number * scale for number in numbers]",
        "Ground Truth": "from typing import List def rescale_to_unit(numbers: List[float]) -> List[float]: ma, mi = max(numbers), min(numbers) k = 1 / (ma - mi) return list(map(lambda x: (x - mi) * k, numbers))",
        "highlight_llm": "10",
        "highlight_gt": ""
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "scale = maximum - minimum  number * scale",
        "Correct Code": "k = 1 / (ma - mi)   (x - mi) * k",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect arithmetic",
        "Syntactic Error ID": "Be1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "13,14",
        "highlight_gt": "11,12"
    },
    {
        "Task ID": 22,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "isinstance(v, int)",
        "Correct Code": "x: type(x) == int",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "from typing import List, Any def filter_integers(values: List[Any]) -> List[int]: return [int(v) for v in values if isinstance(v, int)]",
        "Ground Truth": "from typing import List, Any def filter_integers(values: List[Any]) -> List[int]: return list(filter(lambda x: type(x) == int, values))",
        "highlight_llm": "11",
        "highlight_gt": "11"
    },
    {
        "Task ID": 24,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "while n % divisor == 0:",
        "Correct Code": "for i in range(2, n):",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "While error",
        "Syntactic Error ID": "Bb2",
        "Generated Code": "def largest_divisor(n: int) -> int: divisor = 1 while n % divisor == 0: divisor += 1 return divisor",
        "Ground Truth": "def largest_divisor(n: int) -> int: for i in range(2, n): if n % i == 0: return n // i return 1",
        "highlight_llm": "7",
        "highlight_gt": "6"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "divisor += 1",
        "Correct Code": "if n % i == 0: return n // i",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "8",
        "highlight_gt": "7"
    },
    {
        "Task ID": 25,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "factors = []\n    factors.append(n)\n    while n % 2 == 0:\n        n //= 2\n        factors.append(n)\n    factors.append(n)\n    while n % 3 == 0:\n        n //= 3\n        factors.append(n)\n    factors.append(n)\n    while n % 5 == 0:\n        n //= 5\n        factors.append(n)\n    factors.append(n)\n    return factors",
        "Correct Code": "import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "from typing import List def factorize(n: int) -> List[int]: factors = [] factors.append(n) while n % 2 == 0: n //= 2 factors.append(n) factors.append(n) while n % 3 == 0: n //= 3 factors.append(n) factors.append(n) while n % 5 == 0: n //= 5 factors.append(n) factors.append(n) return factors",
        "Ground Truth": "from typing import List def factorize(n: int) -> List[int]: import math fact = [] i = 2 while i <= int(math.sqrt(n) + 1): if n % i == 0: fact.append(i) n //= i else: i += 1 if n > 1: fact.append(n) return fact",
        "highlight_llm": "15,16,17,18,19,20,21,22,23,24,25,26,27,28,29",
        "highlight_gt": "15,16,17,18,19,20,21,22,24,25,26,27"
    },
    {
        "Task ID": 26,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if number in seen:\n            continue",
        "Correct Code": "number for number in numbers if num_cnt[number] == 1",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "from typing import List def remove_duplicates(numbers: List[int]) -> List[int]: seen = set() result = [] for number in numbers: if number in seen: continue seen.add(number) result.append(number) return result",
        "Ground Truth": "from typing import List def remove_duplicates(numbers: List[int]) -> List[int]: num_cnt = dict() for number in numbers: if number not in num_cnt: num_cnt[number] = 0 num_cnt[number] += 1 return [number for number in numbers if num_cnt[number] == 1]",
        "highlight_llm": "13,14",
        "highlight_gt": "15"
    },
    {
        "Task ID": 27,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "string.lower()",
        "Correct Code": "\".join(map(lambda x: x.swapcase(), string))",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def flip_case(string: str) -> str: return string.lower()",
        "Ground Truth": "def flip_case(string: str) -> str: return \"\".join(map(lambda x: x.swapcase(), string))",
        "highlight_llm": "6",
        "highlight_gt": "6"
    },
    {
        "Task ID": 30,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if x >= 0",
        "Correct Code": "x > 0",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def flip_case(string: str) -> str: return \"\".join(map(lambda x: x.swapcase(), string))",
        "Ground Truth": "def get_positive(l: list): return list(filter(lambda x: x > 0, l))",
        "highlight_llm": "8",
        "highlight_gt": "8"
    },
    {
        "Task ID": 32,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "zero = float(\"inf\")\n    for coeff in xs:\n        if coeff == 0:\n            return zero\n        zero = abs(coeff)\n    return zero",
        "Correct Code": "dxs = [xs[i] * i for i in range(1, len(xs))]\n    def func(x):\n        return poly(xs, x)\n    def derivative(x):\n        return poly(dxs, x)\n    \n    x, tol = 0, 1e-5\n    for _ in range(1000):\n        fx = func(x)\n        dfx = derivative(x)\n        if abs(fx) < tol: break\n        x = x - fx / dfx\n\n    return x",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "import math def poly(xs: list, x: float): \"\"\" Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \"\"\" return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)]) def find_zero(xs: list): zero = float(\"inf\") for coeff in xs: if coeff == 0: return zero zero = abs(coeff) return zero",
        "Ground Truth": "import math def poly(xs: list, x: float): \"\"\" Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \"\"\" return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)]) def find_zero(xs: list): dxs = [xs[i] * i for i in range(1, len(xs))] def func(x): return poly(xs, x) def derivative(x): return poly(dxs, x) x, tol = 0, 1e-5 for _ in range(1000): fx = func(x) dfx = derivative(x) if abs(fx) < tol: break x = x - fx / dfx return x",
        "highlight_llm": "24,25,26,27,28,29",
        "highlight_gt": "24,25,26,27,28,30,31,32,33,34,35,37"
    },
    {
        "Task ID": 33,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "if x % 3 == 0",
        "Correct Code": "if i % 3 == 0",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def sort_third(l: list): third = [x for x in l if x % 3 == 0] third.sort() return third",
        "Ground Truth": "def sort_third(l: list): third = [l[i] for i in range(len(l)) if i % 3 == 0] third.sort() return [third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]",
        "highlight_llm": "10",
        "highlight_gt": "10"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "third",
        "Correct Code": "[third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "12",
        "highlight_gt": "12"
    },
    {
        "Task ID": 36,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if n % 11 == 0 or n % 13 == 0:\n        return n\n    return fizz_buzz(n // 11) + fizz_buzz(n // 13)",
        "Correct Code": "cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += len(list(filter(lambda c: c == \"7\", str(i))))\n    return cnt",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def fizz_buzz(n: int): if n % 11 == 0 or n % 13 == 0: return n return fizz_buzz(n // 11) + fizz_buzz(n // 13)",
        "Ground Truth": "def fizz_buzz(n: int): cnt = 0 for i in range(n): if i % 11 == 0 or i % 13 == 0: cnt += len(list(filter(lambda c: c == \"7\", str(i)))) return cnt",
        "highlight_llm": "10,11,12",
        "highlight_gt": "10,11,12,13,14"
    },
    {
        "Task ID": 37,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "even = [i for i in l if i % 2 == 0] odd = [i for i in l if i % 2!= 0] return sorted(even) + sorted(odd)",
        "Correct Code": "even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def sort_even(l: list): even = [i for i in l if i % 2 == 0] odd = [i for i in l if i % 2!= 0] return sorted(even) + sorted(odd)",
        "Ground Truth": "def sort_even(l: list): even = [l[i] for i in range(len(l)) if i % 2 == 0] even.sort() return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]",
        "highlight_llm": "10,11,12",
        "highlight_gt": "10,11,12"
    },
    {
        "Task ID": 38,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "groups = [group[1:] + group[0] for group in s.split(",
        "Correct Code": "groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[2] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def encode_cyclic(s: str): \"\"\" returns encoded string by cycling groups of three characters. \"\"\" # split string to groups. Each of length 3. groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)] # cycle elements in each group. Unless group has fewer elements than 3. groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups] return \"\".join(groups) def decode_cyclic(s: str): # split encoded string into groups. Each of length 3. groups = [group[1:] + group[0] for group in s.split(",
        "Ground Truth": "def encode_cyclic(s: str): \"\"\" returns encoded string by cycling groups of three characters. \"\"\" # split string to groups. Each of length 3. groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)] # cycle elements in each group. Unless group has fewer elements than 3. groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups] return \"\".join(groups) def decode_cyclic(s: str): groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)] groups = [(group[2] + group[:2]) if len(group) == 3 else group for group in groups] return \"\".join(groups)",
        "highlight_llm": "17",
        "highlight_gt": "16,17,18"
    },
    {
        "Task ID": 39,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if n < 2:\n        return n\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return n\n    return prime_fib(n-1) + prime_fib(n-2)",
        "Correct Code": "import random\n    def miller_rabin(n, k=10):\n        \"\"\"Test if n is prime using the Miller-Rabin primality test.\"\"\"\n        if n < 2:\n            return False\n        if n == 2 or n == 3:\n            return True\n        if n % 2 == 0:\n            return False\n\n        r = 0\n        d = n - 1\n        while d % 2 == 0:\n            r += 1\n            d //= 2\n\n        for _ in range(k):\n            a = random.randint(2, n - 2)\n            x = pow(a, d, n)\n            if x == 1 or x == n - 1:\n                continue\n            for _ in range(r - 1):\n                x = pow(x, 2, n)\n                if x == n - 1:\n                    break\n            else:\n                return False\n\n        return True\n\n    c_prime = 0\n    a, b = 0, 1\n    while c_prime < n:\n        a, b = b, a + b\n        if miller_rabin(b):\n            c_prime += 1\n    return b",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def prime_fib(n: int): if n < 2: return n if n == 2: return 1 if n % 2 == 0: return n return prime_fib(n-1) + prime_fib(n-2)",
        "Ground Truth": "def prime_fib(n: int): import random def miller_rabin(n, k=10): \"\"\"Test if n is prime using the Miller-Rabin primality test.\"\"\" if n < 2: return False if n == 2 or n == 3: return True if n % 2 == 0: return False r = 0 d = n - 1 while d % 2 == 0: r += 1 d //= 2 for _ in range(k): a = random.randint(2, n - 2) x = pow(a, d, n) if x == 1 or x == n - 1: continue for _ in range(r - 1): x = pow(x, 2, n) if x == n - 1: break else: return False return True c_prime = 0 a, b = 0, 1 while c_prime < n: a, b = b, a + b if miller_rabin(b): c_prime += 1 return b",
        "highlight_llm": "15,16,17,18,19,20,21",
        "highlight_gt": "15,16,17,18,19,20,21,22,23,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,43,45,46,47,48,49,50,51"
    },
    {
        "Task ID": 40,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return len(set(l)) >= 3",
        "Correct Code": "for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                if i != j and i != k and j != k and l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def triples_sum_to_zero(l: list): return len(set(l)) >= 3",
        "Ground Truth": "def triples_sum_to_zero(l: list): for i in range(len(l)): for j in range(len(l)): for k in range(len(l)): if i != j and i != k and j != k and l[i] + l[j] + l[k] == 0: return True return False",
        "highlight_llm": "18",
        "highlight_gt": "18,19,20,21,22,23"
    },
    {
        "Task ID": 41,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "collisions = 0\n    car_speeds
        "Correct Code": "return n ** 2",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def car_race_collision(n: int): collisions = 0 car_speeds
        "Ground Truth": "def car_race_collision(n: int): return n ** 2",
        "highlight_llm": "13,14",
        "highlight_gt": "13"
    },
    {
        "Task ID": 42,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "l.append(1)\n    return l",
        "Correct Code": "return [x + 1 for x in l]",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def incr_list(l: list): l.append(1) return l",
        "Ground Truth": "def incr_list(l: list): return [x + 1 for x in l]",
        "highlight_llm": "8,9",
        "highlight_gt": "8"
    },
    {
        "Task ID": 43,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return len(set(l)) == 2",
        "Correct Code": "for i in range(len(l)):\n        for j in range(len(l)):\n            if i != j and l[i] + l[j] == 0:\n                return True\n    return False",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def pairs_sum_to_zero(l): return len(set(l)) == 2",
        "Ground Truth": "def pairs_sum_to_zero(l): for i in range(len(l)): for j in range(len(l)): if i != j and l[i] + l[j] == 0: return True return False",
        "highlight_llm": "17",
        "highlight_gt": "17,18,19,20,21"
    },
    {
        "Task ID": 44,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "x /= base",
        "Correct Code": "x //= base",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect arithmetic",
        "Syntactic Error ID": "Be1",
        "Generated Code": "def change_base(x: int, base: int): digits = [] while x: digits.append(str(x % base)) x /= base return ''.join(reversed(digits))",
        "Ground Truth": "def change_base(x: int, base: int): if x == 0: return \"0\" ret = \"\" while x != 0: ret = str(x % base) + ret x //= base return ret",
        "highlight_llm": "15",
        "highlight_gt": "16"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "if x == 0: return \"0",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "12"
    },
    {
        "Task ID": 46,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "elif n == 2: return 2 elif n == 3: return 0",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def fib4(n: int): if n == 0: return 0 elif n == 1: return 1 else: return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)",
        "Ground Truth": "def fib4(n: int): if n == 0: return 0 elif n == 1: return 0 elif n == 2: return 2 elif n == 3: return 0 else: a, b, c, d = 0, 0, 2, 0 for i in range(4, n + 1): a, b, c, d = b, c, d, a + b + c + d return d",
        "highlight_llm": "",
        "highlight_gt": "21,22,23,24"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "return 1",
        "Correct Code": "return 0",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "19",
        "highlight_gt": "20"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 3,
        "Incorrect Code": "return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)",
        "Correct Code": "a, b, c, d = 0, 0, 2, 0; for i in range(4, n + 1): a, b, c, d = b, c, d, a + b + c + d;return d",
        "Semantic Level": "Infinite Loop",
        "Semantic Error ID": "Ag1",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "21",
        "highlight_gt": "26,27,28,29"
    },
    {
        "Task ID": 47,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "if half",
        "Correct Code": "if len(l) % 2 == 1",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def median(l: list): l = sorted(l) half = len(l) // 2 return l[half] if half else l[0]",
        "Ground Truth": "def median(l: list): sorted_l = sorted(l) if len(l) % 2 == 1: return sorted_l[len(l) // 2] else: return (sorted_l[len(l) // 2 - 1] + sorted_l[len(l) // 2]) / 2",
        "highlight_llm": "10",
        "highlight_gt": "9"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "l[0]",
        "Correct Code": "(sorted_l[len(l) // 2 - 1] + sorted_l[len(l) // 2]) / 2",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect arithmetic",
        "Syntactic Error ID": "Be1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "10",
        "highlight_gt": "12"
    },
    {
        "Task ID": 50,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "chr(((ord(ch) - ord(\"a\")) % 26",
        "Correct Code": "chr((ord(ch) - ord(\"a\") - 5 + 26) % 26",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def encode_shift(s: str): \"\"\" returns encoded string by shifting every character by 5 in the alphabet. \"\"\" return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s]) def decode_shift(s: str): return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "Ground Truth": "def encode_shift(s: str): \"\"\" returns encoded string by shifting every character by 5 in the alphabet. \"\"\" return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s]) def decode_shift(s: str): return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])",
        "highlight_llm": "12",
        "highlight_gt": "12"
    },
    {
        "Task ID": 54,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "len(s0) == len(s1)",
        "Correct Code": "set(s0) == set(s1)",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def same_chars(s0: str, s1: str): return len(s0) == len(s1)",
        "Ground Truth": "def same_chars(s0: str, s1: str): return set(s0) == set(s1)",
        "highlight_llm": "17",
        "highlight_gt": "17"
    },
    {
        "Task ID": 55,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return fib(n-1) + fib(n-2)",
        "Correct Code": "a, b = 1, 1\n    for _ in range(3, n + 1):\n        a, b, = b, a + b\n    return b",
        "Semantic Level": "Infinite Loop",
        "Semantic Error ID": "Ag1",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "def fib(n: int): if n < 2: return n return fib(n-1) + fib(n-2)",
        "Ground Truth": "def fib(n: int): if n == 0: return 0 if n <= 2: return 1 a, b = 1, 1 for _ in range(3, n + 1): a, b, = b, a + b return b",
        "highlight_llm": "12",
        "highlight_gt": "12,13,14,15"
    },
    {
        "Task ID": 56,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "opening_brackets = [b for b in brackets if b == \"<\"]\n    closing_brackets = [b for b in brackets if b == \">\"]\n    return len(opening_brackets) == len(closing_brackets)",
        "Correct Code": "cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def correct_bracketing(brackets: str): opening_brackets = [b for b in brackets if b == \"<\"] closing_brackets = [b for b in brackets if b == \">\"] return len(opening_brackets) == len(closing_brackets)",
        "Ground Truth": "def correct_bracketing(brackets: str): cnt = 0 for x in brackets: if x == \"<\": cnt += 1 if x == \">\": cnt -= 1 if cnt < 0: return False return cnt == 0",
        "highlight_llm": "14,15,16",
        "highlight_gt": "14,15,16,17,18,19"
    },
    {
        "Task ID": 57,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "x < y for x, y in zip(l, l[1:])",
        "Correct Code": "if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def monotonic(l: list): return all(x < y for x, y in zip(l, l[1:]))",
        "Ground Truth": "def monotonic(l: list): inc, dec = True, True for i in range(len(l) - 1): if l[i] > l[i + 1]: inc = False if l[i] < l[i + 1]: dec = False return inc or dec",
        "highlight_llm": "10",
        "highlight_gt": "12,13"
    },
    {
        "Task ID": 58,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "list(",
        "Correct Code": "sorted(list(",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def common(l1: list, l2: list): common = set(l1) & set(l2) return list(common)",
        "Ground Truth": "def common(l1: list, l2: list): return sorted(list(set(l1).intersection(set(l2))))",
        "highlight_llm": "10",
        "highlight_gt": "9"
    },
    {
        "Task ID": 59,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "while n % factor == 0",
        "Correct Code": "for i in range(n - 1, 0, -1):\n        if isprime[i] and n % i == 0",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "While error",
        "Syntactic Error ID": "Bb2",
        "Generated Code": "def largest_prime_factor(n: int): if n < 2: return n factor = 1 while n % factor == 0: factor += 1 return factor",
        "Ground Truth": "def largest_prime_factor(n: int): isprime = [True] * (n + 1) for i in range(2, n + 1): if isprime[i]: for j in range(i + i, n, i): isprime[j] = False for i in range(n - 1, 0, -1): if isprime[i] and n % i == 0: return i",
        "highlight_llm": "11",
        "highlight_gt": "16,17"
    },
    {
        "Task ID": 61,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "opening_brackets = [bracket for bracket in brackets if bracket in \"()\"]\n    closing_brackets = [bracket for bracket in brackets if bracket in \")](\"]\n    return len(opening_brackets) == len(closing_brackets)",
        "Correct Code": "cnt = 0\n    for x in brackets:\n        if x == \"(\": cnt += 1\n        if x == \")\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def correct_bracketing(brackets: str): opening_brackets = [bracket for bracket in brackets if bracket in \"()\"] closing_brackets = [bracket for bracket in brackets if bracket in \")](\"] return len(opening_brackets) == len(closing_brackets)",
        "Ground Truth": "def correct_bracketing(brackets: str): cnt = 0 for x in brackets: if x == \"(\": cnt += 1 if x == \")\": cnt -= 1 if cnt < 0: return False return cnt == 0",
        "highlight_llm": "14,15,16",
        "highlight_gt": "14,15,16,17,18,19"
    },
    {
        "Task ID": 62,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "in enumerate(xs)",
        "Correct Code": "in range(1, len(xs)",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "def derivative(xs: list): return [x**i for i,x in enumerate(xs)]",
        "Ground Truth": "def derivative(xs: list): return [xs[i] * i for i in range(1, len(xs))]",
        "highlight_llm": "10",
        "highlight_gt": "10"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "x**i",
        "Correct Code": "xs[i] * i",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect arithmetic",
        "Syntactic Error ID": "Be1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "10",
        "highlight_gt": "10"
    },
    {
        "Task ID": 63,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "fibfibfib",
        "Correct Code": "",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def fibfib(n: int): if n <= 1: return n return fibfibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "Ground Truth": "def fibfib(n: int): if n == 0 or n == 1: return 0 elif n == 2: return 1 a, b, c = 0, 0, 1 for _ in range(3, n + 1): a, b, c = b, c, a + b + c return c",
        "highlight_llm": "17",
        "highlight_gt": ""
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "if n <= 1: return n",
        "Correct Code": "if n == 0 or n == 1: return 0 elif n == 2: return 1",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "15,16",
        "highlight_gt": "15,16,17,18"
    },
    {
        "Task ID": 64,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "if s[-1] in \"yY\": cnt += 1",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "FIX = \"\"\" Add more test cases. \"\"\" def vowels_count(s): return sum(1 for c in s if c in 'AEIOUaeiou')",
        "Ground Truth": "FIX = \"\"\" Add more test cases. \"\"\" def vowels_count(s): if s == \"\": return 0 cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s))) if s[-1] in \"yY\": cnt += 1 return cnt",
        "highlight_llm": "",
        "highlight_gt": "18"
    },
    {
        "Task ID": 65,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "digits = x.__len__()\n    if shift > digits:\n        digits = digits\n    return str(x[-digits:])[::-1]",
        "Correct Code": "s = str(x)\n    if shift > len(s): return s[::-1]\n    shift %= len(s)\n    if shift == 0:\n        return s\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def circular_shift(x, shift): digits = x.__len__() if shift > digits: digits = digits return str(x[-digits:])[::-1]",
        "Ground Truth": "def circular_shift(x, shift): s = str(x) if shift > len(s): return s[::-1] shift %= len(s) if shift == 0: return s else: return s[len(s) - shift:] + s[:len(s) - shift]",
        "highlight_llm": "10,11,12,13",
        "highlight_gt": "10,11,12,13,14,15,16"
    },
    {
        "Task ID": 66,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "for c in s:\n        sum += ord?",
        "Correct Code": "sum([ord(ch) for ch in s if ch.isupper()])",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def digitSum(s): sum = 0 for c in s: sum += ord(c) return sum",
        "Ground Truth": "def digitSum(s): return sum([ord(ch) for ch in s if ch.isupper()])",
        "highlight_llm": "15,16",
        "highlight_gt": "14"
    },
    {
        "Task ID": 67,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "fruit_distribution_helper",
        "Correct Code": "",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def fruit_distribution(s,n): fruit_distribution_helper(s,n,0,0) return fruit_distribution_helper(s,n,0,1)",
        "Ground Truth": "def fruit_distribution(s,n): words = s.split(\" \") c1, c2 = int(words[0]), int(words[3]) assert n - c1 - c2 >= 0, \"invalid inputs\" # $_CONTRACT_$ return n - c1 - c2",
        "highlight_llm": "14",
        "highlight_gt": ""
    },
    {
        "Task ID": 68,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"",
        "Correct Code": "if all(val % 2 == 1 for val in arr): return []\n    min_even = min(filter(lambda x: x % 2 == 0, arr))\n    for i in range(len(arr)):\n        if arr[i] == min_even:\n            return [min_even, i]",
        "Semantic Level": "Only comments",
        "Semantic Error ID": "Ae1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def pluck(arr):",
        "Ground Truth": "def pluck(arr): if all(val % 2 == 1 for val in arr): return [] min_even = min(filter(lambda x: x % 2 == 0, arr)) for i in range(len(arr)): if arr[i] == min_even: return [min_even, i]",
        "highlight_llm": "2,3,4,5,6,8,9,11,12,13,14,16,17,18,19,21,22,23,25,26,27,28,29,31,32,33,34",
        "highlight_gt": "35,36,37,38,39"
    },
    {
        "Task ID": 69,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "operator.itemgetter(1)",
        "Correct Code": "",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def search(lst): freq = {} for num in lst: if num not in freq: freq[num] = 1 else: freq[num] += 1 return max(freq.items(), key=operator.itemgetter(1))[0]",
        "Ground Truth": "def search(lst): count = dict() for num in lst: if num not in count: count[num] = 0 count[num] += 1 ans = -1 for num, cnt in count.items(): if cnt >= num: ans = max(ans, num) return ans",
        "highlight_llm": "18",
        "highlight_gt": ""
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "max(freq.items(), key=operator.itemgetter(1))[0]",
        "Correct Code": "ans = -1\n    for num, cnt in count.items():\n        if cnt >= num:\n            ans = max(ans, num)",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "18",
        "highlight_gt": "19,20,21"
    },
    {
        "Task ID": 70,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "reverse()",
        "Correct Code": "",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def strange_sort_list(lst): lst = sorted(lst) lst.reverse() return lst",
        "Ground Truth": "def strange_sort_list(lst): sorted_list = sorted(lst) ans, i, j = [], 0, len(sorted_list) - 1 while i < j: ans.append(sorted_list[i]) ans.append(sorted_list[j]) i += 1 j -= 1 if i == j: ans.append(sorted_list[i]) return ans",
        "highlight_llm": "13",
        "highlight_gt": ""
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "ans, i, j = [], 0, len(sorted_list) - 1\n    while i < j:\n        ans.append(sorted_list[i])\n        ans.append(sorted_list[j])\n        i += 1\n        j -= 1\n    if i == j: ans.append(sorted_list[i])",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "13,14,15,16,17,18,19"
    },
    {
        "Task ID": 71,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''",
        "Correct Code": "if a + b <= c or a + c <= b or b + c <= a: return -1\n    p = (a + b + c) / 2\n    return round((p * (p - a) * (p - b) * (p - c)) ** 0.5, 2)",
        "Semantic Level": "Only comments",
        "Semantic Error ID": "Ae1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def triangle_area(a, b, c):",
        "Ground Truth": "def triangle_area(a, b, c): if a + b <= c or a + c <= b or b + c <= a: return -1 p = (a + b + c) / 2 return round((p * (p - a) * (p - b) * (p - c)) ** 0.5, 2)",
        "highlight_llm": "2,3,4,5,6,7,8,9,10",
        "highlight_gt": "13,14,15"
    },
    {
        "Task ID": 72,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) ? False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) ? False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) ? True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) ? True\n    # 3 is less than the maximum possible weight, and it's balanced.",
        "Correct Code": "return q == q[::-1] and sum(q) <= w",
        "Semantic Level": "Only comments",
        "Semantic Error ID": "Ae1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def will_it_fly(q,w):",
        "Ground Truth": "def will_it_fly(q,w): return q == q[::-1] and sum(q) <= w",
        "highlight_llm": "2,3,4,6,7,8,10,11,13,14,16,17,18",
        "highlight_gt": "19"
    },
    {
        "Task ID": 73,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "in range(len(arr))",
        "Correct Code": "in range(len(arr) // 2)",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "def smallest_change(arr): change = 0 for i in range(len(arr)): if arr[i]!= arr[len(arr) - i - 1]: change += 1 return change",
        "Ground Truth": "def smallest_change(arr): arr_reversed, cnt = arr[::-1], 0 for i in range(len(arr) // 2): if arr[i] != arr_reversed[i]: cnt += 1 return cnt",
        "highlight_llm": "13",
        "highlight_gt": "13"
    },
    {
        "Task ID": 74,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "'''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) ? []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) ? ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ? ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ? ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) ? ['4']\n    '''",
        "Correct Code": "c1, c2 = sum(map(lambda s: len(s), lst1)), sum(map(lambda s: len(s), lst2))\n    return lst1 if c1 <= c2 else lst2",
        "Semantic Level": "Only comments",
        "Semantic Error ID": "Ae1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def total_match(lst1, lst2):",
        "Ground Truth": "def total_match(lst1, lst2): c1, c2 = sum(map(lambda s: len(s), lst1)), sum(map(lambda s: len(s), lst2)) return lst1 if c1 <= c2 else lst2",
        "highlight_llm": "2,3,4,6,8,9,10,11,12,13,14",
        "highlight_gt": "15,16"
    },
    {
        "Task ID": 75,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return a < 100 and a % 3 == 0",
        "Correct Code": "if a <= 1: return False\n    isprime = [True] * (a + 1)\n    for i in range(2, a + 1):\n        if isprime[i]:\n            for j in range(i + i, a + 1, i):\n                isprime[j] = False\n    cnt, tmp = 0, a\n    for i in range(2, a + 1):\n        while isprime[i] and tmp % i == 0:\n            tmp //= i\n            cnt += 1\n    return cnt == 3",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def is_multiply_prime(a): return a < 100 and a % 3 == 0",
        "Ground Truth": "def is_multiply_prime(a): if a <= 1: return False isprime = [True] * (a + 1) for i in range(2, a + 1): if isprime[i]: for j in range(i + i, a + 1, i): isprime[j] = False cnt, tmp = 0, a for i in range(2, a + 1): while isprime[i] and tmp % i == 0: tmp //= i cnt += 1 return cnt == 3",
        "highlight_llm": "9",
        "highlight_gt": "9,10,11,12,13,14,15,16,17,18,19,20"
    },
    {
        "Task ID": 76,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return x % n == 0",
        "Correct Code": "if x == 1: return True\n    if n == 0: return x == 0\n    if n == 1: return x == 1\n    if n == -1: return abs(x) == 1\n    p = n\n    while abs(p) <= abs(x):\n        if p == x: return True\n        p = p * n\n    return False",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def is_simple_power(x, n): return x % n == 0",
        "Ground Truth": "def is_simple_power(x, n): if x == 1: return True if n == 0: return x == 0 if n == 1: return x == 1 if n == -1: return abs(x) == 1 p = n while abs(p) <= abs(x): if p == x: return True p = p * n return False",
        "highlight_llm": "13",
        "highlight_gt": "13,14,15,16,17,18,19,20,21"
    },
    {
        "Task ID": 77,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return a>0 and a%2==0",
        "Correct Code": "a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "def iscube(a): return a>0 and a%2==0",
        "Ground Truth": "def iscube(a): a = abs(a) return int(round(a ** (1. / 3))) ** 3 == a",
        "highlight_llm": "14",
        "highlight_gt": "14,15"
    },
    {
        "Task ID": 78,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"",
        "Correct Code": "return len(list(filter(lambda x: x in \"2357BD\", num)))",
        "Semantic Level": "Only comments",
        "Semantic Error ID": "Ae1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def hex_key(num):",
        "Ground Truth": "def hex_key(num): return len(list(filter(lambda x: x in \"2357BD\", num)))",
        "highlight_llm": "2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18",
        "highlight_gt": "20"
    },
    {
        "Task ID": 79,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "db",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect constant",
        "Syntactic Error ID": "Be4",
        "Generated Code": "def decimal_to_binary(decimal): binary_string = \"\" binary_string += str(decimal) binary_string += \"db\" return binary_string",
        "Ground Truth": "def decimal_to_binary(decimal): return \"db\" + bin(decimal)[2:] + \"db",
        "highlight_llm": "13",
        "highlight_gt": "13"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "str(decimal)",
        "Correct Code": "bin(decimal)[2:]",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "14",
        "highlight_gt": "13"
    },
    {
        "Task ID": 80,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "count = 0\n    for letter in s:\n        if letter == letter:\n            count += 1\n        else:\n            count = 0\n            if count % 3 == 0:\n                return False",
        "Correct Code": "for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def is_happy(s): length = len(s) if length < 3: return False count = 0 for letter in s: if letter == letter: count += 1 else: count = 0 if count % 3 == 0: return False return True",
        "Ground Truth": "def is_happy(s): if len(s) < 3: return False for i in range(len(s) - 2): if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]: return False return True",
        "highlight_llm": "17,18,19,20,21,22,23,24",
        "highlight_gt": "14,15,16"
    },
    {
        "Task ID": 81,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "grades_letter = grades.copy()\n    grades_letter[grades_letter == 0] = 'E'\n    grades_letter[grades_letter > 0] = 'D-'\n    grades_letter[grades_letter < 0] = 'D+'\n    grades_letter[grades_letter > 1] = 'B+'\n    grades_letter[grades_letter < 1] = 'B'\n    grades_letter[grades_letter > 2] = 'A+'\n    grades_letter[grades_letter < 2] = 'A'\n    grades_letter[grades_letter > 3] = 'A'\n    grades_letter[grades_letter < 3] = 'A'\n    return grades_letter",
        "Correct Code": "def to_letter_grade(score):\n      if score == 4.0:\n        return \"A+\"\n      elif score > 3.7:\n        return \"A\"\n      elif score > 3.3:\n        return \"A-\"\n      elif score > 3.0:\n        return \"B+\"\n      elif score > 2.7:\n        return \"B\"\n      elif score > 2.3:\n        return \"B-\"\n      elif score > 2.0:\n        return \"C+\"\n      elif score > 1.7:\n        return \"C\"\n      elif score > 1.3:\n        return \"C-\"\n      elif score > 1.0:\n        return \"D+\"\n      elif score > 0.7:\n        return \"D\"\n      elif score > 0.0:\n        return \"D-\"\n      else:\n        return \"E\"\n    \n    return [to_letter_grade(x) for x in grades]",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def numerical_letter_grade(grades): grades_letter = grades.copy() grades_letter[grades_letter == 0] = 'E' grades_letter[grades_letter > 0] = 'D-' grades_letter[grades_letter < 0] = 'D+' grades_letter[grades_letter > 1] = 'B+' grades_letter[grades_letter < 1] = 'B' grades_letter[grades_letter > 2] = 'A+' grades_letter[grades_letter < 2] = 'A' grades_letter[grades_letter > 3] = 'A' grades_letter[grades_letter < 3] = 'A' return grades_letter",
        "Ground Truth": "def numerical_letter_grade(grades): def to_letter_grade(score): if score == 4.0: return \"A+\" elif score > 3.7: return \"A\" elif score > 3.3: return \"A-\" elif score > 3.0: return \"B+\" elif score > 2.7: return \"B\" elif score > 2.3: return \"B-\" elif score > 2.0: return \"C+\" elif score > 1.7: return \"C\" elif score > 1.3: return \"C-\" elif score > 1.0: return \"D+\" elif score > 0.7: return \"D\" elif score > 0.0: return \"D-\" else: return \"E\" return [to_letter_grade(x) for x in grades]",
        "highlight_llm": "26,27,28,29,30,31,32,33,34,35,36",
        "highlight_gt": "26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54"
    },
    {
        "Task ID": 83,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "count = 0\n    while n > 0:\n        count += 1\n        n //= 10\n    return count",
        "Correct Code": "if n == 1: return 1\n    return 18 * 10 ** (n - 2)",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def starts_one_ends(n): count = 0 while n > 0: count += 1 n //= 10 return count",
        "Ground Truth": "def starts_one_ends(n): if n == 1: return 1 return 18 * 10 ** (n - 2)",
        "highlight_llm": "6,7,8,9,10",
        "highlight_gt": "6,7"
    },
    {
        "Task ID": 84,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \ufffd\ufffd N \ufffd\ufffd 10000.\n    Output:\n         a string of binary number\n    \"\"",
        "Correct Code": "s = sum(map(lambda x: int(x), str(N)))\n    return bin(s)[2:]",
        "Semantic Level": "Only comments",
        "Semantic Error ID": "Ae1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def solve(N):",
        "Ground Truth": "def solve(N): s = sum(map(lambda x: int(x), str(N))) return bin(s)[2:]",
        "highlight_llm": "2,4,5,6,7,9,10,11,12,13,14",
        "highlight_gt": "15,16"
    },
    {
        "Task ID": 85,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def add(lst): return sum(lst[1::2])",
        "Ground Truth": "def add(lst): s = 0 for i in range(1, len(lst), 2): if lst[i] % 2 == 0: s += lst[i] return s",
        "highlight_llm": "",
        "highlight_gt": "9,10"
    },
    {
        "Task ID": 86,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "words = s.split()\n    words = [word.lower() for word in words]\n    words = [word for word in words if word.isalpha()]\n    words = [word for word in words if word not in string.punctuation]\n    words = [word for word in words if word not in string.digits]\n    words = [word for word in words if word not in string.punctuation]\n    words = [word for word in words if word not in string.digits]\n    words = [word for word in words if word not in string.punctuation]\n    words = [word for word in words if word not in string.digits]\n    words = [word for word in words if word not in string.punctuation]\n    words = [word for word in words if word not in string.digits]\n    words = [word for word in words if word not in string.punctuation]\n    words = [word for word in words if word not in string.digits]\n    words = [word for word in words if word not in string.punctuation]\n    words = [word for word in words if word not in string.digits]\n    words = [word for word in words if word not in string.punctuation]\n    words = [word for word in words if word not in string.digits]\n    words = [word for word in words if word not in string.punctuation]\n    words = [word for word in words if word not in string.digits]\n    words = [word for word in words if word not in string.punctuation]\n    words = [word for word in words if word not in string.digits]\n    words = [word for word in words if word not in string.punctuation]\n    words = [word for word in words if word not in string.digits]\n    words = [word for word in words if word not in string.punctuation]\n    words = [word for word in words if word not in string.digits]\n    words = [word for word in words if word not in string.punctuation]\n    words = [word for word in words if word not in string.digits]\n    words = [word for word in words if word not in string.punctuation]\n    words = [word for word in words if word not in string.digits]\n    words = [word for word in words if word not in string.punctuation]\n    words = [word for word in words if word not in string.digits]\n    words = [word for word in words if word not in string.punctuation]\n    words = [word for word in words if word not in string.digits]\n    words = [word for word in words if word not in string.punctuation]\n    words = [word for word in words if word not in string.digits]\n    words = [word",
        "Correct Code": "words = s.split(\" \") return \" \".join(map(lambda x: \"\".join(sorted(x, key=lambda ch: ord(ch))), words))",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def anti_shuffle(s): words = s.split() words = [word.lower() for word in words] words = [word for word in words if word.isalpha()] words = [word for word in words if word not in string.punctuation] words = [word for word in words if word not in string.digits] words = [word for word in words if word not in string.punctuation] words = [word for word in words if word not in string.digits] words = [word for word in words if word not in string.punctuation] words = [word for word in words if word not in string.digits] words = [word for word in words if word not in string.punctuation] words = [word for word in words if word not in string.digits] words = [word for word in words if word not in string.punctuation] words = [word for word in words if word not in string.digits] words = [word for word in words if word not in string.punctuation] words = [word for word in words if word not in string.digits] words = [word for word in words if word not in string.punctuation] words = [word for word in words if word not in string.digits] words = [word for word in words if word not in string.punctuation] words = [word for word in words if word not in string.digits] words = [word for word in words if word not in string.punctuation] words = [word for word in words if word not in string.digits] words = [word for word in words if word not in string.punctuation] words = [word for word in words if word not in string.digits] words = [word for word in words if word not in string.punctuation] words = [word for word in words if word not in string.digits] words = [word for word in words if word not in string.punctuation] words = [word for word in words if word not in string.digits] words = [word for word in words if word not in string.punctuation] words = [word for word in words if word not in string.digits] words = [word for word in words if word not in string.punctuation] words = [word for word in words if word not in string.digits] words = [word for word in words if word not in string.punctuation] words = [word for word in words if word not in string.digits] words = [word for word in words if word not in string.punctuation] words = [word for word in words if word not in string.digits] words = [word",
        "Ground Truth": "def anti_shuffle(s): words = s.split(\" \") return \" \".join(map(lambda x: \"\".join(sorted(x, key=lambda ch: ord(ch))), words))",
        "highlight_llm": "14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49",
        "highlight_gt": "14,15"
    },
    {
        "Task ID": 87,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "lst = sorted(lst, key=lambda x: x[0])\n    lst = sorted(lst, key=lambda x: x[1])\n    return [(i, j) for i, j in zip(lst, lst[1:])]",
        "Correct Code": "res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x: res.append((i, j))\n    return res",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def get_row(lst, x): lst = sorted(lst, key=lambda x: x[0]) lst = sorted(lst, key=lambda x: x[1]) return [(i, j) for i, j in zip(lst, lst[1:])]",
        "Ground Truth": "def get_row(lst, x): res = [] for i, l in enumerate(lst): for j in range(len(l) - 1, -1, -1): if l[j] == x: res.append((i, j)) return res",
        "highlight_llm": "21,22,23",
        "highlight_gt": "21,22,23,24,25"
    },
    {
        "Task ID": 88,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "sorted_array = []\n    sorted_array.append(array[0])\n    sorted_array.append(array[1])\n    sorted_array.append(array[2])\n    sorted_array.append(array[3])\n    sorted_array.append(array[4])\n    sorted_array.append(array[5])\n    sorted_array.append(array[6])\n    sorted_array.append(array[7])\n    sorted_array.append(array[8])\n    sorted_array.append(array[9])\n    sorted_array.append(array[10])\n    sorted_array.append(array[11])\n    sorted_array.append(array[12])\n    sorted_array.append(array[13])\n    sorted_array.append(array[14])\n    sorted_array.append(array[15])\n    sorted_array.append(array[16])\n    sorted_array.append(array[17])\n    sorted_array.append(array[18])\n    sorted_array.append(array[19])\n    sorted_array.append(array[20])\n    sorted_array.append(array[21])\n    sorted_array.append(array[22])\n    sorted_array.append(array[23])\n    sorted_array.append(array[24])\n    sorted_array.append(array[25])\n    sorted_array.append(array[26])\n    sorted_array.append(array[27])\n    sorted_array.append(array[28])\n    sorted_array.append(array[29])\n    sorted_array.append(array[30])\n    sorted_array.append(array[31])\n    sorted_array.append(array[32])\n    sorted_array.append(array[33])\n    sorted_array.append(array[34])\n    sorted_array.append(array[35])\n    sorted_array.append(array[36])\n    sorted_array.append(array[37])\n    sorted_array.append(array[38])\n    sorted_array.append(array[39])\n    sorted_array.append(array[40])\n    sorted_array.append(array[41])\n    sorted_array.append(array[42])\n    sorted_array.append(array[43])\n    sorted_array.append(array[44])\n    sorted_array.append(array[45])\n    sorted_array.append(array[46])\n    sorted_array.append(array[47])\n    sorted_array.append(array[48])\n    sorted_array.append(array[49])\n    sorted_array.append(array[50])\n    sorted_array.append(array[51])\n    sorted_array.append(array[52])\n    sorted_array.append(array[53])\n    sorted_array.append(array[54])\n    sorted_array.append(array[55])\n    sorted_array.append(array[56])\n    sorted_array.append(array[57])\n    sorted_array.append(array[58])\n    sorted_array.append(array[59])\n    sorted_array.append(array[60])\n    sorted_array.append(array[61])\n    sorted_array.append(array[62])\n    sorted_array.append(array[63])",
        "Correct Code": "if array == []: return []\n    return sorted(array, reverse=(array[0]+array[-1]) % 2 == 0)",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def sort_array(array): sorted_array = [] sorted_array.append(array[0]) sorted_array.append(array[1]) sorted_array.append(array[2]) sorted_array.append(array[3]) sorted_array.append(array[4]) sorted_array.append(array[5]) sorted_array.append(array[6]) sorted_array.append(array[7]) sorted_array.append(array[8]) sorted_array.append(array[9]) sorted_array.append(array[10]) sorted_array.append(array[11]) sorted_array.append(array[12]) sorted_array.append(array[13]) sorted_array.append(array[14]) sorted_array.append(array[15]) sorted_array.append(array[16]) sorted_array.append(array[17]) sorted_array.append(array[18]) sorted_array.append(array[19]) sorted_array.append(array[20]) sorted_array.append(array[21]) sorted_array.append(array[22]) sorted_array.append(array[23]) sorted_array.append(array[24]) sorted_array.append(array[25]) sorted_array.append(array[26]) sorted_array.append(array[27]) sorted_array.append(array[28]) sorted_array.append(array[29]) sorted_array.append(array[30]) sorted_array.append(array[31]) sorted_array.append(array[32]) sorted_array.append(array[33]) sorted_array.append(array[34]) sorted_array.append(array[35]) sorted_array.append(array[36]) sorted_array.append(array[37]) sorted_array.append(array[38]) sorted_array.append(array[39]) sorted_array.append(array[40]) sorted_array.append(array[41]) sorted_array.append(array[42]) sorted_array.append(array[43]) sorted_array.append(array[44]) sorted_array.append(array[45]) sorted_array.append(array[46]) sorted_array.append(array[47]) sorted_array.append(array[48]) sorted_array.append(array[49]) sorted_array.append(array[50]) sorted_array.append(array[51]) sorted_array.append(array[52]) sorted_array.append(array[53]) sorted_array.append(array[54]) sorted_array.append(array[55]) sorted_array.append(array[56]) sorted_array.append(array[57]) sorted_array.append(array[58]) sorted_array.append(array[59]) sorted_array.append(array[60]) sorted_array.append(array[61]) sorted_array.append(array[62]) sorted_array.append(array[63])",
        "Ground Truth": "def sort_array(array): if array == []: return [] return sorted(array, reverse=(array[0]+array[-1]) % 2 == 0)",
        "highlight_llm": "16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80",
        "highlight_gt": "16,17"
    },
    {
        "Task ID": 89,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "def encrypt(s):\n        rotated_alphabet = alphabet[alphabet.index(s)%len(alphabet)]\n        return rotated_alphabet + s\n    return encrypt",
        "Correct Code": "return \"\".join(map(lambda ch: chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\")) if ch in d else ch, s))",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def encrypt(s): alphabet = 'abcdefghijklmnopqrstuvwxyz' def encrypt(s): rotated_alphabet = alphabet[alphabet.index(s)%len(alphabet)] return rotated_alphabet + s return encrypt",
        "Ground Truth": "def encrypt(s): d = 'abcdefghijklmnopqrstuvwxyz' return \"\".join(map(lambda ch: chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\")) if ch in d else ch, s))",
        "highlight_llm": "14,15,16,17",
        "highlight_gt": "13"
    },
    {
        "Task ID": 90,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"",
        "Correct Code": "if len(lst) <= 1: return None\n    sorted_list = sorted(lst)\n    for x in sorted_list:\n        if x != sorted_list[0]:\n            return x",
        "Semantic Level": "Only comments",
        "Semantic Error ID": "Ae1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def next_smallest(lst): \"\"\" You are given a list of integers. Write a function next_smallest() that returns the 2nd smallest element of the list. Return None if there is no such element. next_smallest([1, 2, 3, 4, 5]) == 2 next_smallest([5, 1, 4, 3, 2]) == 2 next_smallest([]) == None next_smallest([1, 1]) == None \"\"",
        "Ground Truth": "def next_smallest(lst): if len(lst) <= 1: return None sorted_list = sorted(lst) for x in sorted_list: if x != sorted_list[0]: return x",
        "highlight_llm": "2,3,4,5,7,8,9,10,11",
        "highlight_gt": "12,13,14,15,16"
    },
    {
        "Task ID": 91,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "in S.split('.')",
        "Correct Code": "((S.replace(\"?\", \".\")).replace(\"!\", \".\")).split(\".\"))",
        "Semantic Level": "Miss condition",
        "Semantic Error ID": "Aa1",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "def is_bored(S): bored = 0 for word in S.split('.'): if word.startswith('I '): bored += 1 return bored",
        "Ground Truth": "def is_bored(S): sentences = map(lambda x: x.strip(), ((S.replace(\"?\", \".\")).replace(\"!\", \".\")).split(\".\")) return len([s for s in sentences if s.startswith(\"I \")])",
        "highlight_llm": "14",
        "highlight_gt": "13"
    },
    {
        "Task ID": 92,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return all(x is y or x is z for x, y in zip(x, y, z))",
        "Correct Code": "if type(x) != int or type(y) != int or type(z) != int: return False\n    return x == y + z or y == x + z or z == y + x",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "def any_int(x, y, z): return all(x is y or x is z for x, y in zip(x, y, z))",
        "Ground Truth": "def any_int(x, y, z): if type(x) != int or type(y) != int or type(z) != int: return False return x == y + z or y == x + z or z == y + x",
        "highlight_llm": "19",
        "highlight_gt": "19,20"
    },
    {
        "Task ID": 93,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    message = message.lower()\n    \n    message = message.replace(' ', '')\n    message = message.replace('.', '')\n    message = message.replace(',', '')\n    message = message.replace('?', '')\n    message = message.replace('!', '')\n    message = message.replace(':', '')\n    message = message.replace(';', '')\n    message = message.replace('?', '')\n    message = message.replace('!', '')\n    message = message.replace(':', '')\n    message = message.replace(';', '')\n    message = message.replace('?', '')\n    message = message.replace('!', '')\n    message = message.replace(':', '')\n    message = message.replace(';', '')\n    message = message.replace('?', '')\n    message = message.replace('!', '')\n    message = message.replace(':', '')\n    message = message.replace(';', '')\n    message = message.replace('?', '')\n    message = message.replace('!', '')\n    message = message.replace(':', '')\n    message = message.replace(';', '')\n    message = message.replace('?', '')\n    message = message.replace('!', '')\n    message = message.replace(':', '')\n    message = message.replace(';', '')\n    message = message.replace('?', '')\n    message = message.replace('!', '')\n    message = message.replace(':', '')\n    message = message.replace(';', '')\n    message = message.replace('?', '')\n    message = message.replace('!', '')\n    message = message.replace(':', '')\n    message = message.replace(';', '')\n    message = message.replace('?', '')\n    message = message.replace('!', '')\n    message = message.replace(':', '')\n    message = message.replace(';', '')\n    message = message.replace('?', '')\n    message = message.replace('!', '')\n    message = message.replace(':', '')\n    message = message.replace(';', '')\n    message = message.replace('?', '')\n    message = message.replace('!', '')\n    message = message.replace(':', '')\n    message = message.replace(';', '')\n    message = message.replace('?', '')\n    message = message.replace('!', '')\n    message = message.replace(':', '')\n    message = message.replace(';', '')\n    message = message.replace('?', '')\n    message = message.replace('!', '')\n    message = message.replace(':', '')\n    message = message.replace(';', '')\n    message = message.replace('?', '')\n    message = message.replace('!', '')\n    message = message.replace(':', '')\n    message = message.replace(';', '')\n    message = message.replace('?', '')\n    message = message.replace('!', '')\n    message = message.replace(':', '')\n    message = message.replace(';', '')\n    message = message.replace('?', '')\n    message = message.replace('!', '')\n    message = message.replace(':', '')\n    message = message.replace(';', '')\n    message = message.replace('?', '')\n    message = message.replace('!', '')\n    message =",
        "Correct Code": "def switch_case(ch):\n        if ord(\"A\") <= ord(ch) <= ord(\"Z\"):\n            return chr(ord(ch) + 32)\n        elif ord(\"a\") <= ord(ch) <= ord(\"z\"):\n            return chr(ord(ch) - 32)\n        else:\n            return ch\n    \n    def vowel_change(ch):\n        return ch if ch not in \"aeiouAEIOU\" else chr(ord(ch) + 2)\n    \n    m = \"\".join(map(switch_case, message))\n    return \"\".join(map(vowel_change, m))",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def encode(message): alphabet = 'abcdefghijklmnopqrstuvwxyz' message = message.lower() message = message.replace(' ', '') message = message.replace('.', '') message = message.replace(',', '') message = message.replace('?', '') message = message.replace('!', '') message = message.replace(':', '') message = message.replace(';', '') message = message.replace('?', '') message = message.replace('!', '') message = message.replace(':', '') message = message.replace(';', '') message = message.replace('?', '') message = message.replace('!', '') message = message.replace(':', '') message = message.replace(';', '') message = message.replace('?', '') message = message.replace('!', '') message = message.replace(':', '') message = message.replace(';', '') message = message.replace('?', '') message = message.replace('!', '') message = message.replace(':', '') message = message.replace(';', '') message = message.replace('?', '') message = message.replace('!', '') message = message.replace(':', '') message = message.replace(';', '') message = message.replace('?', '') message = message.replace('!', '') message = message.replace(':', '') message = message.replace(';', '') message = message.replace('?', '') message = message.replace('!', '') message = message.replace(':', '') message = message.replace(';', '') message = message.replace('?', '') message = message.replace('!', '') message = message.replace(':', '') message = message.replace(';', '') message = message.replace('?', '') message = message.replace('!', '') message = message.replace(':', '') message = message.replace(';', '') message = message.replace('?', '') message = message.replace('!', '') message = message.replace(':', '') message = message.replace(';', '') message = message.replace('?', '') message = message.replace('!', '') message = message.replace(':', '') message = message.replace(';', '') message = message.replace('?', '') message = message.replace('!', '') message = message.replace(':', '') message = message.replace(';', '') message = message.replace('?', '') message = message.replace('!', '') message = message.replace(':', '') message = message.replace(';', '') message = message.replace('?', '') message = message.replace('!', '') message = message.replace(':', '') message = message.replace(';', '') message = message.replace('?', '') message = message.replace('!', '') message = message.replace(':', '') message = message.replace(';', '') message = message.replace('?', '') message = message.replace('!', '') message =",
        "Ground Truth": "def encode(message): def switch_case(ch): if ord(\"A\") <= ord(ch) <= ord(\"Z\"): return chr(ord(ch) + 32) elif ord(\"a\") <= ord(ch) <= ord(\"z\"): return chr(ord(ch) - 32) else: return ch def vowel_change(ch): return ch if ch not in \"aeiouAEIOU\" else chr(ord(ch) + 2) m = \"\".join(map(switch_case, message)) return \"\".join(map(vowel_change, m))",
        "highlight_llm": "16,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89",
        "highlight_gt": "15,16,17,18,19,20,21,23,24,26,27"
    },
    {
        "Task ID": 94,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "lst = sorted(lst)\n    lst = [x for x in lst if x % 2 == 0]\n    lst = [x for x in lst if x!= 0]\n    lst = [x for x in lst if x!= 1]\n    lst = [x for x in lst if x!= 2]\n    lst = [x for x in lst if x!= 3]\n    lst = [x for x in lst if x!= 4]\n    lst = [x for x in lst if x!= 5]\n    lst = [x for x in lst if x!= 6]\n    lst = [x for x in lst if x!= 7]\n    lst = [x for x in lst if x!= 8]\n    lst = [x for x in lst if x!= 9]\n    lst = [x for x in lst if x!= 10]\n    lst = [x for x in lst if x!= 11]\n    lst = [x for x in lst if x!= 12]\n    lst = [x for x in lst if x!= 13]\n    lst = [x for x in lst if x!= 14]\n    lst = [x for x in lst if x!= 15]\n    lst = [x for x in lst if x!= 16]\n    lst = [x for x in lst if x!= 17]\n    lst = [x for x in lst if x!= 18]\n    lst = [x for x in lst if x!= 19]\n    lst = [x for x in lst if x!= 20]\n    lst = [x for x in lst if x!= 21]\n    lst = [x for x in lst if x!= 22]\n    lst = [x for x in lst if x!= 23]\n    lst = [x for x in lst if x!= 24]\n    lst = [x for x in lst if x!= 25]\n    lst = [x for x in lst if x!= 26]\n    lst = [x for x in lst if x!= 27]\n    lst = [x for x in lst if x!= 28]\n    lst = [x for x in lst if x!= 29]\n    lst = [x for x in lst if x!= 30]\n    lst = [x for x in lst if x!= 31]\n    lst = [x for x in lst if x!= 32]\n    lst = [x for x in lst if x!= 33]\n    lst = [x for x in lst if x!= 34]\n    lst = [x for x in lst if x!= 35]\n    lst = [x for x in lst if x!= 36]\n    lst = [x for x in lst if x!= 37]\n    lst = [x for x in lst if x!= 38]\n    lst = [x for x in lst if x!= 39]\n    lst = [x for x in lst if x!= 40]\n    lst = [x for x in lst if x!= 41]",
        "Correct Code": "def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    sorted_list = sorted(lst)[::-1]\n    for x in sorted_list:\n        if is_prime(x):\n            return sum(map(lambda ch: int(ch), str(x)))",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def skjkasdkd(lst): lst = sorted(lst) lst = [x for x in lst if x % 2 == 0] lst = [x for x in lst if x!= 0] lst = [x for x in lst if x!= 1] lst = [x for x in lst if x!= 2] lst = [x for x in lst if x!= 3] lst = [x for x in lst if x!= 4] lst = [x for x in lst if x!= 5] lst = [x for x in lst if x!= 6] lst = [x for x in lst if x!= 7] lst = [x for x in lst if x!= 8] lst = [x for x in lst if x!= 9] lst = [x for x in lst if x!= 10] lst = [x for x in lst if x!= 11] lst = [x for x in lst if x!= 12] lst = [x for x in lst if x!= 13] lst = [x for x in lst if x!= 14] lst = [x for x in lst if x!= 15] lst = [x for x in lst if x!= 16] lst = [x for x in lst if x!= 17] lst = [x for x in lst if x!= 18] lst = [x for x in lst if x!= 19] lst = [x for x in lst if x!= 20] lst = [x for x in lst if x!= 21] lst = [x for x in lst if x!= 22] lst = [x for x in lst if x!= 23] lst = [x for x in lst if x!= 24] lst = [x for x in lst if x!= 25] lst = [x for x in lst if x!= 26] lst = [x for x in lst if x!= 27] lst = [x for x in lst if x!= 28] lst = [x for x in lst if x!= 29] lst = [x for x in lst if x!= 30] lst = [x for x in lst if x!= 31] lst = [x for x in lst if x!= 32] lst = [x for x in lst if x!= 33] lst = [x for x in lst if x!= 34] lst = [x for x in lst if x!= 35] lst = [x for x in lst if x!= 36] lst = [x for x in lst if x!= 37] lst = [x for x in lst if x!= 38] lst = [x for x in lst if x!= 39] lst = [x for x in lst if x!= 40] lst = [x for x in lst if x!= 41]",
        "Ground Truth": "def skjkasdkd(lst): def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) sorted_list = sorted(lst)[::-1] for x in sorted_list: if is_prime(x): return sum(map(lambda ch: int(ch), str(x)))",
        "highlight_llm": "13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56",
        "highlight_gt": "16,17,18,19,20,21"
    },
    {
        "Task ID": 95,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if key.lower() not in dict:",
        "Correct Code": "if not k.islower()",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def check_dict_case(dict): for key in dict: if type(key) == str: if key.lower() not in dict: return False if key.upper() not in dict: return False return True",
        "Ground Truth": "def check_dict_case(dict): keys = list(dict.keys()) if keys == []: return False lower, upper = True, True for k in keys: if type(k) != str: lower = upper = False break if not k.islower(): lower = False if not k.isupper(): upper = False return lower or upper",
        "highlight_llm": "15",
        "highlight_gt": "20"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "if keys == []: return False  lower, upper = True, True  if type(k) != str: lower = upper = False",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "14,15,16,17,18"
    },
    {
        "Task ID": 96,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "primes = [2]\n    primes.append(3)\n    primes.append(5)\n    primes.append(7)\n    primes.append(11)\n    primes.append(13)\n    primes.append(17)\n    primes.append(19)\n    primes.append(21)\n    primes.append(23)\n    primes.append(25)\n    primes.append(27)\n    primes.append(29)\n    primes.append(31)\n    primes.append(33)\n    primes.append(35)\n    primes.append(37)\n    primes.append(39)\n    primes.append(41)\n    primes.append(43)\n    primes.append(45)\n    primes.append(47)\n    primes.append(49)\n    primes.append(51)\n    primes.append(53)\n    primes.append(55)\n    primes.append(57)\n    primes.append(59)\n    primes.append(61)\n    primes.append(63)\n    primes.append(65)\n    primes.append(67)\n    primes.append(69)\n    primes.append(71)\n    primes.append(73)\n    primes.append(75)\n    primes.append(77)\n    primes.append(79)\n    primes.append(81)\n    primes.append(83)\n    primes.append(85)\n    primes.append(87)\n    primes.append(89)\n    primes.append(91)\n    primes.append(93)\n    primes.append(95)\n    primes.append(97)\n    primes.append(99)\n    primes.append(101)\n    primes.append(103)\n    primes.append(105)\n    primes.append(107)\n    primes.append(109)\n    primes.append(111)\n    primes.append(113)\n    primes.append(115)\n    primes.append(117)\n    primes.append(119",
        "Correct Code": "ans = [] isprime = [True] * (n + 1) for i in range(2, n): if isprime[i]: ans.append(i) for j in range(i + i, n, i): isprime[j] = False return ans",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def count_up_to(n): primes = [2] primes.append(3) primes.append(5) primes.append(7) primes.append(11) primes.append(13) primes.append(17) primes.append(19) primes.append(21) primes.append(23) primes.append(25) primes.append(27) primes.append(29) primes.append(31) primes.append(33) primes.append(35) primes.append(37) primes.append(39) primes.append(41) primes.append(43) primes.append(45) primes.append(47) primes.append(49) primes.append(51) primes.append(53) primes.append(55) primes.append(57) primes.append(59) primes.append(61) primes.append(63) primes.append(65) primes.append(67) primes.append(69) primes.append(71) primes.append(73) primes.append(75) primes.append(77) primes.append(79) primes.append(81) primes.append(83) primes.append(85) primes.append(87) primes.append(89) primes.append(91) primes.append(93) primes.append(95) primes.append(97) primes.append(99) primes.append(101) primes.append(103) primes.append(105) primes.append(107) primes.append(109) primes.append(111) primes.append(113) primes.append(115) primes.append(117) primes.append(119",
        "Ground Truth": "def count_up_to(n): ans = [] isprime = [True] * (n + 1) for i in range(2, n): if isprime[i]: ans.append(i) for j in range(i + i, n, i): isprime[j] = False return ans",
        "highlight_llm": "12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69",
        "highlight_gt": "12,13,14,15,16,17,18,19"
    },
    {
        "Task ID": 97,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "product = 1\n    \n    while a > 0:\n        product *= a\n        a -= 1\n    \n    while b > 0:\n        product *= b\n        b -= 1\n    \n    return product",
        "Correct Code": "return int(str(a)[-1]) * int(str(b)[-1])",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def multiply(a, b): product = 1 while a > 0: product *= a a -= 1 while b > 0: product *= b b -= 1 return product",
        "Ground Truth": "def multiply(a, b): return int(str(a)[-1]) * int(str(b)[-1])",
        "highlight_llm": "12,14,15,16,18,19,20,22",
        "highlight_gt": "11"
    },
    {
        "Task ID": 98,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "in range(len(s))",
        "Correct Code": "in range(0, len(s), 2)",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "def count_upper(s): count = 0 for i in range(len(s)): if s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U': count += 1 return count",
        "Ground Truth": "def count_upper(s): cnt = 0 for i in range(0, len(s), 2): if s[i] in \"AEIOU\": cnt += 1 return cnt",
        "highlight_llm": "11",
        "highlight_gt": "11"
    },
    {
        "Task ID": 99,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "lambda number: int(round(abs(number)",
        "Correct Code": "if val > 0:\n            return int(val) + 1\n        else:\n            return int(val) - 1",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def closest_integer(value): return lambda number: int(round(abs(number), 0))",
        "Ground Truth": "def closest_integer(value): def rounding(val): if abs(val - int(val)) != 0.5: return round(val) if val > 0: return int(val) + 1 else: return int(val) - 1 return rounding(float(value))",
        "highlight_llm": "19",
        "highlight_gt": "27,28,29,30"
    },
    {
        "Task ID": 100,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "stones.append(level)",
        "Correct Code": "ans.append(num)",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def make_a_pile(n): stones = [] level = 0 while level < n: stones.append(level) level += 1 return stones",
        "Ground Truth": "def make_a_pile(n): ans, num = [], n for _ in range(n): ans.append(num) num += 2 return ans",
        "highlight_llm": "18",
        "highlight_gt": "17"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "num=n    num += 2",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "15,18"
    },
    {
        "Task ID": 101,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "words = s.split(',')",
        "Correct Code": "words = (s.replace(\",\", \" \")).split()",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def words_string(s): words = s.split(',') words = [word.strip() for word in words] return words",
        "Ground Truth": "def words_string(s): words = (s.replace(\",\", \" \")).split() return [word for word in words if word != \"\"]",
        "highlight_llm": "10",
        "highlight_gt": "10"
    },
    {
        "Task ID": 102,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if x % 2 == 0:\n        return x // 2\n    else:\n        return -1",
        "Correct Code": "if x > y: return -1\n    if x == y: return y if y % 2 == 0 else -1\n    return y if y % 2 == 0 else y - 1",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def choose_num(x, y): if x % 2 == 0: return x // 2 else: return -1",
        "Ground Truth": "def choose_num(x, y): if x > y: return -1 if x == y: return y if y % 2 == 0 else -1 return y if y % 2 == 0 else y - 1",
        "highlight_llm": "10,11,12,13",
        "highlight_gt": "10,11,12"
    },
    {
        "Task ID": 103,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "binary = bin(n)[2:]\n    binary = binary.zfill(len(str(m)))\n    binary = binary.zfill(len(str(n)))\n    return binary",
        "Correct Code": "if n > m: return -1\n    avg = round((n + m) / 2)\n    return bin(avg)",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def rounded_avg(n, m): binary = bin(n)[2:] binary = binary.zfill(len(str(m))) binary = binary.zfill(len(str(n))) return binary",
        "Ground Truth": "def rounded_avg(n, m): if n > m: return -1 avg = round((n + m) / 2) return bin(avg)",
        "highlight_llm": "12,13,14,15",
        "highlight_gt": "12,13,14"
    },
    {
        "Task ID": 104,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if num % 2 == 0:\n            digits.append(num)",
        "Correct Code": "if int(ch) % 2 == 0:\n                return False",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def unique_digits(x): digits = [] for num in x: if num % 2 == 0: digits.append(num) return sorted(digits)",
        "Ground Truth": "def unique_digits(x): def judge(x): for ch in str(x): if int(ch) % 2 == 0: return False return True return sorted(list(filter(judge, x)))",
        "highlight_llm": "16,17",
        "highlight_gt": "15,16"
    },
    {
        "Task ID": 105,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "(map(str, arr))",
        "Correct Code": "",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def by_length(arr): arr = sorted(arr) arr = arr[::-1] arr = list(map(str, arr)) return arr",
        "Ground Truth": "def by_length(arr): def to_word(x: int) -> str: if x == 1: return \"One\" elif x == 2: return \"Two\" elif x == 3: return \"Three\" elif x == 4: return \"Four\" elif x == 5: return \"Five\" elif x == 6: return \"Six\" elif x == 7: return \"Seven\" elif x == 8: return \"Eight\" else: return \"Nine\" sorted_list, ans = sorted(arr)[::-1], [] for x in sorted_list: if 1 <= x <= 9: ans.append(to_word(x)) return ans",
        "highlight_llm": "25",
        "highlight_gt": ""
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "def to_word(x: int) -> str: if x == 1: return \"One\" elif x == 2: return \"Two\" elif x == 3: return \"Three\" elif x == 4: return \"Four\" elif x == 5: return \"Five\" elif x == 6: return \"Six\" elif x == 7: return \"Seven\" elif x == 8: return \"Eight\" return \"Nine\"\n  for x in sorted_list:\n      if 1 <= x <= 9:",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,44"
    },
    {
        "Task ID": 106,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "if n == 0: return [] if n == 1: return [1] if n == 2: return [1, 2]",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def f(n): factorial = [] for i in range(1, n + 1): factorial.append(i * factorial[i - 1]) return factorial",
        "Ground Truth": "def f(n): if n == 0: return [] if n == 1: return [1] if n == 2: return [1, 2] ans = [1, 2] for i in range(3, n + 1): if i % 2 == 1: ans.append(ans[-2] + (i - 1) + i) else: ans.append(ans[-2] * (i - 1) * i) return ans",
        "highlight_llm": "",
        "highlight_gt": "10,11,12"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "factorial = []",
        "Correct Code": "ans = [1, 2]",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect constant",
        "Syntactic Error ID": "Be4",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "10",
        "highlight_gt": "14"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 3,
        "Incorrect Code": "in range(1, n + 1)",
        "Correct Code": "in range(3, n + 1)",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "11",
        "highlight_gt": "15"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 4,
        "Incorrect Code": "i * factorial[i - 1]",
        "Correct Code": "ans[-2] * (i - 1) * i",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect arithmetic",
        "Syntactic Error ID": "Be1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "12",
        "highlight_gt": "17,19"
    },
    {
        "Task ID": 107,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "odd_palindromes = [] even_odd_palindromes = [] odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(",
        "Correct Code": "odd_cnt, even_cnt = 0, 0 for i in range(1, n + 1): if str(i) == str(i)[::-1]: if i % 2 == 1: odd_cnt += 1 else: even_cnt += 1 return even_cnt, odd_cnt",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def even_odd_palindrome(n): odd_palindromes = [] even_odd_palindromes = [] odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(n) even_odd_palindromes.append(n) odd_palindromes.append(",
        "Ground Truth": "def even_odd_palindrome(n): odd_cnt, even_cnt = 0, 0 for i in range(1, n + 1): if str(i) == str(i)[::-1]: if i % 2 == 1: odd_cnt += 1 else: even_cnt += 1 return even_cnt, odd_cnt",
        "highlight_llm": "24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70",
        "highlight_gt": "24,25,26,27,28,29,30,31"
    },
    {
        "Task ID": 108,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if num > 0:",
        "Correct Code": "if sum(l) > 0",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def count_nums(arr): count = 0 for num in arr: if num > 0: count += 1 return count",
        "Ground Truth": "def count_nums(arr): def judge(x: int) -> int: l = list(str(x)) if l[0] == \"-\": l = l[1:] l = list(map(int, l)) l[0] = -l[0] else: l = list(map(int, l)) return 1 if sum(l) > 0 else 0 return sum(map(judge, arr))",
        "highlight_llm": "13",
        "highlight_gt": "19"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "def judge(x: int) -> int: l = list(str(x)) if l[0] == \"-\": l = l[1:] l = list(map(int, l)) l[0] = -l[0] else: l = list(map(int, l)) return 1 if sum(l) > 0 else 0",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "11,12,13,14,15,16,17,18,19"
    },
    {
        "Task ID": 109,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The numbers in the array will be randomly ordered. Your task is to determine if it is possible to get an array sorted in non-decreasing order by performing the following operation on the given array: You are allowed to perform right shift operation any number of times. One right shift operation means shifting all elements of the array by one position in the right direction. The last element of the array will be moved to the starting position in the array i.e. 0th index. If it is possible to obtain the sorted array by performing the above operation then return True else return False. If the given array is empty then return True. Note: The given list is guaranteed to have unique elements. For Example: move_one_ball([3, 4, 5, 1, 2])==>True Explanation: By performin 2 right shift operations, non-decreasing order can be achieved for the given array. move_one_ball([3, 5, 4, 1, 2])==>False Explanation:It is not possible to get non-decreasing order for the given array by performing any number of right shift operations. \"\"",
        "Correct Code": "sorted_arr = sorted(arr) if arr == sorted_arr: return True for i in range(1, len(arr)): if arr[i:] + arr[:i] == sorted_arr: return True return False",
        "Semantic Level": "Only comments",
        "Semantic Error ID": "Ae1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def move_one_ball(arr):",
        "Ground Truth": "def move_one_ball(arr): sorted_arr = sorted(arr) if arr == sorted_arr: return True for i in range(1, len(arr)): if arr[i:] + arr[:i] == sorted_arr: return True return False",
        "highlight_llm": "2,3,4,5,6,,8,9,10,12,13,14,16,18,20,21,22,23,24,25,27",
        "highlight_gt": "29,30,31,32,33,34"
    },
    {
        "Task ID": 110,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "lst1 = list(lst1) lst2 = list(lst2) if len(lst1)!= len(lst2): return \"NO\" for i in range(len(lst1)): if lst1[i] % 2!= lst2[i] % 2: return \"NO\" return \"YES",
        "Correct Code": "cnt_odd = len(list(filter(lambda x: x % 2 == 1, lst1))) cnt_even = len(list(filter(lambda x: x % 2 == 0, lst2))) return \"YES\" if cnt_odd <= cnt_even else \"NO",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def exchange(lst1, lst2): lst1 = list(lst1) lst2 = list(lst2) if len(lst1)!= len(lst2): return \"NO\" for i in range(len(lst1)): if lst1[i] % 2!= lst2[i] % 2: return \"NO\" return \"YES",
        "Ground Truth": "def exchange(lst1, lst2): cnt_odd = len(list(filter(lambda x: x % 2 == 1, lst1))) cnt_even = len(list(filter(lambda x: x % 2 == 0, lst2))) return \"YES\" if cnt_odd <= cnt_even else \"NO",
        "highlight_llm": "14,15,16,17,18,19,20,21",
        "highlight_gt": "14,15,16"
    },
    {
        "Task ID": 111,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "letters = test.split() letters_set = set(letters) letters_count = letters_set.count() letters_frequency = letters_set.intersection(letters_set) letters_frequency = letters_frequency.",
        "Correct Code": "if test == \"\": return {} count, ans = dict(), dict() for word in test.split(\" \"): if word != \"\": if word not in count: count[word] = 0 count[word] += 1 mx = max(list(count.values())) for ch, c in count.items(): if c == mx: ans[ch] = c return ans",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def histogram(test): letters = test.split() letters_set = set(letters) letters_count = letters_set.count() letters_frequency = letters_set.intersection(letters_set) letters_frequency = letters_frequency.",
        "Ground Truth": "def histogram(test): if test == \"\": return {} count, ans = dict(), dict() for word in test.split(\" \"): if word != \"\": if word not in count: count[word] = 0 count[word] += 1 mx = max(list(count.values())) for ch, c in count.items(): if c == mx: ans[ch] = c return ans",
        "highlight_llm": "14,15,16,17,18",
        "highlight_gt": "18,19,20,21,22,23,24,25,26,27,28"
    },
    {
        "Task ID": 112,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "s=list(s) c=list(c) s=s[::-1] c=c[::-1] s=\"\".join(s) c=\"\".join(c) s=s.replace(c,\"\") c=c.replace(c,\"\") s=s.lower() c=c.lower() if s==c: return (s,True) else: return (s,False)",
        "Correct Code": "ss = \"\".join(filter(lambda ch: ch not in c, s)) return ss, ss == ss[::-1]",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def reverse_delete(s,c): s=list(s) c=list(c) s=s[::-1] c=c[::-1] s=\"\".join(s) c=\"\".join(c) s=s.replace(c,\"\") c=c.replace(c,\"\") s=s.lower() c=c.lower() if s==c: return (s,True) else: return (s,False)",
        "Ground Truth": "def reverse_delete(s,c): ss = \"\".join(filter(lambda ch: ch not in c, s)) return ss, ss == ss[::-1]",
        "highlight_llm": "12,13,14,15,16,17,18,19,20,21,22,23,24,25",
        "highlight_gt": "12,13"
    },
    {
        "Task ID": 113,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "len([x for x in x if x.isdigit()])",
        "Correct Code": "len(list(filter(lambda ch: int(ch) % 2 == 1, s))",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def odd_count(lst): odd_counts = [] for x in lst: odd_counts.append(len([x for x in x if x.isdigit()])) return odd_counts",
        "Ground Truth": "def odd_count(lst): ans, template = [], \"the number of odd elements in the string i of the input.\" for s in lst: odd_cnt = len(list(filter(lambda ch: int(ch) % 2 == 1, s))) ans.append(template.replace(\"i\", str(odd_cnt))) return ans",
        "highlight_llm": "15",
        "highlight_gt": "15"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "ans.append(template.replace(\"i\", str(odd_cnt)))",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "16"
    },
    {
        "Task ID": 114,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "if all(x >= 0 for x in nums): return min(nums) if s >= 0: s = 0",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "import math def minSubArraySum(nums): ans = float('inf') for i in range(len(nums)): for j in range(i+1, len(nums)): if nums[j] < nums[i]: ans = min(ans, nums[i] + nums[j]) return ans",
        "Ground Truth": "import math def minSubArraySum(nums): if all(x >= 0 for x in nums): return min(nums) s, ans = 0, 0 for x in nums: s += x ans = min(ans, s) if s >= 0: s = 0 return ans",
        "highlight_llm": "",
        "highlight_gt": "9,14"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "if nums[j] < nums[i]:",
        "Correct Code": "",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "14",
        "highlight_gt": ""
    },
    {
        "Task ID": 115,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "import math",
        "Correct Code": "import math ans = 0 for l in grid: ans += math.ceil(sum(l) / capacity) return ans",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def max_fill(grid, capacity): import math",
        "Ground Truth": "def max_fill(grid, capacity): import math ans = 0 for l in grid: ans += math.ceil(sum(l) / capacity) return ans",
        "highlight_llm": "2",
        "highlight_gt": "1,41,42,43,44"
    },
    {
        "Task ID": 116,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "ones_count = count_ones(arr) ones_count = ones_count.most_common()[0][0] ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length",
        "Correct Code": "from functools import cmp_to_key def cmp(x: int, y: int) -> int: x1 = len(list(filter(lambda ch: ch == \"1\", bin(x)))) y1 = len(list(filter(lambda ch: ch == \"1\", bin(y)))) if x1 != y1: return x1 - y1 return x - y return sorted(arr, key=cmp_to_key(cmp))",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def sort_array(arr): ones_count = count_ones(arr) ones_count = ones_count.most_common()[0][0] ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length() ones_count = ones_count.bit_length() - 1 ones_count = ones_count.bit_length",
        "Ground Truth": "def sort_array(arr): from functools import cmp_to_key def cmp(x: int, y: int) -> int: x1 = len(list(filter(lambda ch: ch == \"1\", bin(x)))) y1 = len(list(filter(lambda ch: ch == \"1\", bin(y)))) if x1 != y1: return x1 - y1 return x - y return sorted(arr, key=cmp_to_key(cmp))",
        "highlight_llm": "12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56",
        "highlight_gt": "12,13,14,15,16,17,18"
    },
    {
        "Task ID": 117,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if len(word) == n",
        "Correct Code": "filter(lambda ch: ch not in \"aeiouAEIOU\", word))",
        "Semantic Level": "Miss condition",
        "Semantic Error ID": "Aa1",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def select_words(s, n): words = s.split() words = [word for word in words if len(word) == n] return words",
        "Ground Truth": "def select_words(s, n): ans = [] for word in s.split(\" \"): if word != \"\": c_cnt = len(list(filter(lambda ch: ch not in \"aeiouAEIOU\", word))) if c_cnt == n: ans.append(word) return ans",
        "highlight_llm": "15",
        "highlight_gt": "17"
    },
    {
        "Task ID": 118,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "vowels = \"aeiou\" vowel_left = \"\" vowel_right = \"\" for char in word: if char in vowels: vowel_left += char else: vowel_right += char vowel_left = vowel_left.lower() vowel_right = vowel_right.lower() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip()",
        "Correct Code": "def is_vowel(ch: str) -> bool: return ch in \"aeiouAEIOU\" for i in range(len(word) - 2, 0, -1): if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]): return word[i] return \"",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def get_closest_vowel(word): vowels = \"aeiou\" vowel_left = \"\" vowel_right = \"\" for char in word: if char in vowels: vowel_left += char else: vowel_right += char vowel_left = vowel_left.lower() vowel_right = vowel_right.lower() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip() vowel_left = vowel_left.strip() vowel_right = vowel_right.strip()",
        "Ground Truth": "def get_closest_vowel(word): def is_vowel(ch: str) -> bool: return ch in \"aeiouAEIOU\" for i in range(len(word) - 2, 0, -1): if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]): return word[i] return \"",
        "highlight_llm": "16,18,19,21,22,23,24,25,27,28,30,31,33,34,36,37,39,40,42,43,45,46,48,49,51,52,54,55,57,58,60,61,63,64,66,67,69,70,72,73,75,76,78,79,81,82,84,85,87,88,90,91,93,94",
        "highlight_gt": "16,17,18,19,20,21"
    },
    {
        "Task ID": 119,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if len(lst) == 1: return 'Yes' if len(lst) == 2: if lst[0] == '(': if lst[1] == '(': return 'Yes' else: return 'No' else: if lst[1] == '(': return 'No' else: return 'Yes' else: return 'No'",
        "Correct Code": "def valid_parens(s: str) -> bool: cnt = 0 for ch in s: cnt = cnt + 1 if ch == \"(\" else cnt - 1 if cnt < 0: return False return cnt == 0 return \"Yes\" if valid_parens(lst[0] + lst[1]) or valid_parens(lst[1] + lst[0]) else \"No",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def match_parens(lst): if len(lst) == 1: return 'Yes' if len(lst) == 2: if lst[0] == '(': if lst[1] == '(': return 'Yes' else: return 'No' else: if lst[1] == '(': return 'No' else: return 'Yes' else: return 'No'",
        "Ground Truth": "def match_parens(lst): def valid_parens(s: str) -> bool: cnt = 0 for ch in s: cnt = cnt + 1 if ch == \"(\" else cnt - 1 if cnt < 0: return False return cnt == 0 return \"Yes\" if valid_parens(lst[0] + lst[1]) or valid_parens(lst[1] + lst[0]) else \"No",
        "highlight_llm": "16,17,18,19,20,21,22,23,24,25,26,27,28,29,30",
        "highlight_gt": "17,18,19,20,21,22,23"
    },
    {
        "Task ID": 120,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "arr = sorted(arr) length = len(arr) if k > length: return arr mid = length//2 if k == 1: return arr if k == mid: return arr[:mid] if k > mid: return arr[:mid] + arr[mid + 1:] return arr[:mid] + arr[mid + 1:]",
        "Correct Code": "return sorted(sorted(arr)[::-1][:k])",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def maximum(arr, k): arr = sorted(arr) length = len(arr) if k > length: return arr mid = length//2 if k == 1: return arr if k == mid: return arr[:mid] if k > mid: return arr[:mid] + arr[mid + 1:] return arr[:mid] + arr[mid + 1:]",
        "Ground Truth": "def maximum(arr, k): return sorted(sorted(arr)[::-1][:k])",
        "highlight_llm": "26,27,28,29,30,31,32,33,34,35,36,37",
        "highlight_gt": "26"
    },
    {
        "Task ID": 121,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if x % 2 == 1",
        "Correct Code": "if i % 2 == 0 and lst[i] % 2 == 1",
        "Semantic Level": "Miss condition",
        "Semantic Error ID": "Aa1",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def solution(lst): odd_positions = [i for i, x in enumerate(lst) if x % 2 == 1] return sum(lst[odd_positions])",
        "Ground Truth": "def solution(lst): return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 == 1)",
        "highlight_llm": "10",
        "highlight_gt": "10"
    },
    {
        "Task ID": 122,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "ans = 0 i = 0 while i < len(arr): ans += arr[i] i += 1 if i % k == 0: ans += arr[i] return ans",
        "Correct Code": "def digits(x: int) -> int: s = str(x) return len(s) - 1 if s[0] == \"-\" else len(s) return sum(filter(lambda x: digits(x) <= 2, arr[:k]))",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def add_elements(arr, k): ans = 0 i = 0 while i < len(arr): ans += arr[i] i += 1 if i % k == 0: ans += arr[i] return ans",
        "Ground Truth": "def add_elements(arr, k): def digits(x: int) -> int: s = str(x) return len(s) - 1 if s[0] == \"-\" else len(s) return sum(filter(lambda x: digits(x) <= 2, arr[:k]))",
        "highlight_llm": "15,16,17,18,19,20,21,22",
        "highlight_gt": "15,16,17,18"
    },
    {
        "Task ID": 123,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "odd_collatz = [] odd_collatz.append(1) odd_collatz.append(n) odd_collatz.append(n) odd_collatz.append(n) odd_collatz.append(n) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1)",
        "Correct Code": "ans, x = [], n while x != 1: if x % 2 == 1: ans.append(x) x = x // 2 if x % 2 == 0 else x * 3 + 1 ans.append(1) return sorted(ans)",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def get_odd_collatz(n): odd_collatz = [] odd_collatz.append(1) odd_collatz.append(n) odd_collatz.append(n) odd_collatz.append(n) odd_collatz.append(n) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1) odd_collatz.append(1)",
        "Ground Truth": "def get_odd_collatz(n): ans, x = [], n while x != 1: if x % 2 == 1: ans.append(x) x = x // 2 if x % 2 == 0 else x * 3 + 1 ans.append(1) return sorted(ans)",
        "highlight_llm": "18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74",
        "highlight_gt": "18,19,20,21,22,23"
    },
    {
        "Task ID": 124,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if day < 1 or day > 31",
        "Correct Code": "days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] if len(date) != 10: return False if date[2] != \"-\" or date[5] != \"-\": return False if not m.isdigit() or not d.isdigit() or not y.isdigit(): return False",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def valid_date(date): date_parts = date.split('-') month = int(date_parts[0]) day = int(date_parts[1]) year = int(date_parts[2]) if month < 1 or month > 12: return False if day < 1 or day > 31: return False if year < 1900: return False return True",
        "Ground Truth": "def valid_date(date): days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] if len(date) != 10: return False if date[2] != \"-\" or date[5] != \"-\": return False m, d, y = date[:2], date[3:5], date[6:] if not m.isdigit() or not d.isdigit() or not y.isdigit(): return False m, d = int(m), int(d) if not 1 <= m <= 12: return False if not 1 <= d <= days[m-1]: return False return True",
        "highlight_llm": "27",
        "highlight_gt": "21,22,23,25"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "if year < 1900 if day < 1 or day > 31",
        "Correct Code": "not y.isdigit() if not 1 <= d <= days[m-1]",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "27,29",
        "highlight_gt": "28"
    },
    {
        "Task ID": 125,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "words = txt.split() words = [word.lower() for word in words] words = [word for word in words if len(word) % 2 == 1] words = [word for word in words if len(word) > 1] return words",
        "Correct Code": "whitespace = tuple(' \\n\\r\\t') if any([x in txt for x in whitespace]): return txt.split() if \",\" in txt: return txt.split(\",\") cnt = 0 for ch in txt: if ch.islower() and (ord(ch) - ord(\"a\")) % 2 == 1: cnt += 1 return cnt",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def split_words(txt): words = txt.split() words = [word.lower() for word in words] words = [word for word in words if len(word) % 2 == 1] words = [word for word in words if len(word) > 1] return words",
        "Ground Truth": "def split_words(txt): whitespace = tuple(' \\n\\r\\t') if any([x in txt for x in whitespace]): return txt.split() if \",\" in txt: return txt.split(\",\") cnt = 0 for ch in txt: if ch.islower() and (ord(ch) - ord(\"a\")) % 2 == 1: cnt += 1 return cnt",
        "highlight_llm": "11,12,13,14,15",
        "highlight_gt": "11,12,13,14,15,16,17"
    },
    {
        "Task ID": 126,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "if x not in count: count[x] = 0 count[x] += 1 if count[x] > 2: return False",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def is_sorted(lst): return all(lst[i] < lst[i + 1] for i in range(len(lst) - 1))",
        "Ground Truth": "def is_sorted(lst): count = dict() for x in lst: if x not in count: count[x] = 0 count[x] += 1 if count[x] > 2: return False return lst == sorted(lst)",
        "highlight_llm": "",
        "highlight_gt": "20,21,22"
    },
    {
        "Task ID": 127,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "interval1 = sorted(interval1) interval2 = sorted(interval2) interval1.sort() interval2.sort() intersection = set(interval1).intersection(interval2) return len(intersection) == 1",
        "Correct Code": "def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) if interval1[0] > interval2[0]: interval1, interval2 = interval2, interval1 l, r = interval2[0], min(interval1[1], interval2[1]) return \"YES\" if is_prime(r - l) else \"NO",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def intersection(interval1, interval2): interval1 = sorted(interval1) interval2 = sorted(interval2) interval1.sort() interval2.sort() intersection = set(interval1).intersection(interval2) return len(intersection) == 1",
        "Ground Truth": "def intersection(interval1, interval2): def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) if interval1[0] > interval2[0]: interval1, interval2 = interval2, interval1 l, r = interval2[0], min(interval1[1], interval2[1]) return \"YES\" if is_prime(r - l) else \"NO",
        "highlight_llm": "21,22,23,24,25,26",
        "highlight_gt": "21,22,23,24,25"
    },
    {
        "Task ID": 128,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "signs = [1 if x < 0 else -1 if x > 0 else 0 for x in range(len(arr))] return sum(signs)",
        "Correct Code": "if arr == []: return None if 0 in arr: return 0 s, sgn = 0, 1 for x in arr: s += abs(x) sgn *= (x // abs(x)) return s * sgn",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def prod_signs(arr): signs = [1 if x < 0 else -1 if x > 0 else 0 for x in range(len(arr))] return sum(signs)",
        "Ground Truth": "def prod_signs(arr): if arr == []: return None if 0 in arr: return 0 s, sgn = 0, 1 for x in arr: s += abs(x) sgn *= (x // abs(x)) return s * sgn",
        "highlight_llm": "13,14",
        "highlight_gt": "13,14,15,16,17,18,19"
    },
    {
        "Task ID": 129,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "ans = [] visited = {} visited[grid[0][0]] = True ans.append(grid[0][0]) ans.append(grid[0][1]) ans.append(grid[0][2]) ans.append(grid[0][3]) ans.append(grid[0][4]) ans.append(grid[0][5]) ans.append(grid[0][6]) ans.append(grid[0][7]) ans.append(grid[0][8]) ans.append(grid[0][9]) ans.append(grid[0][10]) ans.append(grid[0][11]) ans.append(grid[0][12]) ans.append(grid[0][13]) ans.append(grid[0][14]) ans.append(grid[0][15]) ans.append(grid[0][16]) ans.append(grid[0][17]) ans.append(grid[0][18]) ans.append(grid[0][19]) ans.append(grid[0][20]) ans.append(grid[0][21]) ans.append(grid[0][22]) ans.append(grid[0][23]) ans.append(grid[0][24]) ans.append(grid[0][25]) ans.append(grid[0][26]) ans.append(grid[0][27]) ans.append(grid[0][28]) ans.append(grid[0][29]) ans.append(grid[0][30]) ans.append(grid[0][31]) ans.append(grid[0][32]) ans.append(grid[0][33]) ans.append(grid[0][34]) ans.append(grid[0][35]) ans.append(grid[0][36]) ans.append(grid[0][37]) ans.append(grid[0][38]) ans.append(grid[0][39]) ans.append(grid[0][40]) ans.append(grid[0][41]) ans.append(grid[0][42]) ans.append(grid[0][43]) ans.append(grid[0][44]) ans.append(grid[0][45]) ans.append(grid[0][46]) ans.append(grid[0][47]) ans.append(grid[0][48]) ans.append(grid[0][49]) ans.append(grid[0][50]) ans.append(grid[0][51]) ans.append(grid[0][52]) ans.append(grid[0][53]) ans.append(grid[0][54]) ans.append(grid[0][55]) ans.append(grid[0][56]) ans.append(grid[0][57]) ans.append(grid[0][58]) ans.append(grid[0][59]) ans.append(grid[0][60]) ans.append(grid[0][61]) ans.append(grid",
        "Correct Code": "N = len(grid) x, y = 0, 0 for i in range(N): for j in range(N): if grid[i][j] == 1: x, y = i, j mn = N * N if x > 0: mn = min(mn, grid[x - 1][y]) if x < N - 1: mn = min(mn, grid[x + 1][y]) if y > 0: mn = min(mn, grid[x][y - 1]) if y < N - 1: mn = min(mn, grid[x][y + 1]) return [1 if i % 2 == 0 else mn for i in range(k)]",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def minPath(grid, k): ans = [] visited = {} visited[grid[0][0]] = True ans.append(grid[0][0]) ans.append(grid[0][1]) ans.append(grid[0][2]) ans.append(grid[0][3]) ans.append(grid[0][4]) ans.append(grid[0][5]) ans.append(grid[0][6]) ans.append(grid[0][7]) ans.append(grid[0][8]) ans.append(grid[0][9]) ans.append(grid[0][10]) ans.append(grid[0][11]) ans.append(grid[0][12]) ans.append(grid[0][13]) ans.append(grid[0][14]) ans.append(grid[0][15]) ans.append(grid[0][16]) ans.append(grid[0][17]) ans.append(grid[0][18]) ans.append(grid[0][19]) ans.append(grid[0][20]) ans.append(grid[0][21]) ans.append(grid[0][22]) ans.append(grid[0][23]) ans.append(grid[0][24]) ans.append(grid[0][25]) ans.append(grid[0][26]) ans.append(grid[0][27]) ans.append(grid[0][28]) ans.append(grid[0][29]) ans.append(grid[0][30]) ans.append(grid[0][31]) ans.append(grid[0][32]) ans.append(grid[0][33]) ans.append(grid[0][34]) ans.append(grid[0][35]) ans.append(grid[0][36]) ans.append(grid[0][37]) ans.append(grid[0][38]) ans.append(grid[0][39]) ans.append(grid[0][40]) ans.append(grid[0][41]) ans.append(grid[0][42]) ans.append(grid[0][43]) ans.append(grid[0][44]) ans.append(grid[0][45]) ans.append(grid[0][46]) ans.append(grid[0][47]) ans.append(grid[0][48]) ans.append(grid[0][49]) ans.append(grid[0][50]) ans.append(grid[0][51]) ans.append(grid[0][52]) ans.append(grid[0][53]) ans.append(grid[0][54]) ans.append(grid[0][55]) ans.append(grid[0][56]) ans.append(grid[0][57]) ans.append(grid[0][58]) ans.append(grid[0][59]) ans.append(grid[0][60]) ans.append(grid[0][61]) ans.append(grid",
        "Ground Truth": "def minPath(grid, k): N = len(grid) x, y = 0, 0 for i in range(N): for j in range(N): if grid[i][j] == 1: x, y = i, j mn = N * N if x > 0: mn = min(mn, grid[x - 1][y]) if x < N - 1: mn = min(mn, grid[x + 1][y]) if y > 0: mn = min(mn, grid[x][y - 1]) if y < N - 1: mn = min(mn, grid[x][y + 1]) return [1 if i % 2 == 0 else mn for i in range(k)]",
        "highlight_llm": "31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96",
        "highlight_gt": "31,32,33,34,35,36,37,38,39,40,41,42"
    },
    {
        "Task ID": 130,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if n <= 1: return [1]",
        "Correct Code": "if n == 1: return [1, 3]",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def tri(n): if n <= 1: return [1] else: return tri(n - 1) + tri(n - 2) + tri(n + 1)",
        "Ground Truth": "def tri(n): if n == 0: return [1] if n == 1: return [1, 3] ans = [1, 3] for i in range(2, n + 1): if i % 2 == 0: ans.append(1 + i / 2) else: ans.append(ans[-1] + ans[-2] + 1 + (i + 1) / 2) return ans",
        "highlight_llm": "18,19",
        "highlight_gt": "19"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "return tri(n - 1) + tri(n - 2) + tri(n + 1)",
        "Correct Code": "for i in range(2, n + 1): if i % 2 == 0: ans.append(1 + i / 2) else: ans.append(ans[-1] + ans[-2] + 1 + (i + 1) / 2)",
        "Semantic Level": "Infinite Loop",
        "Semantic Error ID": "Ag1",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "21",
        "highlight_gt": "21,22,23,24,25"
    },
    {
        "Task ID": 131,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "reduce(operator.mul",
        "Correct Code": "",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def digits(n): return reduce(operator.mul, range(2, n + 1), 1)",
        "Ground Truth": "def digits(n): has_odd, prod = False, 1 for ch in str(n): if int(ch) % 2 == 1: has_odd = True prod *= int(ch) return 0 if not has_odd else prod",
        "highlight_llm": "9",
        "highlight_gt": ""
    },
    {
        "Task ID": 132,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "re",
        "Correct Code": "",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Import error",
        "Syntactic Error ID": "Bf1",
        "Generated Code": "def is_nested(string): brackets = re.findall(r'\\[.*?\\]', string) return len(brackets) > 0 and any(is_nested(b) for b in brackets)",
        "Ground Truth": "def is_nested(string): for i in range(len(string)): if string[i] == \"]\": continue cnt, max_nest = 0, 0 for j in range(i, len(string)): if string[j] == \"[\": cnt += 1 else: cnt -= 1 max_nest = max(max_nest, cnt) if cnt == 0: if max_nest >= 2: return True break return False",
        "highlight_llm": "14",
        "highlight_gt": ""
    },
    {
        "Task ID": 133,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "\"\"You are given a list of numbers. You need to return the sum of squared numbers in the given list, round each element in the list to the upper int(Ceiling) first. Examples: For lst = [1,2,3] the output should be 14 For lst = [1,4,9] the output should be 98 For lst = [1,3,5,7] the output should be 84 For lst = [1.4,4.2,0] the output should be 29 For lst = [-2.4,1,1] the output should be 6 \"\"",
        "Correct Code": "import math return sum(map(lambda x: math.ceil(x) ** 2, lst))",
        "Semantic Level": "Only comments",
        "Semantic Error ID": "Ae1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def sum_squares(lst):",
        "Ground Truth": "def sum_squares(lst): import math return sum(map(lambda x: math.ceil(x) ** 2, lst))",
        "highlight_llm": "2,3,4,5,6,7,8,9,10,13",
        "highlight_gt": "14,15"
    },
    {
        "Task ID": 134,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "return txt[-1].isalpha() and txt[-1] not in ",
        "Correct Code": "if len(txt) == 0: return False if len(txt) == 1: return txt.isalpha() return txt[-1].isalpha() and txt[-2] == \" \" ",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def check_if_last_char_is_a_letter(txt): return txt[-1].isalpha() and txt[-1] not in ",
        "Ground Truth": "def check_if_last_char_is_a_letter(txt): if len(txt) == 0: return False if len(txt) == 1: return txt.isalpha() return txt[-1].isalpha() and txt[-2] == \" ",
        "highlight_llm": "14",
        "highlight_gt": "14,15,16"
    },
    {
        "Task ID": 135,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "arr = sorted(arr) prev = arr[0] for x in arr[1:]: if x > prev: return -1 prev =",
        "Correct Code": "for i in range(len(arr) - 1, 0, -1): if not (arr[i] >= arr[i - 1]): return i return -1",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def can_arrange(arr): arr = sorted(arr) prev = arr[0] for x in arr[1:]: if x > prev: return -1 prev =",
        "Ground Truth": "def can_arrange(arr): for i in range(len(arr) - 1, 0, -1): if not (arr[i] >= arr[i - 1]): return i return -1",
        "highlight_llm": "11,12,13,14,15,16",
        "highlight_gt": "11,12,13,14"
    },
    {
        "Task ID": 136,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if len(positives) > len(negatives): return positives, None elif len(negatives) > len(positives): return negatives, None else: return positives, positives[0]",
        "Correct Code": "return None if neg == [] else max(neg), None if pos == [] else min(pos)",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def largest_smallest_integers(lst): positives = [x for x in lst if x > 0] negatives = [x for x in lst if x < 0] if len(positives) > len(negatives): return positives, None elif len(negatives) > len(positives): return negatives, None else: return positives, positives[0]",
        "Ground Truth": "def largest_smallest_integers(lst): neg = list(filter(lambda x: x < 0, lst)) pos = list(filter(lambda x: x > 0, lst)) return None if neg == [] else max(neg), None if pos == [] else min(pos)",
        "highlight_llm": "15,16,17,18,19,20",
        "highlight_gt": "15"
    },
    {
        "Task ID": 137,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "numbers.Real   numbers.Number",
        "Correct Code": "",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Import error",
        "Syntactic Error ID": "Bf1",
        "Generated Code": "def compare_one(a, b): if isinstance(a, numbers.Real): return lambda b: cmp(b, a) elif isinstance(a, numbers.Number): return lambda b: cmp(b, a.__",
        "Ground Truth": "def compare_one(a, b): num_a = float(str(a).replace(\",\", \".\")) num_b = float(str(b).replace(\",\", \".\")) if num_a == num_b: return None return a if num_a > num_b else b",
        "highlight_llm": "13,15",
        "highlight_gt": ""
    },
    {
        "Task ID": 138,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "n >= 4",
        "Correct Code": "n >= 8",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect constant",
        "Syntactic Error ID": "Be4",
        "Generated Code": "def is_equal_to_sum_even(n): return n >= 4 and n % 2 == 0",
        "Ground Truth": "def is_equal_to_sum_even(n): return n >= 8 and n % 2 == 0",
        "highlight_llm": "8",
        "highlight_gt": "8"
    },
    {
        "Task ID": 139,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "n * special_factorial(n-1)",
        "Correct Code": "for i in range(2, n + 1):fac *= i; ans *= fac",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def special_factorial(n): if n < 0: raise ValueError(\"n must be non-negative\") if n == 0: return 1 elif n == 1: return 1 else: return n * special_factorial(n-1)",
        "Ground Truth": "def special_factorial(n): fac, ans = 1, 1 for i in range(2, n + 1): fac *= i ans *= fac return ans",
        "highlight_llm": "20",
        "highlight_gt": "14,15,16"
    },
    {
        "Task ID": 140,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "re",
        "Correct Code": "",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Import error",
        "Syntactic Error ID": "Bf1",
        "Generated Code": "def fix_spaces(text): return re.sub(r'\\s+', '_', text)",
        "Ground Truth": "def fix_spaces(text): ans = text for i in range(len(text)-1, 2, -1): ans = ans.replace(\" \" * i, \"-\") return ans.replace(\" \", \"_\")",
        "highlight_llm": "12",
        "highlight_gt": ""
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "sub(r'\\s+', '_', text)",
        "Correct Code": "ans = ans.replace(\" \" * i, \"-\") return ans.replace(\" \", \"_\")",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "12",
        "highlight_gt": "14,15"
    },
    {
        "Task ID": 141,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "re",
        "Correct Code": "",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Import error",
        "Syntactic Error ID": "Bf1",
        "Generated Code": "def file_name_check(file_name): file_name_checker = re.compile(r'^[0-9]{3}\\.[a-zA-Z]{2}$') return file_name_checker.match(file_name)",
        "Ground Truth": "def file_name_check(file_name): if len(list(filter(lambda ch: ch.isdigit(), file_name))) > 3: return \"No\" f_list = file_name.split(\".\") if len(f_list) != 2: return \"No\" if len(f_list[0]) == 0: return \"No\" if not f_list[0][0].isalpha(): return \"No\" if f_list[1] not in [\"txt\", \"exe\", \"dll\"]: return \"No\" return \"Yes",
        "highlight_llm": "15",
        "highlight_gt": ""
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "re.compile(r'^[0-9]{3}\\.[a-zA-Z]{2}$'",
        "Correct Code": "if len(list(filter(lambda ch: ch.isdigit(), file_name))) > 3: return \"No\" if f_list[1] not in [\"txt\", \"exe\", \"dll\"]: return \"No",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "15",
        "highlight_gt": "15,21"
    },
    {
        "Task ID": 142,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "\"\"\" This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. Examples: For lst = [1,2,3] the output should be 6 For lst = [] the output should be 0 For lst = [-1,-5,2,-1,-5] the output should be -126 \"\"\"",
        "Correct Code": "ans = 0 for i, num in enumerate(lst): if i % 3 == 0: ans += num ** 2 elif i % 4 == 0: ans += num ** 3 else: ans += num return ans",
        "Semantic Level": "Only comments",
        "Semantic Error ID": "Ae1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def sum_squares(lst):",
        "Ground Truth": "def sum_squares(lst): ans = 0 for i, num in enumerate(lst): if i % 3 == 0: ans += num ** 2 elif i % 4 == 0: ans += num ** 3 else: ans += num return ans",
        "highlight_llm": "2,3,4,5,7,8,9,10,11",
        "highlight_gt": "12,13,14,15,16,17,18,19,20"
    },
    {
        "Task ID": 144,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if n == 0: return True if n == 1: return False numerator, denominator = map(int, x.split(\"/\")) if denominator == 0: return False if numerator == 0: return False return simplify(numerator / denominator, n)",
        "Correct Code": "x1, x2 = map(int, x.split(\"/\")) n1, n2 = map(int, n.split(\"/\")) return (x1 * n1) % (x2 * n2) == 0",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def simplify(x, n): if n == 0: return True if n == 1: return False numerator, denominator = map(int, x.split(\"/\")) if denominator == 0: return False if numerator == 0: return False return simplify(numerator / denominator, n)",
        "Ground Truth": "def simplify(x, n): x1, x2 = map(int, x.split(\"/\")) n1, n2 = map(int, n.split(\"/\")) return (x1 * n1) % (x2 * n2) == 0",
        "highlight_llm": "13,14,15,16,17,18,19,20,21,22",
        "highlight_gt": "18,19,20"
    },
    {
        "Task ID": 145,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "digits = [int(d) for d in str(nums)]",
        "Correct Code": "def weight(x): x_list = list(str(x)) if x_list[0] == \"-\": x_list = x_list[1:] x_list = list(map(int, x_list)) x_list[0] = -x_list[0] else: x_list = list(map(int, x_list)) return sum(x_list)",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def order_by_points(nums): digits = [int(d) for d in str(nums)] digits.sort() return digits",
        "Ground Truth": "def order_by_points(nums): def weight(x): x_list = list(str(x)) if x_list[0] == \"-\": x_list = x_list[1:] x_list = list(map(int, x_list)) x_list[0] = -x_list[0] else: x_list = list(map(int, x_list)) return sum(x_list) return sorted(nums, key=weight)",
        "highlight_llm": "12",
        "highlight_gt": "12,13,14,15,16,17,18,19,20"
    },
    {
        "Task ID": 146,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "count = 0",
        "Correct Code": "ans, odd = 0, [\"1\", \"3\", \"5\", \"7\", \"9\"]",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def specialFilter(nums): count = 0 for num in nums: if num > 10: if num % 2 == 0: count += 1 return count",
        "Ground Truth": "def specialFilter(nums): ans, odd = 0, [\"1\", \"3\", \"5\", \"7\", \"9\"] for num in nums: if num > 10 and str(num)[0] in odd and str(num)[-1] in odd: ans += 1 return ans",
        "highlight_llm": "10",
        "highlight_gt": "9"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "if num % 2 == 0:",
        "Correct Code": "if num > 10 and str(num)[0] in odd and str(num)[-1] in odd:",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "14",
        "highlight_gt": "11"
    },
    {
        "Task ID": 147,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "triples = 0 for i in range(n): for j in range(i+1, n): for k in range(j+1, n): if i*i - j + k % 3 == 0 and i*i - j + k % 3 == 0 and i*i - j + k % 3 == 0: triples += 1 return triples",
        "Correct Code": "if n <= 2: return False one_cnt = 1 + (n - 2) // 3 * 2 + (n - 2) % 3 zero_cnt = n - one_cnt return one_cnt * (one_cnt - 1) * (one_cnt - 2) // 6 + zero_cnt * (zero_cnt - 1) * (zero_cnt - 2) // 6",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def get_max_triples(n): triples = 0 for i in range(n): for j in range(i+1, n): for k in range(j+1, n): if i*i - j + k % 3 == 0 and i*i - j + k % 3 == 0 and i*i - j + k % 3 == 0: triples += 1 return triples",
        "Ground Truth": "def get_max_triples(n): if n <= 2: return False one_cnt = 1 + (n - 2) // 3 * 2 + (n - 2) % 3 zero_cnt = n - one_cnt return one_cnt * (one_cnt - 1) * (one_cnt - 2) // 6 + zero_cnt * (zero_cnt - 1) * (zero_cnt - 2) // 6",
        "highlight_llm": "15,16,17,18,19,20,21",
        "highlight_gt": "15,16,17,18"
    },
    {
        "Task ID": 148,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "planet1 = planet1.lower() planet2 = planet2.lower() planet1 = planet1.upper() planet2 = planet2.upper()",
        "Correct Code": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"] if planet1 not in planets or planet2 not in planets: return tuple() i1, i2 = planets.index(planet1), planets.index(planet2) if i1 > i2: i1, i2 = i2, i1 return tuple(planets[i1 + 1 : i2])",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def bf(planet1, planet2): planet1 = planet1.lower() planet2 = planet2.lower() planet1 = planet1.upper() planet2 = planet2.upper()",
        "Ground Truth": "def bf(planet1, planet2): planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"] if planet1 not in planets or planet2 not in planets: return tuple() i1, i2 = planets.index(planet1), planets.index(planet2) if i1 > i2: i1, i2 = i2, i1 return tuple(planets[i1 + 1 : i2])",
        "highlight_llm": "18,19,21,22",
        "highlight_gt": "17,18,19,20,21"
    },
    {
        "Task ID": 149,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if len(word) % 2!= 0  else",
        "Correct Code": "lambda s: len(s) % 2 == 0",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def sorted_list_sum(lst): lst = sorted(lst) odd_lst = [] for word in lst: if len(word) % 2!= 0: odd_lst.append(word) else: odd_lst.append(word) return odd_lst",
        "Ground Truth": "def sorted_list_sum(lst): from functools import cmp_to_key def cmp(s: str, t: str): if len(s) != len(t): return len(s) - len(t) return -1 if s < t else 1 return sorted(list(filter(lambda s: len(s) % 2 == 0, lst)), key=cmp_to_key(cmp))",
        "highlight_llm": "19,21",
        "highlight_gt": "19"
    },
    {
        "Task ID": 150,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if n % x == 0:",
        "Correct Code": "def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def x_or_y(n, x, y): if n % x == 0: return y else: return x",
        "Ground Truth": "def x_or_y(n, x, y): def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) return x if is_prime(n) else y",
        "highlight_llm": "10",
        "highlight_gt": "10,11"
    },
    {
        "Task ID": 151,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "if number % 2 == 0",
        "Correct Code": "if num % 2 == 1 and num > 0 and \".\" not in str(num)",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def double_the_difference(lst): if len(lst) == 0: return 0 sum_of_squares = 0 for number in lst: if number % 2 == 0: sum_of_squares += number**2 else: sum_of_squares += number**2 return sum_of_squares",
        "Ground Truth": "def double_the_difference(lst): ans = 0 for num in lst: if num % 2 == 1 and num > 0 and \".\" not in str(num): ans += num ** 2 return ans",
        "highlight_llm": "20",
        "highlight_gt": "15"
    },
    {
        "Task ID": 152,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "\"\"I think we all remember that feeling when the result of some long-awaited event is finally known. The feelings and thoughts you have at that moment are definitely worth noting down and comparing. Your task is to determine if a person correctly guessed the results of a number of matches. You are given two arrays of scores and guesses of equal length, where each index shows a match. Return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score. example: compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3] compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6] \"\"",
        "Correct Code": "return [abs(game[i] - guess[i]) for i in range(len(game))]",
        "Semantic Level": "Only comments",
        "Semantic Error ID": "Ae1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def compare(game,guess):",
        "Ground Truth": "def compare(game,guess): return [abs(game[i] - guess[i]) for i in range(len(game))]",
        "highlight_llm": "2,3,4,5,6,7,8,11,13,14,15",
        "highlight_gt": "16"
    },
    {
        "Task ID": 153,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "extensions = map(str.upper, extensions) extensions = map(str.lower, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(",
        "Correct Code": "def strength(s: str) -> int: CAP, SM = 0, 0 for ch in s: if ch.isupper(): CAP += 1 if ch.islower(): SM += 1 return CAP - SM max_strength = max(map(strength, extensions)) for e in extensions: if strength(e) == max_strength: return class_name + \".\" + e",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def Strongest_Extension(class_name, extensions): extensions = map(str.upper, extensions) extensions = map(str.lower, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(int, extensions) extensions = map(str, extensions) extensions = map(",
        "Ground Truth": "def Strongest_Extension(class_name, extensions): def strength(s: str) -> int: CAP, SM = 0, 0 for ch in s: if ch.isupper(): CAP += 1 if ch.islower(): SM += 1 return CAP - SM max_strength = max(map(strength, extensions)) for e in extensions: if strength(e) == max_strength: return class_name + \".\" + e",
        "highlight_llm": "18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81",
        "highlight_gt": "18,19,20,21,22,23,24,25,26,27"
    },
    {
        "Task ID": 154,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word cycpattern_check(\"abcd\",\"abd\") => False cycpattern_check(\"hello\",\"ell\") => True cycpattern_check(\"whassup\",\"psus\") => False cycpattern_check(\"abab\",\"baa\") => True cycpattern_check(\"efef\",\"eeff\") => False cycpattern_check(\"himenss\",\"simen\") => True \"\"",
        "Correct Code": "if a == b: return True if b == \"\": return True for i in range(0, len(b)): if b[i:] + b[:i] in a: return True return False",
        "Semantic Level": "Only comments",
        "Semantic Error ID": "Ae1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def cycpattern_check(a , b):",
        "Ground Truth": "def cycpattern_check(a , b): if a == b: return True if b == \"\": return True for i in range(0, len(b)): if b[i:] + b[:i] in a: return True return False",
        "highlight_llm": "2,3,4,5,6,7,8,10",
        "highlight_gt": "11,12,13,14,15,16,17,18"
    },
    {
        "Task ID": 155,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "even, odd = 1, 0",
        "Correct Code": "even, odd = 0, 0",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect constant",
        "Syntactic Error ID": "Be4",
        "Generated Code": "def even_odd_count(num): even, odd = 1, 0 while num > 0: even = even + num % 2 num = num // 2 odd = odd + num % 2 return even, odd",
        "Ground Truth": "def even_odd_count(num): even, odd = 0, 0 for ch in str(num): if ch in \"02468\": even += 1 if ch in \"13579\": odd += 1 return even, odd",
        "highlight_llm": "8",
        "highlight_gt": "8"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "while num > 0",
        "Correct Code": "for ch in str(num)",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "While error",
        "Syntactic Error ID": "Bb2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "9",
        "highlight_gt": "9"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 3,
        "Incorrect Code": "even = even + num % 2 num = num // 2 odd = odd + num % 2",
        "Correct Code": "f ch in \"02468\": even += 1 if ch in \"13579\": odd += 1",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad4",
        "Syntactic Level": "Incorrect arithmetic",
        "Syntactic Error ID": "Be1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "10,11,12",
        "highlight_gt": "10,11"
    },
    {
        "Task ID": 156,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "number = int(number) if number < 1: return 'xix' if number < 1000: return str(number).lower() numerals = [str(number//i) for i in range(1, 10)] numerals.append(str(number%i)) return ''.join(numerals)",
        "Correct Code": "m = [\"\", \"m\"] c = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"] x = [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"] i = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"] thousands = m[number // 1000] hundreds = c[(number % 1000) // 100] tens = x[(number % 100) // 10] ones = i[number % 10] return thousands + hundreds + tens + ones",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def int_to_mini_roman(number): number = int(number) if number < 1: return 'xix' if number < 1000: return str(number).lower() numerals = [str(number//i) for i in range(1, 10)] numerals.append(str(number%i)) return ''.join(numerals)",
        "Ground Truth": "def int_to_mini_roman(number): m = [\"\", \"m\"] c = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"] x = [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"] i = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"] thousands = m[number // 1000] hundreds = c[(number % 1000) // 100] tens = x[(number % 100) // 10] ones = i[number % 10] return thousands + hundreds + tens + ones",
        "highlight_llm": "12,13,14,15,16,17,18,19",
        "highlight_gt": "12,13,14,15,16,17,18,19,20"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "(number%i)",
        "Correct Code": "",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "18",
        "highlight_gt": ""
    },
    {
        "Task ID": 157,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return abs(a - b) <= abs(c - a) <= abs(c - b)",
        "Correct Code": "return abs(a - b) <= abs(c - a) <= abs(c - b)",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def right_angle_triangle(a, b, c): return abs(a - b) <= abs(c - a) <= abs(c - b)",
        "Ground Truth": "def right_angle_triangle(a, b, c): return a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2",
        "highlight_llm": "11",
        "highlight_gt": "12"
    },
    {
        "Task ID": 158,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "word_count={}   word_count.sort(key=word_count.get, reverse=True)",
        "Correct Code": "",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def find_max(words): words = set(words) word_count = {} for word in words: word_count[word] = word_count.get(word, 0) + 1 word_count.sort(key=word_count.get, reverse=True) return word_count[0]",
        "Ground Truth": "def find_max(words): mx_ch_cnt, ans = 0, \"\" for word in words: ch_cnt = len(set(word)) if ch_cnt > mx_ch_cnt or (ch_cnt == mx_ch_cnt and word < ans): mx_ch_cnt, ans = ch_cnt, word return ans",
        "highlight_llm": "12,15",
        "highlight_gt": ""
    },
    {
        "Task ID": 159,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "\"\" You're a hungry rabbit, and you already have eaten a certain number of carrots, but now you need to eat more carrots to complete the day's meals. you should return an array of [ total number of eaten carrots after your meals, the number of carrots left after your meals ] if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry. Example: * eat(5, 6, 10) -> [11, 4] * eat(4, 8, 9) -> [12, 1] * eat(1, 10, 10) -> [11, 0] * eat(2, 11, 5) -> [7, 0] Variables: @number : integer the number of carrots that you have eaten. @need : integer the number of carrots that you need to eat. @remaining : integer the number of remaining carrots thet exist in stock Constrain: * 0 <= number <= 1000 * 0 <= need <= 1000 * 0 <= remaining <= 1000 Have fun :) \"\"",
        "Correct Code": "if need <= remaining: return [number + need, remaining - need] else: return [number + remaining, 0]",
        "Semantic Level": "Only comments",
        "Semantic Error ID": "Ae1",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def eat(number, need, remaining):",
        "Ground Truth": "def eat(number, need, remaining): if need <= remaining: return [number + need, remaining - need] else: return [number + remaining, 0]",
        "highlight_llm": "2,3,4,5,6,7,9,10,11,12,13,15,16,17,18,19,20,21,23,24,25,26,28,29",
        "highlight_gt": "30,31,32,33"
    },
    {
        "Task ID": 160,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "operator = operator.copy() operator.remove('+') operator.remove('-') operator.remove('*') operator.remove('/') operator.remove('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**')",
        "Correct Code": "exp = \"\" for i in range(len(operator)): exp += str(operand[i]) + operator[i] exp += str(operand[-1]) return eval(exp)",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def do_algebra(operator, operand): operator = operator.copy() operator.remove('+') operator.remove('-') operator.remove('*') operator.remove('/') operator.remove('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**') operator.append('**')",
        "Ground Truth": "def do_algebra(operator, operand): exp = \"\" for i in range(len(operator)): exp += str(operand[i]) + operator[i] exp += str(operand[-1]) return eval(exp)",
        "highlight_llm": "26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,11-",
        "highlight_gt": "26,27,28,29,30"
    },
    {
        "Task ID": 161,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "ans = \"\"  return ans",
        "Correct Code": "ans, has_letter = \"\", False  return ans if has_letter else s[::-1]",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def solve(s): ans = \"\" for i in range(len(s)): if s[i] in \"abcdefghijklmnopqrstuvwxyz\": ans += s[i].upper() else: ans += s[i] return ans",
        "Ground Truth": "def solve(s): ans, has_letter = \"\", False for ch in s: if ch.isalpha(): has_letter = True ans += ch.swapcase() else: ans += ch return ans if has_letter else s[::-1]",
        "highlight_llm": "12,18",
        "highlight_gt": "12,19"
    },
    {
        "Task ID": 162,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "if text == \"\": return None",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def string_to_md5(text): return hashlib.md5(text.encode('utf-8')).hexdigest()",
        "Ground Truth": "def string_to_md5(text): if text == \"\": return None import hashlib m = hashlib.md5() m.update(text.encode(\"utf-8\")) return m.hexdigest()",
        "highlight_llm": "",
        "highlight_gt": "8"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "hashlib",
        "Correct Code": "import hashlib",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Import error",
        "Syntactic Error ID": "Bf1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "8",
        "highlight_gt": "9"
    },
    {
        "Task ID": 163,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "digits = [] while a > 0: digits.append(a % 10) a //= 10 digits.reverse() return digits",
        "Correct Code": "if a > b: a, b = b, a return [i for i in range(a, min(b + 1, 10)) if i % 2 == 0]",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def generate_integers(a, b): digits = [] while a > 0: digits.append(a % 10) a //= 10 digits.reverse() return digits",
        "Ground Truth": "def generate_integers(a, b): if a > b: a, b = b, a return [i for i in range(a, min(b + 1, 10)) if i % 2 == 0]",
        "highlight_llm": "11,12,13,14,15,16",
        "highlight_gt": "11,12"
    } 
]