[
    {
        "Task ID": 1,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "cnt, group, results = 0, \"\", [] for ch in paren_string: if ch == \"(\": cnt += 1 if ch == \")\": cnt -= 1 if ch != \" \": group += ch if cnt == 0: if group != \"\": results.append(group) group = \"\" return results",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "from typing import List def separate_paren_groups(paren_string: str) -> List[str]: pass",
        "Ground Truth": "from typing import List def separate_paren_groups(paren_string: str) -> List[str]: cnt, group, results = 0, \"\", [] for ch in paren_string: if ch == \"(\": cnt += 1 if ch == \")\": cnt -= 1 if ch != \" \": group += ch if cnt == 0: if group != \"\": results.append(group) group = \"\" return results",
        "highlight_llm": "12",
        "highlight_gt": "17,18,19,20,21,22,23,24,25"
    },
    {
        "Task ID": 5,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return [numbers[i] for i in range(len(numbers)) if i % 2 == 0] + [delimeter] + [numbers[i] for i in range(len(numbers)) if i % 2!= 0]",
        "Correct Code": "res = [] for i in range(len(numbers)): res.append(numbers[i]) if i != len(numbers) - 1: res.append(delimeter) return res",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "from typing import List def intersperse(numbers: List[int], delimeter: int) -> List[int]: return [numbers[i] for i in range(len(numbers)) if i % 2 == 0] + [delimeter] + [numbers[i] for i in range(len(numbers)) if i % 2!= 0]",
        "Ground Truth": "from typing import List def intersperse(numbers: List[int], delimeter: int) -> List[int]: res = [] for i in range(len(numbers)): res.append(numbers[i]) if i != len(numbers) - 1: res.append(delimeter) return res",
        "highlight_llm": "11",
        "highlight_gt": "11,12,13,14,15,16"
    },
    {
        "Task ID": 6,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "def count_depth(s: str) -> int: max_depth, cnt = 0, 0 for ch in s: if ch == \"(\": cnt += 1 if ch == \")\": cnt -= 1 max_depth = max(max_depth, cnt) return max_depth return [count_depth(s) for s in paren_string.split(\" \") if s != \"\"]",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "from typing import List def parse_nested_parens(paren_string: str) -> List[int]: pass",
        "Ground Truth": "from typing import List def parse_nested_parens(paren_string: str) -> List[int]: def count_depth(s: str) -> int: max_depth, cnt = 0, 0 for ch in s: if ch == \"(\": cnt += 1 if ch == \")\": cnt -= 1 max_depth = max(max_depth, cnt) return max_depth return [count_depth(s) for s in paren_string.split(\" \") if s != \"\"]",
        "highlight_llm": "12",
        "highlight_gt": "17,18,19,20,21,22,23,25"
    },
    {
        "Task ID": 8,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "reduce",
        "Correct Code": "",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "from typing import List, Tuple def sum_product(numbers: List[int]) -> Tuple[int, int]: return (sum(numbers), reduce(lambda x, y: x * y, numbers, 1))",
        "Ground Truth": "from typing import List, Tuple def rolling_max(numbers: List[int]) -> List[int]: return [max(numbers[:(i+1)]) for i in range(len(numbers))]",
        "highlight_llm": "12",
        "highlight_gt": ""
    },
    {
        "Task ID": 10,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "range(len(string), 0, -1):",
        "Correct Code": "range(len(string)):",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "def is_palindrome(string: str) -> bool: \"\"\" Test if given string is a palindrome \"\"\" return string == string[::-1] def make_palindrome(string: str) -> str: if is_palindrome(string): return string for i in range(len(string), 0, -1): if is_palindrome(string[:i]): return string + string[:i-1][::-1] return string + string[::-1]",
        "Ground Truth": "def is_palindrome(string: str) -> bool: \"\"\" Test if given string is a palindrome \"\"\" return string == string[::-1] def make_palindrome(string: str) -> str: if is_palindrome(string): return string for i in range(len(string)): if is_palindrome(string[i:]): return string + string[i-1::-1]",
        "highlight_llm": "20",
        "highlight_gt": "20"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "if is_palindrome(string[:i])",
        "Correct Code": "if is_palindrome(string[i:]):",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "21",
        "highlight_gt": "21"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 3,
        "Incorrect Code": "return string + string[:i-1][::-1] return string + string[::-1]",
        "Correct Code": "return string + string[i-1::-1]",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "22,23",
        "highlight_gt": "22"
    },
    {
        "Task ID": 14,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "[string[:i]",
        "Correct Code": "string[:(i + 1)]",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "from typing import List def all_prefixes(string: str) -> List[str]: return [string[:i] for i in range(len(string) + 1)]",
        "Ground Truth": "from typing import List def all_prefixes(string: str) -> List[str]: return [string[:(i + 1)] for i in range(len(string))]",
        "highlight_llm": "9",
        "highlight_gt": "9"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "range(len(string) + 1)",
        "Correct Code": "range(len(string))",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "9",
        "highlight_gt": "9"
    },
    {
        "Task ID": 17,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "def count_beats(note: str) -> int: if note == \"o\": return 4 elif note == \"o|\": return 2 elif note == \".|\": return 1 if music_string == \"\": return [] return list(map(count_beats, music_string.split(\" \")))",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "from typing import List def parse_music(music_string: str) -> List[int]: pass",
        "Ground Truth": "from typing import List def parse_music(music_string: str) -> List[int]: def count_beats(note: str) -> int: if note == \"o\": return 4 elif note == \"o|\": return 2 elif note == \".|\": return 1 if music_string == \"\": return [] return list(map(count_beats, music_string.split(\" \")))",
        "highlight_llm": "17",
        "highlight_gt": "17,18,19,20,22,23"
    },
    {
        "Task ID": 18,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return string.count(substring)",
        "Correct Code": "occurences = 0 for i in range(len(string)): if string[i:].startswith(substring): occurences += 1 return occurences",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def how_many_times(string: str, substring: str) -> int: return string.count(substring)",
        "Ground Truth": "def how_many_times(string: str, substring: str) -> int: occurences = 0 for i in range(len(string)): if string[i:].startswith(substring): occurences += 1 return occurences",
        "highlight_llm": "10",
        "highlight_gt": "10,11,12,13,14"
    },
    {
        "Task ID": 19,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "to_int = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9} if numbers == \"\": return \"\"",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "from typing import List def sort_numbers(numbers: str) -> str: return \" \".join(sorted(numbers.split()))",
        "Ground Truth": "from typing import List def sort_numbers(numbers: str) -> str: to_int = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9} if numbers == \"\": return \"\" return \" \".join(sorted(numbers.split(\" \"), key=lambda n: to_int[n]))",
        "highlight_llm": "",
        "highlight_gt": "12,14"
    },
    {
        "Task ID": 20,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return numbers[0], numbers[1]",
        "Correct Code": "min_diff = float(\"inf\") min_pair = None for l, r in zip(numbers[:-1], numbers[1:]): diff = r - l if diff < min_diff: min_diff = diff min_pair = (l, r) return min_pair",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "from typing import List, Tuple def find_closest_elements(numbers: List[float]) -> Tuple[float, float]: numbers.sort() return numbers[0], numbers[1]",
        "Ground Truth": "from typing import List, Tuple def find_closest_elements(numbers: List[float]) -> Tuple[float, float]: numbers.sort() min_diff = float(\"inf\") min_pair = None for l, r in zip(numbers[:-1], numbers[1:]): diff = r - l if diff < min_diff: min_diff = diff min_pair = (l, r) return min_pair",
        "highlight_llm": "13",
        "highlight_gt": "13,14,15,16,17,18,19,20"
    },
    {
        "Task ID": 21,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "n / max(numbers)",
        "Correct Code": "ma, mi = max(numbers), min(numbers) k = 1 / (ma - mi) (x - mi) * k",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "from typing import List def rescale_to_unit(numbers: List[float]) -> List[float]: return [n / max(numbers) for n in numbers]",
        "Ground Truth": "from typing import List def rescale_to_unit(numbers: List[float]) -> List[float]: ma, mi = max(numbers), min(numbers) k = 1 / (ma - mi) return list(map(lambda x: (x - mi) * k, numbers))",
        "highlight_llm": "10",
        "highlight_gt": "10,11,12"
    },
    {
        "Task ID": 22,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if isinstance(value, int)",
        "Correct Code": "type(x) == int",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "from typing import List, Any def filter_integers(values: List[Any]) -> List[int]: return [value for value in values if isinstance(value, int)]",
        "Ground Truth": "from typing import List, Any def filter_integers(values: List[Any]) -> List[int]: return list(filter(lambda x: type(x) == int, values))",
        "highlight_llm": "11",
        "highlight_gt": "11"
    },
    {
        "Task ID": 24,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "range(n-1, 1, -1)",
        "Correct Code": "range(2, n)",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "def largest_divisor(n: int) -> int: for i in range(n-1, 1, -1): if n % i == 0: return i return 1",
        "Ground Truth": "def largest_divisor(n: int) -> int: for i in range(2, n): if n % i == 0: return n // i return 1",
        "highlight_llm": "6",
        "highlight_gt": "6"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "return i",
        "Correct Code": "return n // i",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "8",
        "highlight_gt": "7"
    },
    {
        "Task ID": 25,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "import math fact = [] i = 2 while i <= int(math.sqrt(n) + 1): if n % i == 0: fact.append(i) n //= i else: i += 1 if n > 1: fact.append(n) return fact",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "from typing import List def factorize(n: int) -> List[int]: pass",
        "Ground Truth": "from typing import List def factorize(n: int) -> List[int]: import math fact = [] i = 2 while i <= int(math.sqrt(n) + 1): if n % i == 0: fact.append(i) n //= i else: i += 1 if n > 1: fact.append(n) return fact",
        "highlight_llm": "15",
        "highlight_gt": "15,16,17,18,19,20,21,22,24,25,26,27"
    },
    {
        "Task ID": 26,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return list(set(numbers))",
        "Correct Code": "num_cnt = dict() for number in numbers: if number not in num_cnt: num_cnt[number] = 0 num_cnt[number] += 1 return [number for number in numbers if num_cnt[number] == 1]",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "from typing import List def remove_duplicates(numbers: List[int]) -> List[int]: return list(set(numbers))",
        "Ground Truth": "from typing import List def remove_duplicates(numbers: List[int]) -> List[int]: num_cnt = dict() for number in numbers: if number not in num_cnt: num_cnt[number] = 0 num_cnt[number] += 1 return [number for number in numbers if num_cnt[number] == 1]",
        "highlight_llm": "10",
        "highlight_gt": "10,11,12,13,14,15"
    },
    {
        "Task ID": 31,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "if n == 1",
        "Correct Code": "if n <= 1",
        "Semantic Level": "Miss condition",
        "Semantic Error ID": "Aa1",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def is_prime(n): if n == 1: return False for i in range(2, n): if n % i == 0: return False return True",
        "Ground Truth": "def is_prime(n): if n <= 1: return False n_sqrt = 1 while n_sqrt ** 2 < n: n_sqrt += 1 for i in range(2, min(n_sqrt + 1, n)): if n % i == 0: return False return True",
        "highlight_llm": "18",
        "highlight_gt": "18"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "n_sqrt = 1 while n_sqrt ** 2 < n: n_sqrt += 1",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "19,20"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 3,
        "Incorrect Code": "in range(2, n)",
        "Correct Code": "in range(2, min(n_sqrt + 1, n))",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "20",
        "highlight_gt": "21"
    },
    {
        "Task ID": 32,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if len(xs) % 2 == 1: raise ValueError(\"find_zero takes list xs having even number of coefficients\") xs = xs[::-1] for i, coeff in enumerate(xs): if coeff!= 0: break xs = xs[i:] xs = xs[::-1] xs = xs[1:] xs = xs[::-1] for i, coeff in enumerate(xs): if coeff!= 0: break xs = xs[i:] xs = xs[::-1] xs = xs[1:] xs = xs[::-1] for i, coeff in enumerate(xs): if coeff!= 0: break xs = xs[i:] xs = xs[::-1] xs = xs[1:] xs = xs[::-1] for i, coeff in enumerate(xs): if coeff!= 0: break xs = xs[i:] xs = xs[::-1] xs = xs[1:] xs = xs[::-1] for i, coeff in enumerate(xs): if coeff!= 0: break xs = xs[i:] xs = xs[::-1] xs = xs[1:] xs = xs[::-1] for i, coeff in enumerate(xs): if coeff!= 0: break xs = xs[i:] xs = xs[::-1] xs = xs[1:] xs = xs[::-1] for i, coeff in enumerate(xs): if coeff!= 0: break xs = xs[i:] xs = xs[::-1] xs = xs[1:] xs = xs[::-1] for i, coeff in enumerate(xs): if coeff!= 0: break xs = xs[i:] xs = xs[::-1] xs = xs[1:] xs = xs[::-1] for i, coeff in enumerate(xs): if coeff!= 0: break xs = xs[i:] xs = xs[::-1] xs = xs[1:] xs = xs[::-1] for i, coeff in enumerate(xs): if coeff!= 0: break xs = xs[i:] xs = xs[::-1]",
        "Correct Code": "dxs = [xs[i] * i for i in range(1, len(xs))] def func(x): return poly(xs, x) def derivative(x): return poly(dxs, x) x, tol = 0, 1e-5 for _ in range(1000): fx = func(x) dfx = derivative(x) if abs(fx) < tol: break x = x - fx / dfx return x",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "import math def poly(xs: list, x: float): \"\"\" Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \"\"\" return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)]) def find_zero(xs: list): if len(xs) % 2 == 1: raise ValueError(\"find_zero takes list xs having even number of coefficients\") xs = xs[::-1] for i, coeff in enumerate(xs): if coeff!= 0: break xs = xs[i:] xs = xs[::-1] xs = xs[1:] xs = xs[::-1] for i, coeff in enumerate(xs): if coeff!= 0: break xs = xs[i:] xs = xs[::-1] xs = xs[1:] xs = xs[::-1] for i, coeff in enumerate(xs): if coeff!= 0: break xs = xs[i:] xs = xs[::-1] xs = xs[1:] xs = xs[::-1] for i, coeff in enumerate(xs): if coeff!= 0: break xs = xs[i:] xs = xs[::-1] xs = xs[1:] xs = xs[::-1] for i, coeff in enumerate(xs): if coeff!= 0: break xs = xs[i:] xs = xs[::-1] xs = xs[1:] xs = xs[::-1] for i, coeff in enumerate(xs): if coeff!= 0: break xs = xs[i:] xs = xs[::-1] xs = xs[1:] xs = xs[::-1] for i, coeff in enumerate(xs): if coeff!= 0: break xs = xs[i:] xs = xs[::-1] xs = xs[1:] xs = xs[::-1] for i, coeff in enumerate(xs): if coeff!= 0: break xs = xs[i:] xs = xs[::-1] xs = xs[1:] xs = xs[::-1] for i, coeff in enumerate(xs): if coeff!= 0: break xs = xs[i:] xs = xs[::-1] xs = xs[1:] xs = xs[::-1] for i, coeff in enumerate(xs): if coeff!= 0: break xs = xs[i:] xs = xs[::-1]",
        "Ground Truth": "import math def poly(xs: list, x: float): \"\"\" Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \"\"\" return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)]) def find_zero(xs: list): dxs = [xs[i] * i for i in range(1, len(xs))] def func(x): return poly(xs, x) def derivative(x): return poly(dxs, x) x, tol = 0, 1e-5 for _ in range(1000): fx = func(x) dfx = derivative(x) if abs(fx) < tol: break x = x - fx / dfx return x",
        "highlight_llm": "24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94",
        "highlight_gt": "24,25,26,27,28,30,31,32,33,34,35,37"
    },
    {
        "Task ID": 33,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "third = [l[i] for i in range(len(l)) if i % 3 == 0] third.sort()",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def sort_third(l: list): l_prime = [] for i in range(len(l)): if i % 3 == 0: l_prime.append(l[i]) else: l_prime.append(sorted(l)[i]) return l_prime",
        "Ground Truth": "def sort_third(l: list): third = [l[i] for i in range(len(l)) if i % 3 == 0] third.sort() return [third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]",
        "highlight_llm": "",
        "highlight_gt": "10,11"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "append(l[i]) append(sorted(l)[i])",
        "Correct Code": "third[i // 3] l[i]",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "13,15",
        "highlight_gt": "12"
    },
    {
        "Task ID": 36,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "range(1, n)",
        "Correct Code": "range(n)",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "def fizz_buzz(n: int): return sum(1 for i in range(1, n) if (i % 11 == 0 or i % 13 == 0) and i % 7 == 0)",
        "Ground Truth": "def fizz_buzz(n: int): cnt = 0 for i in range(n): if i % 11 == 0 or i % 13 == 0: cnt += len(list(filter(lambda c: c == \"7\", str(i)))) return cnt",
        "highlight_llm": "10",
        "highlight_gt": "11"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "if (i % 11 == 0 or i % 13 == 0) and i % 7 == 0",
        "Correct Code": "if i % 11 == 0 or i % 13 == 0 list(filter(lambda c: c == \"7\", str(i))",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "10",
        "highlight_gt": "12,13"
    },
    {
        "Task ID": 37,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "even = [l[i] for i in range(len(l)) if i % 2 == 0] even.sort()",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def sort_even(l: list): l_sorted = [] for i in range(len(l)): if i % 2 == 0: l_sorted.append(l[i]) else: l_sorted.append(min(l[i], l_sorted[-1])) return l_sorted",
        "Ground Truth": "def sort_even(l: list): even = [l[i] for i in range(len(l)) if i % 2 == 0] even.sort() return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]",
        "highlight_llm": "",
        "highlight_gt": "10,11"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "append(l[i]) append(min(l[i], l_sorted[-1]))",
        "Correct Code": "even[i // 2] l[i]",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "13,15",
        "highlight_gt": "12"
    },
    {
        "Task ID": 39,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if n == 1: return 2 if n == 2: return 3 if n == 3: return 5 if n == 4: return 13 if n == 5: return 89 if n == 6: return 109 if n == 7: return 109 if n == 8: return 121 if n == 9: return 149 if n == 10: return 197 if n == 11: return 293 if n == 12: return 449 if n == 13: return 677 if n == 14: return 1009 if n == 15: return 1493 if n == 16: return 2241 if n == 17: return 3349 if n == 18: return 5021 if n == 19: return 7553 if n == 20: return 11349 if n == 21: return 16761 if n == 22: return 24169 if n == 23: return 34951 if n == 24: return 51129 if n == 25: return 76081 if n == 26: return 113909 if n == 27: return 169001 if n == 28: return 247609 if n == 29: return 360091 if n == 30: return 530209 if n == 31: return 787391 if n == 32: return 1163009 if n == 33: return 1726091 if n == 34: return 2536769 if n ==",
        "Correct Code": "import random def miller_rabin(n, k=10): \"\"\"Test if n is prime using the Miller-Rabin primality test.\"\"\" if n < 2: return False if n == 2 or n == 3: return True if n % 2 == 0: return False r = 0 d = n - 1 while d % 2 == 0: r += 1 d //= 2 for _ in range(k): a = random.randint(2, n - 2) x = pow(a, d, n) if x == 1 or x == n - 1: continue for _ in range(r - 1): x = pow(x, 2, n) if x == n - 1: break else: return False return True c_prime = 0 a, b = 0, 1 while c_prime < n: a, b = b, a + b if miller_rabin(b): c_prime += 1 return b",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def prime_fib(n: int): if n == 1: return 2 if n == 2: return 3 if n == 3: return 5 if n == 4: return 13 if n == 5: return 89 if n == 6: return 109 if n == 7: return 109 if n == 8: return 121 if n == 9: return 149 if n == 10: return 197 if n == 11: return 293 if n == 12: return 449 if n == 13: return 677 if n == 14: return 1009 if n == 15: return 1493 if n == 16: return 2241 if n == 17: return 3349 if n == 18: return 5021 if n == 19: return 7553 if n == 20: return 11349 if n == 21: return 16761 if n == 22: return 24169 if n == 23: return 34951 if n == 24: return 51129 if n == 25: return 76081 if n == 26: return 113909 if n == 27: return 169001 if n == 28: return 247609 if n == 29: return 360091 if n == 30: return 530209 if n == 31: return 787391 if n == 32: return 1163009 if n == 33: return 1726091 if n == 34: return 2536769 if n ==",
        "Ground Truth": "def prime_fib(n: int): import random def miller_rabin(n, k=10): \"\"\"Test if n is prime using the Miller-Rabin primality test.\"\"\" if n < 2: return False if n == 2 or n == 3: return True if n % 2 == 0: return False r = 0 d = n - 1 while d % 2 == 0: r += 1 d //= 2 for _ in range(k): a = random.randint(2, n - 2) x = pow(a, d, n) if x == 1 or x == n - 1: continue for _ in range(r - 1): x = pow(x, 2, n) if x == n - 1: break else: return False return True c_prime = 0 a, b = 0, 1 while c_prime < n: a, b = b, a + b if miller_rabin(b): c_prime += 1 return b",
        "highlight_llm": "15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83",
        "highlight_gt": "15,16,17,18,19,20,21,22,23,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,43,45,46,47,48,49,50,51"
    },
    {
        "Task ID": 41,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "return n // 2",
        "Correct Code": "return n ** 2",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "def car_race_collision(n: int): return n // 2",
        "Ground Truth": "def car_race_collision(n: int): return n ** 2",
        "highlight_llm": "13",
        "highlight_gt": "13"
    },
    {
        "Task ID": 46,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)",
        "Correct Code": "a, b, c, d = 0, 0, 2, 0 for i in range(4, n + 1): a, b, c, d = b, c, d, a + b + c + d return d",
        "Semantic Level": "Infinite Loop",
        "Semantic Error ID": "Ag1",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def fib4(n: int): if n == 0: return 0 elif n == 1: return 0 elif n == 2: return 2 elif n == 3: return 0 else: return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)",
        "Ground Truth": "def fib4(n: int): if n == 0: return 0 elif n == 1: return 0 elif n == 2: return 2 elif n == 3: return 0 else: a, b, c, d = 0, 0, 2, 0 for i in range(4, n + 1): a, b, c, d = b, c, d, a + b + c + d return d",
        "highlight_llm": "25",
        "highlight_gt": "26,27,28,29"
    },
    {
        "Task ID": 54,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "sorted(s0) == sorted(s1)",
        "Correct Code": "set(s0) == set(s1)",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def same_chars(s0: str, s1: str): return sorted(s0) == sorted(s1)",
        "Ground Truth": "def same_chars(s0: str, s1: str): return set(s0) == set(s1)",
        "highlight_llm": "17",
        "highlight_gt": "17"
    },
    {
        "Task ID": 55,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "elif n == 1:",
        "Correct Code": "if n <= 2:",
        "Semantic Level": "Miss condition",
        "Semantic Error ID": "Aa1",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def fib(n: int): if n == 0: return 0 elif n == 1: return 1 else: return fib(n-1) + fib(n-2)",
        "Ground Truth": "def fib(n: int): if n == 0: return 0 if n <= 2: return 1 a, b = 1, 1 for _ in range(3, n + 1): a, b, = b, a + b return b",
        "highlight_llm": "12",
        "highlight_gt": "11"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "return fib(n-1) + fib(n-2)",
        "Correct Code": "a, b = 1, 1 for _ in range(3, n + 1): a, b, = b, a + b return b",
        "Semantic Level": "Infinite Loop",
        "Semantic Error ID": "Ag1",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "15",
        "highlight_gt": "12,13,14,15"
    },
    {
        "Task ID": 63,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "Correct Code": "a, b, c = 0, 0, 1 for _ in range(3, n + 1): a, b, c = b, c, a + b + c return c",
        "Semantic Level": "Infinite Loop",
        "Semantic Error ID": "Ag1",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "def fibfib(n: int): if n == 0: return 0 elif n == 1: return 0 elif n == 2: return 1 else: return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "Ground Truth": "def fibfib(n: int): if n == 0 or n == 1: return 0 elif n == 2: return 1 a, b, c = 0, 0, 1 for _ in range(3, n + 1): a, b, c = b, c, a + b + c return c",
        "highlight_llm": "22",
        "highlight_gt": "19,20,21,22"
    },
    {
        "Task ID": 64,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "if s == \"\": return 0 cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s))) if s[-1] in \"yY\": cnt += 1 return cnt",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "FIX = \"\"\" Add more test cases. \"\"\" def vowels_count(s): pass",
        "Ground Truth": "FIX = \"\"\" Add more test cases. \"\"\" def vowels_count(s): if s == \"\": return 0 cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s))) if s[-1] in \"yY\": cnt += 1 return cnt",
        "highlight_llm": "17",
        "highlight_gt": "16,17,18,19"
    },
    {
        "Task ID": 65,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "s = str(x) if shift > len(s): return s[::-1] shift %= len(s) if shift == 0: return s else:",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def circular_shift(x, shift): return str(x)[shift:] + str(x)[:shift]",
        "Ground Truth": "def circular_shift(x, shift): s = str(x) if shift > len(s): return s[::-1] shift %= len(s) if shift == 0: return s else: return s[len(s) - shift:] + s[:len(s) - shift]",
        "highlight_llm": "",
        "highlight_gt": "10,11,12,13,14,15"
    },
    {
        "Task ID": 69,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return -1",
        "Correct Code": "count = dict() for num in lst: if num not in count: count[num] = 0 count[num] += 1 ans = -1 for num, cnt in count.items(): if cnt >= num: ans = max(ans, num) return ans",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def search(lst): # Your code here return -1",
        "Ground Truth": "def search(lst): count = dict() for num in lst: if num not in count: count[num] = 0 count[num] += 1 ans = -1 for num, cnt in count.items(): if cnt >= num: ans = max(ans, num) return ans",
        "highlight_llm": "13",
        "highlight_gt": "13,14,15,16,17,18,19,20,21,22"
    },
    {
        "Task ID": 70,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return [min(lst)] + strange_sort_list(lst[1:]) + [max(lst)]",
        "Correct Code": "ans, i, j = [], 0, len(sorted_list) - 1 while i < j: ans.append(sorted_list[i]) ans.append(sorted_list[j]) i += 1 j -= 1 if i == j: ans.append(sorted_list[i])",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def strange_sort_list(lst): if len(lst) == 0: return [] elif len(lst) == 1: return lst else: return [min(lst)] + strange_sort_list(lst[1:]) + [max(lst)]",
        "Ground Truth": "def strange_sort_list(lst): sorted_list = sorted(lst) ans, i, j = [], 0, len(sorted_list) - 1 while i < j: ans.append(sorted_list[i]) ans.append(sorted_list[j]) i += 1 j -= 1 if i == j: ans.append(sorted_list[i]) return ans",
        "highlight_llm": "17",
        "highlight_gt": "13,14,15,16,17,18,19"
    },
    {
        "Task ID": 71,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "math.sqrt",
        "Correct Code": "",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Import error",
        "Syntactic Error ID": "Bf1",
        "Generated Code": "def triangle_area(a, b, c): if a + b > c and a + c > b and b + c > a: s = (a + b + c) / 2 return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2) else: return -1",
        "Ground Truth": "def triangle_area(a, b, c): if a + b <= c or a + c <= b or b + c <= a: return -1 p = (a + b + c) / 2 return round((p * (p - a) * (p - b) * (p - c)) ** 0.5, 2)",
        "highlight_llm": "14",
        "highlight_gt": ""
    },
    {
        "Task ID": 72,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "is_palindrome(q)",
        "Correct Code": "",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def will_it_fly(q,w): if is_palindrome(q) and sum(q) <= w: return True else: return False",
        "Ground Truth": "def will_it_fly(q,w): return q == q[::-1] and sum(q) <= w",
        "highlight_llm": "19",
        "highlight_gt": ""
    },
    {
        "Task ID": 73,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "arr_reversed, cnt = arr[::-1], 0 for i in range(len(arr) // 2): if arr[i] != arr_reversed[i]: cnt += 1 return cnt",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def smallest_change(arr): pass",
        "Ground Truth": "def smallest_change(arr): arr_reversed, cnt = arr[::-1], 0 for i in range(len(arr) // 2): if arr[i] != arr_reversed[i]: cnt += 1 return cnt",
        "highlight_llm": "12",
        "highlight_gt": "12,13,14,15,16"
    },
    {
        "Task ID": 74,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "if len(lst1) < len(lst2)",
        "Correct Code": "c1, c2 = sum(map(lambda s: len(s), lst1)), sum(map(lambda s: len(s), lst2))",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def total_match(lst1, lst2): return lst1 if len(lst1) < len(lst2) else lst2",
        "Ground Truth": "def total_match(lst1, lst2): c1, c2 = sum(map(lambda s: len(s), lst1)), sum(map(lambda s: len(s), lst2)) return lst1 if c1 <= c2 else lst2",
        "highlight_llm": "15",
        "highlight_gt": "15"
    },
    {
        "Task ID": 75,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "if a <= 1: return False isprime = [True] * (a + 1) for i in range(2, a + 1): if isprime[i]: for j in range(i + i, a + 1, i): isprime[j] = False cnt, tmp = 0, a for i in range(2, a + 1): while isprime[i] and tmp % i == 0: tmp //= i cnt += 1 return cnt == 3",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def is_multiply_prime(a): pass",
        "Ground Truth": "def is_multiply_prime(a): pass",
        "highlight_llm": "9",
        "highlight_gt": "9,10,11,12,13,14,15,16,17,18,19,20"
    },
    {
        "Task ID": 76,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return n**int(x/n) == x",
        "Correct Code": "if x == 1: return True if n == 0: return x == 0 if n == 1: return x == 1 if n == -1: return abs(x) == 1 p = n while abs(p) <= abs(x): if p == x: return True p = p * n return False",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def is_simple_power(x, n): return n**int(x/n) == x",
        "Ground Truth": "def is_simple_power(x, n): if x == 1: return True if n == 0: return x == 0 if n == 1: return x == 1 if n == -1: return abs(x) == 1 p = n while abs(p) <= abs(x): if p == x: return True p = p * n return False",
        "highlight_llm": "13",
        "highlight_gt": "13,14,15,16,17,18,19,20,21"
    },
    {
        "Task ID": 77,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return a**3 > 0 and a**3 == int(a**3)",
        "Correct Code": "a = abs(a) return int(round(a ** (1. / 3))) ** 3 == a",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "def iscube(a): return a**3 > 0 and a**3 == int(a**3)",
        "Ground Truth": "def iscube(a): a = abs(a) return int(round(a ** (1. / 3))) ** 3 == a",
        "highlight_llm": "14",
        "highlight_gt": "14,15"
    },
    {
        "Task ID": 80,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "if s[i] == s[i + 1] == s[i + 2]:",
        "Correct Code": "if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def is_happy(s): if len(s) < 3: return False for i in range(len(s) - 2): if s[i] == s[i + 1] == s[i + 2]: return False return True",
        "Ground Truth": "def is_happy(s): if len(s) < 3: return False for i in range(len(s) - 2): if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]: return False return True",
        "highlight_llm": "16",
        "highlight_gt": "15"
    },
    {
        "Task ID": 81,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "def to_letter_grade(score): if score == 4.0: return \"A+\" elif score > 3.7: return \"A\" elif score > 3.3: return \"A-\" elif score > 3.0: return \"B+\" elif score > 2.7: return \"B\" elif score > 2.3: return \"B-\" elif score > 2.0: return \"C+\" elif score > 1.7: return \"C\" elif score > 1.3: return \"C-\" elif score > 1.0: return \"D+\" elif score > 0.7: return \"D\" elif score > 0.0: return \"D-\" else: return \"E\" return [to_letter_grade(x) for x in grades]",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def numerical_letter_grade(grades): pass",
        "Ground Truth": "def numerical_letter_grade(grades): def to_letter_grade(score): if score == 4.0: return \"A+\" elif score > 3.7: return \"A\" elif score > 3.3: return \"A-\" elif score > 3.0: return \"B+\" elif score > 2.7: return \"B\" elif score > 2.3: return \"B-\" elif score > 2.0: return \"C+\" elif score > 1.7: return \"C\" elif score > 1.3: return \"C-\" elif score > 1.0: return \"D+\" elif score > 0.7: return \"D\" elif score > 0.0: return \"D-\" else: return \"E\" return [to_letter_grade(x) for x in grades]",
        "highlight_llm": "26",
        "highlight_gt": "26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54"
    },
    {
        "Task ID": 82,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return is_prime(len(string))",
        "Correct Code": "def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) return is_prime(len(string))",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def prime_length(string): return is_prime(len(string))",
        "Ground Truth": "def prime_length(string): def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) return is_prime(len(string))",
        "highlight_llm": "10",
        "highlight_gt": "10,11,13"
    },
    {
        "Task ID": 83,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return sum(1 for i in range(1, n + 1) if str(i).startswith('1') or str(i).endswith('1'))",
        "Correct Code": "if n == 1: return 1 return 18 * 10 ** (n - 2)",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def starts_one_ends(n): return sum(1 for i in range(1, n + 1) if str(i).startswith('1') or str(i).endswith('1'))",
        "Ground Truth": "def starts_one_ends(n): if n == 1: return 1 return 18 * 10 ** (n - 2)",
        "highlight_llm": "6",
        "highlight_gt": "6,7"
    },
    {
        "Task ID": 84,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "return bin(N)[2:]",
        "Correct Code": "s = sum(map(lambda x: int(x), str(N))) return bin(s)[2:]",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def solve(N): return bin(N)[2:]",
        "Ground Truth": "def solve(N): s = sum(map(lambda x: int(x), str(N))) return bin(s)[2:]",
        "highlight_llm": "15",
        "highlight_gt": "15,16"
    },
    {
        "Task ID": 85,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "sum(lst[1::2])",
        "Correct Code": "for i in range(1, len(lst), 2): if lst[i] % 2 == 0: s += lst[i]",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "Incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def add(lst): return sum(lst[1::2])",
        "Ground Truth": "def add(lst): s = 0 for i in range(1, len(lst), 2): if lst[i] % 2 == 0: s += lst[i] return s",
        "highlight_llm": "8",
        "highlight_gt": "9,10,11"
    },
    {
        "Task ID": 86,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "join(sorted(s.split()))",
        "Correct Code": "join(map(lambda x: \"\".join(sorted(x, key=lambda ch: ord(ch))), words))",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def anti_shuffle(s): return''.join(sorted(s.split()))",
        "Ground Truth": "def anti_shuffle(s): words = s.split(\" \") return \" \".join(map(lambda x: \"\".join(sorted(x, key=lambda ch: ord(ch))), words))",
        "highlight_llm": "14",
        "highlight_gt": "15"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "''.join",
        "Correct Code": " \".join",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect method call target",
        "Syntactic Error ID": "Bd3",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "14",
        "highlight_gt": "14"
    },
    {
        "Task ID": 88,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "reverse=(array[0]+array[-1]) % 2 == 0) if array == []: return []",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def sort_array(array): return sorted(array)",
        "Ground Truth": "def sort_array(array): if array == []: return [] return sorted(array, reverse=(array[0]+array[-1]) % 2 == 0)",
        "highlight_llm": "",
        "highlight_gt": "17"
    },
    {
        "Task ID": 89,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "d = 'abcdefghijklmnopqrstuvwxyz' if ch in d else ch",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def encrypt(s): return ''.join(chr(ord(c) + 2 * 2) for c in s)",
        "Ground Truth": "def encrypt(s): d = 'abcdefghijklmnopqrstuvwxyz' return \"\".join(map(lambda ch: chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\")) if ch in d else ch, s))",
        "highlight_llm": "",
        "highlight_gt": "12,13"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "chr(ord(c) + 2 * 2)",
        "Correct Code": "chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\"))",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "12",
        "highlight_gt": "13"
    },
    {
        "Task ID": 90,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return sorted(lst)[1]",
        "Correct Code": "sorted_list = sorted(lst) for x in sorted_list: if x != sorted_list[0]: return x",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def next_smallest(lst): if len(lst) < 2: return None else: return sorted(lst)[1]",
        "Ground Truth": "def next_smallest(lst): if len(lst) <= 1: return None sorted_list = sorted(lst) for x in sorted_list: if x != sorted_list[0]: return x",
        "highlight_llm": "15",
        "highlight_gt": "13,14,15,16"
    },
    {
        "Task ID": 91,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "in S.split()",
        "Correct Code": "sentences = map(lambda x: x.strip(), ((S.replace(\"?\", \".\")).replace(\"!\", \".\")).split(\".\"))",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "def is_bored(S): return sum(1 for word in S.split() if word.startswith(\"I\"))",
        "Ground Truth": "def is_bored(S): sentences = map(lambda x: x.strip(), ((S.replace(\"?\", \".\")).replace(\"!\", \".\")).split(\".\")) return len([s for s in sentences if s.startswith(\"I \")])",
        "highlight_llm": "13",
        "highlight_gt": "13"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "if word.startswith(\"I\")",
        "Correct Code": "if s.startswith(\"I \")",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "13",
        "highlight_gt": "14"
    },
    {
        "Task ID": 93,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "def switch_case(ch): if ord(\"A\") <= ord(ch) <= ord(\"Z\"): return chr(ord(ch) + 32) elif ord(\"a\") <= ord(ch) <= ord(\"z\"): return chr(ord(ch) - 32) else: return ch def vowel_change(ch): return ch if ch not in \"aeiouAEIOU\" else chr(ord(ch) + 2) m = \"\".join(map(switch_case, message)) return \"\".join(map(vowel_change, m))",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def encode(message): pass",
        "Ground Truth": "def encode(message): def switch_case(ch): if ord(\"A\") <= ord(ch) <= ord(\"Z\"): return chr(ord(ch) + 32) elif ord(\"a\") <= ord(ch) <= ord(\"z\"): return chr(ord(ch) - 32) else: return ch def vowel_change(ch): return ch if ch not in \"aeiouAEIOU\" else chr(ord(ch) + 2) m = \"\".join(map(switch_case, message)) return \"\".join(map(vowel_change, m))",
        "highlight_llm": "15",
        "highlight_gt": "15,16,17,18,19,20,21,23,24,26,27"
    },
    {
        "Task ID": 94,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "is_prime(x)",
        "Correct Code": "def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) sorted_list = sorted(lst)[::-1] for x in sorted_list: if is_prime(x): return sum(map(lambda ch: int(ch), str(x)))",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def skjkasdkd(lst): return sum(list(filter(lambda x: is_prime(x), lst)))",
        "Ground Truth": "def skjkasdkd(lst): def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) sorted_list = sorted(lst)[::-1] for x in sorted_list: if is_prime(x): return sum(map(lambda ch: int(ch), str(x)))",
        "highlight_llm": "13",
        "highlight_gt": "16,17,18,19,20,21"
    },
    {
        "Task ID": 95,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if key.islower() or key.isupper(): continue else: return False",
        "Correct Code": "lower, upper = True, True if not k.islower(): lower = False if not k.isupper(): upper = False",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def check_dict_case(dict): if len(dict) == 0: return False else: for key in dict: if type(key) == str: if key.islower() or key.isupper(): continue else: return False else: return False return True",
        "Ground Truth": "def check_dict_case(dict): keys = list(dict.keys()) if keys == []: return False lower, upper = True, True for k in keys: if type(k) != str: lower = upper = False break if not k.islower(): lower = False if not k.isupper(): upper = False return lower or upper",
        "highlight_llm": "18,19,20,21",
        "highlight_gt": "15,20,21"
    },
    {
        "Task ID": 96,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "ans = [] isprime = [True] * (n + 1) for i in range(2, n): if isprime[i]: ans.append(i) for j in range(i + i, n, i): isprime[j] = False return ans",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def count_up_to(n): pass",
        "Ground Truth": "def count_up_to(n): ans = [] isprime = [True] * (n + 1) for i in range(2, n): if isprime[i]: ans.append(i) for j in range(i + i, n, i): isprime[j] = False return ans",
        "highlight_llm": "12",
        "highlight_gt": "12,13,14,15,16,17,18,19"
    },
    {
        "Task ID": 99,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "int(round(float(value)))",
        "Correct Code": "rounding(float(value))",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def closest_integer(value): return int(round(float(value)))",
        "Ground Truth": "def closest_integer(value): def rounding(val): if abs(val - int(val)) != 0.5: return round(val) if val > 0: return int(val) + 1 else: return int(val) - 1 return rounding(float(value))",
        "highlight_llm": "19",
        "highlight_gt": "31"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "def rounding(val): if abs(val - int(val)) != 0.5: return round(val) if val > 0: return int(val) + 1 else: return int(val) - 1",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "24,25,26,27,28,29,30"
    },
    {
        "Task ID": 100,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "ans, num = [], n for _ in range(n): ans.append(num) num += 2 return ans",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def make_a_pile(n): pass",
        "Ground Truth": "def make_a_pile(n): ans, num = [], n for _ in range(n): ans.append(num) num += 2 return ans",
        "highlight_llm": "15",
        "highlight_gt": "15,16,17,18,19"
    },
    {
        "Task ID": 101,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "s.split()",
        "Correct Code": "words = (s.replace(\",\", \" \")).split() return [word for word in words if word != \"\"]",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def words_string(s): return s.split()",
        "Ground Truth": "def words_string(s): words = (s.replace(\",\", \" \")).split() return [word for word in words if word != \"\"]",
        "highlight_llm": "10",
        "highlight_gt": "10,11"
    },
    {
        "Task ID": 102,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if x % 2 == 0 and y % 2 == 0: return max(x, y) else: return -1",
        "Correct Code": "if x > y: return -1 if x == y: return y if y % 2 == 0 else -1 return y if y % 2 == 0 else y - 1",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def choose_num(x, y): if x % 2 == 0 and y % 2 == 0: return max(x, y) else: return -1",
        "Ground Truth": "def choose_num(x, y): if x > y: return -1 if x == y: return y if y % 2 == 0 else -1 return y if y % 2 == 0 else y - 1",
        "highlight_llm": "10,11,12,13",
        "highlight_gt": "10,11,12"
    },
    {
        "Task ID": 103,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "(int(sum(range(n, m + 1)) / (m - n + 1))",
        "Correct Code": "avg = round((n + m) / 2)   return bin(avg)",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def rounded_avg(n, m): if n > m: return -1 else: return bin(int(sum(range(n, m + 1)) / (m - n + 1)))",
        "Ground Truth": "def rounded_avg(n, m): if n > m: return -1 avg = round((n + m) / 2) return bin(avg)",
        "highlight_llm": "15",
        "highlight_gt": "13,14"
    },
    {
        "Task ID": 105,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return []",
        "Correct Code": "def to_word(x: int) -> str: if x == 1: return \"One\" elif x == 2: return \"Two\" elif x == 3: return \"Three\" elif x == 4: return \"Four\" elif x == 5: return \"Five\" elif x == 6: return \"Six\" elif x == 7: return \"Seven\" elif x == 8: return \"Eight\" else: return \"Nine\" sorted_list, ans = sorted(arr)[::-1], [] for x in sorted_list: if 1 <= x <= 9: ans.append(to_word(x)) return ans",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def by_length(arr): # Your code here return []",
        "Ground Truth": "def by_length(arr): def to_word(x: int) -> str: if x == 1: return \"One\" elif x == 2: return \"Two\" elif x == 3: return \"Three\" elif x == 4: return \"Four\" elif x == 5: return \"Five\" elif x == 6: return \"Six\" elif x == 7: return \"Seven\" elif x == 8: return \"Eight\" else: return \"Nine\" sorted_list, ans = sorted(arr)[::-1], [] for x in sorted_list: if 1 <= x <= 9: ans.append(to_word(x)) return ans",
        "highlight_llm": "24",
        "highlight_gt": "23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46"
    },
    {
        "Task ID": 106,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return [1 if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]",
        "Correct Code": "if n == 0: return [] if n == 1: return [1] if n == 2: return [1, 2] ans = [1, 2] for i in range(3, n + 1): if i % 2 == 1: ans.append(ans[-2] + (i - 1) + i) else: ans.append(ans[-2] * (i - 1) * i) return ans",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def f(n): return [1 if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]",
        "Ground Truth": "def f(n): if n == 0: return [] if n == 1: return [1] if n == 2: return [1, 2] ans = [1, 2] for i in range(3, n + 1): if i % 2 == 1: ans.append(ans[-2] + (i - 1) + i) else: ans.append(ans[-2] * (i - 1) * i) return ans",
        "highlight_llm": "10",
        "highlight_gt": "10,11,12,14,15,16,17,18,19,20"
    },
    {
        "Task ID": 108,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "sum_digits(x)",
        "Correct Code": "",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def count_nums(arr): return len([x for x in arr if sum_digits(x) > 0])",
        "Ground Truth": "def count_nums(arr): def judge(x: int) -> int: l = list(str(x)) if l[0] == \"-\": l = l[1:] l = list(map(int, l)) l[0] = -l[0] else: l = list(map(int, l)) return 1 if sum(l) > 0 else 0 return sum(map(judge, arr))",
        "highlight_llm": "11",
        "highlight_gt": ""
    },
    {
        "Task ID": 109,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "for i in range(len(arr)): if arr[i] > arr[i+1]: return False return True",
        "Correct Code": "sorted_arr = sorted(arr) if arr == sorted_arr: return True for i in range(1, len(arr)): if arr[i:] + arr[:i] == sorted_arr: return True return False",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def move_one_ball(arr): if len(arr) == 0: return True for i in range(len(arr)): if arr[i] > arr[i+1]: return False return True",
        "Ground Truth": "def move_one_ball(arr): sorted_arr = sorted(arr) if arr == sorted_arr: return True for i in range(1, len(arr)): if arr[i:] + arr[:i] == sorted_arr: return True return False",
        "highlight_llm": "30,31,32,33",
        "highlight_gt": "29,30,31,32,33,34"
    },
    {
        "Task ID": 110,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "if sum(lst1) % 2 == 0",
        "Correct Code": "cnt_odd = len(list(filter(lambda x: x % 2 == 1, lst1))) cnt_even = len(list(filter(lambda x: x % 2 == 0, lst2)))",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def exchange(lst1, lst2): # Your code here return \"YES\" if sum(lst1) % 2 == 0 else \"NO",
        "Ground Truth": "def exchange(lst1, lst2): cnt_odd = len(list(filter(lambda x: x % 2 == 1, lst1))) cnt_even = len(list(filter(lambda x: x % 2 == 0, lst2))) return \"YES\" if cnt_odd <= cnt_even else \"NO",
        "highlight_llm": "15",
        "highlight_gt": "14,15"
    },
    {
        "Task ID": 111,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "if test == \"\": return {} count, ans = dict(), dict() for word in test.split(\" \"): if word != \"\": if word not in count: count[word] = 0 count[word] += 1 mx = max(list(count.values())) for ch, c in count.items(): if c == mx: ans[ch] = c return ans",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def histogram(test): pass",
        "Ground Truth": "def histogram(test): if test == \"\": return {} count, ans = dict(), dict() for word in test.split(\" \"): if word != \"\": if word not in count: count[word] = 0 count[word] += 1 mx = max(list(count.values())) for ch, c in count.items(): if c == mx: ans[ch] = c return ans",
        "highlight_llm": "14",
        "highlight_gt": "18,19,20,21,22,23,24,25,26,27,28"
    },
    {
        "Task ID": 112,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "s[::-1] == s.translate(str.maketrans('', '', c))",
        "Correct Code": "ss == ss[::-1]",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "incorrect variable name",
        "Syntactic Error ID": "Be5",
        "Generated Code": "def reverse_delete(s,c): # your code here return (s.translate(str.maketrans('', '', c)), s[::-1] == s.translate(str.maketrans('', '', c)))",
        "Ground Truth": "def reverse_delete(s,c): ss = \"\".join(filter(lambda ch: ch not in c, s)) return ss, ss == ss[::-1]",
        "highlight_llm": "13",
        "highlight_gt": "13"
    },
    {
        "Task ID": 113,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "string {}",
        "Correct Code": "replace(\"i\", str(odd_cnt))",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect constant",
        "Syntactic Error ID": "Be4",
        "Generated Code": "def odd_count(lst): return [\"the number of odd elements {}n the string {} of the input.\".format(len(i) - i.count(\"0\"), i) for i in lst]",
        "Ground Truth": "def odd_count(lst): ans, template = [], \"the number of odd elements in the string i of the input.\" for s in lst: odd_cnt = len(list(filter(lambda ch: int(ch) % 2 == 1, s))) ans.append(template.replace(\"i\", str(odd_cnt))) return ans",
        "highlight_llm": "13",
        "highlight_gt": "16"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "len(i) - i.count(\"0\")",
        "Correct Code": "lambda ch: int(ch) % 2 == 1",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "13",
        "highlight_gt": "15"
    },
    {
        "Task ID": 114,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "if all(x >= 0 for x in nums): return min(nums)",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "import math def minSubArraySum(nums): if len(nums) == 0: return 0 min_sum = math.inf current_sum = 0 for num in nums: current_sum += num min_sum = min(min_sum, current_sum) if current_sum < 0: current_sum = 0 return min_sum",
        "Ground Truth": "import math def minSubArraySum(nums): if all(x >= 0 for x in nums): return min(nums) s, ans = 0, 0 for x in nums: s += x ans = min(ans, s) if s >= 0: s = 0 return ans",
        "highlight_llm": "",
        "highlight_gt": "9"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "min_sum = math.inf",
        "Correct Code": "s, ans = 0, 0",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect constant",
        "Syntactic Error ID": "Be4",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "13",
        "highlight_gt": "10"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 3,
        "Incorrect Code": "if current_sum < 0:",
        "Correct Code": "if s >= 0:",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "18",
        "highlight_gt": "14"
    },
    {
        "Task ID": 115,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "ans = 0 for l in grid: ans += math.ceil(sum(l) / capacity) return ans",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def max_fill(grid, capacity): import math # TODO: Solve this problem pass",
        "Ground Truth": "def max_fill(grid, capacity): import math ans = 0 for l in grid: ans += math.ceil(sum(l) / capacity) return ans",
        "highlight_llm": "37",
        "highlight_gt": "41,42,43,44"
    },
    {
        "Task ID": 117,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "ans = [] for word in s.split(\" \"): if word != \"\": c_cnt = len(list(filter(lambda ch: ch not in \"aeiouAEIOU\", word))) if c_cnt == n: ans.append(word) return ans",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def select_words(s, n): # Your code here pass",
        "Ground Truth": "def select_words(s, n): ans = [] for word in s.split(\" \"): if word != \"\": c_cnt = len(list(filter(lambda ch: ch not in \"aeiouAEIOU\", word))) if c_cnt == n: ans.append(word) return ans",
        "highlight_llm": "15",
        "highlight_gt": "14,15,16,17,18,19"
    },
    {
        "Task ID": 118,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "in range(len(word) - 1, 0, -1):",
        "Correct Code": "in range(len(word) - 2, 0, -1):",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "def get_closest_vowel(word): vowels = \"aeiouAEIOU\" for i in range(len(word) - 1, 0, -1): if word[i] in vowels: return word[i] return \"",
        "Ground Truth": "def get_closest_vowel(word): def is_vowel(ch: str) -> bool: return ch in \"aeiouAEIOU\" for i in range(len(word) - 2, 0, -1): if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]): return word[i] return \"",
        "highlight_llm": "17",
        "highlight_gt": "18"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "if word[i] in vowels:",
        "Correct Code": "if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "18",
        "highlight_gt": "19"
    },
    {
        "Task ID": 119,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "def valid_parens(s: str) -> bool: cnt = 0 for ch in s: cnt = cnt + 1 if ch == \"(\" else cnt - 1 if cnt < 0: return False return cnt == 0 return \"Yes\" if valid_parens(lst[0] + lst[1]) or valid_parens(lst[1] + lst[0]) else \"No",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def match_parens(lst): pass",
        "Ground Truth": "def match_parens(lst): def valid_parens(s: str) -> bool: cnt = 0 for ch in s: cnt = cnt + 1 if ch == \"(\" else cnt - 1 if cnt < 0: return False return cnt == 0 return \"Yes\" if valid_parens(lst[0] + lst[1]) or valid_parens(lst[1] + lst[0]) else \"No",
        "highlight_llm": "16",
        "highlight_gt": "17,18,19,20,21,22,23"
    },
    {
        "Task ID": 120,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "arr, reverse=True)[:k]",
        "Correct Code": "sorted(arr)[::-1][:k])",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def maximum(arr, k): return sorted(arr, reverse=True)[:k]",
        "Ground Truth": "def maximum(arr, k): return sorted(sorted(arr)[::-1][:k])",
        "highlight_llm": "26",
        "highlight_gt": "26"
    },
    {
        "Task ID": 121,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "(lst[::2])",
        "Correct Code": "if i % 2 == 0 and lst[i] % 2 == 1)",
        "Semantic Level": "Miss condition",
        "Semantic Error ID": "Aa1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def solution(lst): return sum(lst[::2])",
        "Ground Truth": "def solution(lst): return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 == 1)",
        "highlight_llm": "10",
        "highlight_gt": "10"
    },
    {
        "Task ID": 122,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "sum(sorted(arr)",
        "Correct Code": "sum(filter(lambda x: digits(x) <= 2",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def add_elements(arr, k): return sum(sorted(arr)[:k])",
        "Ground Truth": "def add_elements(arr, k): def digits(x: int) -> int: s = str(x) return len(s) - 1 if s[0] == \"-\" else len(s) return sum(filter(lambda x: digits(x) <= 2, arr[:k]))",
        "highlight_llm": "15",
        "highlight_gt": "18"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "def digits(x: int) -> int: s = str(x) return len(s) - 1 if s[0] == \"-\" else len(s)",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "15,16,17"
    },
    {
        "Task ID": 123,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "while n!= 1: if n % 2 == 0: n = n // 2 else: n = 3 * n + 1 odd_collatz.append(n)",
        "Correct Code": "while x != 1: if x % 2 == 1: ans.append(x) x = x // 2 if x % 2 == 0 else x * 3 + 1 ans.append(1)",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def get_odd_collatz(n): if n == 1: return [1] else: odd_collatz = [] while n!= 1: if n % 2 == 0: n = n // 2 else: n = 3 * n + 1 odd_collatz.append(n) return sorted(odd_collatz)",
        "Ground Truth": "def get_odd_collatz(n): ans, x = [], n while x != 1: if x % 2 == 1: ans.append(x) x = x // 2 if x % 2 == 0 else x * 3 + 1 ans.append(1) return sorted(ans)",
        "highlight_llm": "22,23,24,25,26,27",
        "highlight_gt": "19,20,21,22"
    },
    {
        "Task ID": 125,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return txt.split()",
        "Correct Code": "whitespace = tuple(' \\n\\r\\t') if any([x in txt for x in whitespace]): return txt.split() if \",\" in txt: return txt.split(\",\") cnt = 0 for ch in txt: if ch.islower() and (ord(ch) - ord(\"a\")) % 2 == 1: cnt += 1 return cnt",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def split_words(txt): return txt.split()",
        "Ground Truth": "def split_words(txt): whitespace = tuple(' \\n\\r\\t') if any([x in txt for x in whitespace]): return txt.split() if \",\" in txt: return txt.split(\",\") cnt = 0 for ch in txt: if ch.islower() and (ord(ch) - ord(\"a\")) % 2 == 1: cnt += 1 return cnt",
        "highlight_llm": "11",
        "highlight_gt": "11,12,13,14,15,16,17"
    },
    {
        "Task ID": 126,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "count = dict() for x in lst: if x not in count: count[x] = 0 count[x] += 1 if count[x] > 2: return False",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def is_sorted(lst): return sorted(lst) == lst",
        "Ground Truth": "def is_sorted(lst): count = dict() for x in lst: if x not in count: count[x] = 0 count[x] += 1 if count[x] > 2: return False return lst == sorted(lst)",
        "highlight_llm": "",
        "highlight_gt": "18,19,20,21,22"
    },
    {
        "Task ID": 127,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "start1, end1 = interval1 start2, end2 = interval2 if start1 > end1 or start2 > end2: return \"NO\" if start1 <= start2 and end1 >= end2: return \"YES\" if start2 <= start1 and end2 >= end1: return \"YES\" return \"NO",
        "Correct Code": "def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) if interval1[0] > interval2[0]: interval1, interval2 = interval2, interval1 l, r = interval2[0], min(interval1[1], interval2[1]) return \"YES\" if is_prime(r - l) else \"NO",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def intersection(interval1, interval2): start1, end1 = interval1 start2, end2 = interval2 if start1 > end1 or start2 > end2: return \"NO\" if start1 <= start2 and end1 >= end2: return \"YES\" if start2 <= start1 and end2 >= end1: return \"YES\" return \"NO",
        "Ground Truth": "def intersection(interval1, interval2): def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) if interval1[0] > interval2[0]: interval1, interval2 = interval2, interval1 l, r = interval2[0], min(interval1[1], interval2[1]) return \"YES\" if is_prime(r - l) else \"NO",
        "highlight_llm": "21,22,23,24,25,26,27,28,29",
        "highlight_gt": "21,22,23,24,25"
    },
    {
        "Task ID": 128,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "if arr == []: return None if 0 in arr: return 0 s, sgn = 0, 1 for x in arr: s += abs(x) sgn *= (x // abs(x)) return s * sgn",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def prod_signs(arr): pass",
        "Ground Truth": "def prod_signs(arr): if arr == []: return None if 0 in arr: return 0 s, sgn = 0, 1 for x in arr: s += abs(x) sgn *= (x // abs(x)) return s * sgn",
        "highlight_llm": "13",
        "highlight_gt": "13,14,15,16,17,18,19"
    },
    {
        "Task ID": 129,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "N = len(grid) x, y = 0, 0 for i in range(N): for j in range(N): if grid[i][j] == 1: x, y = i, j mn = N * N if x > 0: mn = min(mn, grid[x - 1][y]) if x < N - 1: mn = min(mn, grid[x + 1][y]) if y > 0: mn = min(mn, grid[x][y - 1]) if y < N - 1: mn = min(mn, grid[x][y + 1]) return [1 if i % 2 == 0 else mn for i in range(k)]",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def minPath(grid, k): # TODO: Solve this problem pass",
        "Ground Truth": "def minPath(grid, k): N = len(grid) x, y = 0, 0 for i in range(N): for j in range(N): if grid[i][j] == 1: x, y = i, j mn = N * N if x > 0: mn = min(mn, grid[x - 1][y]) if x < N - 1: mn = min(mn, grid[x + 1][y]) if y > 0: mn = min(mn, grid[x][y - 1]) if y < N - 1: mn = min(mn, grid[x][y + 1]) return [1 if i % 2 == 0 else mn for i in range(k)]",
        "highlight_llm": "32",
        "highlight_gt": "31,32,33,34,35,36,37,38,39,40,41,42"
    },
    {
        "Task ID": 130,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if n == 1: return [1] elif n == 2: return [1, 3] elif n == 3: return [1, 3, 2] else: tri_list = [1, 3, 2] for i in range(3, n): tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i - 3]) return tri_list",
        "Correct Code": "if n == 0: return [1] if n == 1: return [1, 3] ans = [1, 3] for i in range(2, n + 1): if i % 2 == 0: ans.append(1 + i / 2) else: ans.append(ans[-1] + ans[-2] + 1 + (i + 1) / 2) return ans",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def tri(n): if n == 1: return [1] elif n == 2: return [1, 3] elif n == 3: return [1, 3, 2] else: tri_list = [1, 3, 2] for i in range(3, n): tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i - 3]) return tri_list",
        "Ground Truth": "def tri(n): if n == 0: return [1] if n == 1: return [1, 3] ans = [1, 3] for i in range(2, n + 1): if i % 2 == 0: ans.append(1 + i / 2) else: ans.append(ans[-1] + ans[-2] + 1 + (i + 1) / 2) return ans",
        "highlight_llm": "18,19,20,21,22,23,24,25,26,27,28",
        "highlight_gt": "18,19,20,21,22,23,24,25,26"
    },
    {
        "Task ID": 131,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return 0",
        "Correct Code": "has_odd, prod = False, 1 for ch in str(n): if int(ch) % 2 == 1: has_odd = True prod *= int(ch) return 0 if not has_odd else prod",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def digits(n): return 0",
        "Ground Truth": "def digits(n): has_odd, prod = False, 1 for ch in str(n): if int(ch) % 2 == 1: has_odd = True prod *= int(ch) return 0 if not has_odd else prod",
        "highlight_llm": "9",
        "highlight_gt": "9,10,11,12,13,14"
    },
    {
        "Task ID": 132,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return False",
        "Correct Code": "for i in range(len(string)): if string[i] == \"]\": continue cnt, max_nest = 0, 0 for j in range(i, len(string)): if string[j] == \"[\": cnt += 1 else: cnt -= 1 max_nest = max(max_nest, cnt) if cnt == 0: if max_nest >= 2: return True break return False",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def is_nested(string): return False",
        "Ground Truth": "def is_nested(string): for i in range(len(string)): if string[i] == \"]\": continue cnt, max_nest = 0, 0 for j in range(i, len(string)): if string[j] == \"[\": cnt += 1 else: cnt -= 1 max_nest = max(max_nest, cnt) if cnt == 0: if max_nest >= 2: return True break return False",
        "highlight_llm": "14",
        "highlight_gt": "15,16,17,18,19,20,21,22,23,24,25,26,27,28"
    },
    {
        "Task ID": 133,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "math.ceil",
        "Correct Code": "import math",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Import error",
        "Syntactic Error ID": "Bf1",
        "Generated Code": "def sum_squares(lst): return sum([int(math.ceil(i)**2) for i in lst])",
        "Ground Truth": "def sum_squares(lst): import math return sum(map(lambda x: math.ceil(x) ** 2, lst))",
        "highlight_llm": "14",
        "highlight_gt": "14"
    },
    {
        "Task ID": 134,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "txt[-1].isalpha() and not txt[-1].isalnum()",
        "Correct Code": "txt[-1].isalpha() and txt[-2] == \" ",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "def check_if_last_char_is_a_letter(txt): return txt[-1].isalpha() and not txt[-1].isalnum()",
        "Ground Truth": "def check_if_last_char_is_a_letter(txt): if len(txt) == 0: return False if len(txt) == 1: return txt.isalpha() return txt[-1].isalpha() and txt[-2] == \" ",
        "highlight_llm": "14",
        "highlight_gt": "16"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "if len(txt) == 0: return False if len(txt) == 1: return txt.isalpha()",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "15,16"
    },
    {
        "Task ID": 135,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "for i in range(len(arr) - 1, 0, -1): if not (arr[i] >= arr[i - 1]): return i return -1",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def can_arrange(arr): pass",
        "Ground Truth": "def can_arrange(arr): for i in range(len(arr) - 1, 0, -1): if not (arr[i] >= arr[i - 1]): return i return -1",
        "highlight_llm": "11",
        "highlight_gt": "11,12,13,14"
    },
    {
        "Task ID": 136,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "neg = list(filter(lambda x: x < 0, lst)) pos = list(filter(lambda x: x > 0, lst)) return None if neg == [] else max(neg), None if pos == [] else min(pos)",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def largest_smallest_integers(lst): pass",
        "Ground Truth": "def largest_smallest_integers(lst): neg = list(filter(lambda x: x < 0, lst)) pos = list(filter(lambda x: x > 0, lst)) return None if neg == [] else max(neg), None if pos == [] else min(pos)",
        "highlight_llm": "13",
        "highlight_gt": "13,14,15"
    },
    {
        "Task ID": 137,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "num_a = float(str(a).replace(\",\", \".\")) num_b = float(str(b).replace(\",\", \".\"))",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def compare_one(a, b): if a > b: return a elif a < b: return b else: return None",
        "Ground Truth": "def compare_one(a, b): num_a = float(str(a).replace(\",\", \".\")) num_b = float(str(b).replace(\",\", \".\")) if num_a == num_b: return None return a if num_a > num_b else b",
        "highlight_llm": "",
        "highlight_gt": "18,19"
    },
    {
        "Task ID": 138,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return False",
        "Correct Code": "return n >= 8 and n % 2 == 0",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def is_equal_to_sum_even(n): return False",
        "Ground Truth": "def is_equal_to_sum_even(n): return n >= 8 and n % 2 == 0",
        "highlight_llm": "8",
        "highlight_gt": "8"
    },
    {
        "Task ID": 139,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "n * special_factorial(n-1)",
        "Correct Code": "for i in range(2, n + 1): fac *= i ans *= fac",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "def special_factorial(n): if n == 0: return 1 else: return n * special_factorial(n-1)",
        "Ground Truth": "def special_factorial(n): fac, ans = 1, 1 for i in range(2, n + 1): fac *= i ans *= fac return ans",
        "highlight_llm": "16",
        "highlight_gt": "14,15,16"
    },
    {
        "Task ID": 140,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "re",
        "Correct Code": "",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Import error",
        "Syntactic Error ID": "Bf1",
        "Generated Code": "def fix_spaces(text): return re.sub(r\"\\s+\", \"_\", text)",
        "Ground Truth": "def fix_spaces(text): ans = text for i in range(len(text)-1, 2, -1): ans = ans.replace(\" \" * i, \"-\") return ans.replace(\" \", \"_\")",
        "highlight_llm": "12",
        "highlight_gt": ""
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "for i in range(len(text)-1, 2, -1): ans = ans.replace(\" \" * i, \"-\")",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "13,14"
    },
    {
        "Task ID": 141,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if len(file_name) > 3:",
        "Correct Code": "if len(list(filter(lambda ch: ch.isdigit(), file_name))) > 3:",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def file_name_check(file_name): if len(file_name) > 3: return \"No\" if file_name.count(\".\")!= 1: return \"No\" if file_name.split(\".\")[0] == \"\": return \"No\" if file_name.split(\".\")[0][0] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\": return \"No\" if file_name.split(\".\")[1] not in [\"txt\", \"exe\", \"dll\"]: return \"No\" return \"Yes",
        "Ground Truth": "def file_name_check(file_name): if len(list(filter(lambda ch: ch.isdigit(), file_name))) > 3: return \"No\" f_list = file_name.split(\".\") if len(f_list) != 2: return \"No\" if len(f_list[0]) == 0: return \"No\" if not f_list[0][0].isalpha(): return \"No\" if f_list[1] not in [\"txt\", \"exe\", \"dll\"]: return \"No\" return \"Yes",
        "highlight_llm": "15",
        "highlight_gt": "15"
    },
    {
        "Task ID": 142,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "else: ans += num",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def sum_squares(lst): # Your code here sum = 0 for i in range(len(lst)): if i % 3 == 0: sum += lst[i] ** 2 elif i % 4 == 0: sum += lst[i] ** 3 return sum",
        "Ground Truth": "def sum_squares(lst): ans = 0 for i, num in enumerate(lst): if i % 3 == 0: ans += num ** 2 elif i % 4 == 0: ans += num ** 3 else: ans += num return ans",
        "highlight_llm": "",
        "highlight_gt": "18,19"
    },
    {
        "Task ID": 143,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "is_prime(len(x))",
        "Correct Code": "def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def words_in_sentence(sentence): return \" \".join(filter(lambda x: is_prime(len(x)), sentence.split()))",
        "Ground Truth": "def words_in_sentence(sentence): def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) return \" \".join(list(filter(lambda word: is_prime(len(word)), sentence.split(\" \"))))",
        "highlight_llm": "21",
        "highlight_gt": "21,22"
    },
    {
        "Task ID": 144,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "eval(x)",
        "Correct Code": "map(int, x.split(\"/\"))",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def simplify(x, n): return eval(x) * eval(n) == int(eval(x) * eval(n))",
        "Ground Truth": "def simplify(x, n): x1, x2 = map(int, x.split(\"/\")) n1, n2 = map(int, n.split(\"/\")) return (x1 * n1) % (x2 * n2) == 0",
        "highlight_llm": "13",
        "highlight_gt": "18"
    },
    {
        "Task ID": 145,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "key=lambda x: sum(map(int, str(abs(x)))",
        "Correct Code": "def weight(x): x_list = list(str(x)) if x_list[0] == \"-\": x_list = x_list[1:] x_list = list(map(int, x_list)) x_list[0] = -x_list[0] else: x_list = list(map(int, x_list)) return sum(x_list)",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def order_by_points(nums): return sorted(nums, key=lambda x: sum(map(int, str(abs(x)))))",
        "Ground Truth": "def order_by_points(nums): def weight(x): x_list = list(str(x)) if x_list[0] == \"-\": x_list = x_list[1:] x_list = list(map(int, x_list)) x_list[0] = -x_list[0] else: x_list = list(map(int, x_list)) return sum(x_list) return sorted(nums, key=weight)",
        "highlight_llm": "12",
        "highlight_gt": "12,13,14,15,16,17,18,19,20"
    },
    {
        "Task ID": 146,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if x > 10 and x % 10 in [1, 3, 5, 7, 9] and x % 100 in [1, 3, 5, 7, 9]",
        "Correct Code": "if num > 10 and str(num)[0] in odd and str(num)[-1] in odd",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def specialFilter(nums): return len([x for x in nums if x > 10 and x % 10 in [1, 3, 5, 7, 9] and x % 100 in [1, 3, 5, 7, 9]])",
        "Ground Truth": "def specialFilter(nums): ans, odd = 0, [\"1\", \"3\", \"5\", \"7\", \"9\"] for num in nums: if num > 10 and str(num)[0] in odd and str(num)[-1] in odd: ans += 1 return ans",
        "highlight_llm": "9",
        "highlight_gt": "11"
    },
    {
        "Task ID": 147,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return sum(i % 3 == 0 for i in range(1, n + 1))",
        "Correct Code": "if n <= 2: return False one_cnt = 1 + (n - 2) // 3 * 2 + (n - 2) % 3 zero_cnt = n - one_cnt return one_cnt * (one_cnt - 1) * (one_cnt - 2) // 6 + zero_cnt * (zero_cnt - 1) * (zero_cnt - 2) // 6",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def get_max_triples(n): return sum(i % 3 == 0 for i in range(1, n + 1))",
        "Ground Truth": "def get_max_triples(n): if n <= 2: return False one_cnt = 1 + (n - 2) // 3 * 2 + (n - 2) % 3 zero_cnt = n - one_cnt return one_cnt * (one_cnt - 1) * (one_cnt - 2) // 6 + zero_cnt * (zero_cnt - 1) * (zero_cnt - 2) // 6",
        "highlight_llm": "15",
        "highlight_gt": "15,16,17,18"
    },
    {
        "Task ID": 148,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\",\"Uranus\", \"Neptune\"]   i1, i2 = planets.index(planet1), planets.index(planet2)     if i1 > i2: i1, i2 = i2, i1",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def bf(planet1, planet2): if planet1 not in planets or planet2 not in planets: return () else: return tuple(sorted(planets[planet1][1:planets[planet2][0]+1]))",
        "Ground Truth": "def bf(planet1, planet2): planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"] if planet1 not in planets or planet2 not in planets: return tuple() i1, i2 = planets.index(planet1), planets.index(planet2) if i1 > i2: i1, i2 = i2, i1 return tuple(planets[i1 + 1 : i2])",
        "highlight_llm": "",
        "highlight_gt": "17,19,20"
    },
    {
        "Task ID": 148,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 2,
        "Incorrect Code": "return tuple(sorted(planets[planet1][1:planets[planet2][0]+1]))",
        "Correct Code": "return tuple(planets[i1 + 1 : i2])",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def bf(planet1, planet2): if planet1 not in planets or planet2 not in planets: return () else: return tuple(sorted(planets[planet1][1:planets[planet2][0]+1]))",
        "Ground Truth": "def bf(planet1, planet2): planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"] if planet1 not in planets or planet2 not in planets: return tuple() i1, i2 = planets.index(planet1), planets.index(planet2) if i1 > i2: i1, i2 = i2, i1 return tuple(planets[i1 + 1 : i2])",
        "highlight_llm": "20",
        "highlight_gt": "21"
    },
    {
        "Task ID": 149,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "from functools import cmp_to_key def cmp(s: str, t: str): if len(s) != len(t): return len(s) - len(t) return -1 if s < t else 1",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def sorted_list_sum(lst): return sorted(list(filter(lambda x: len(x) % 2 == 0, lst)))",
        "Ground Truth": "def sorted_list_sum(lst): from functools import cmp_to_key def cmp(s: str, t: str): if len(s) != len(t): return len(s) - len(t) return -1 if s < t else 1 return sorted(list(filter(lambda s: len(s) % 2 == 0, lst)), key=cmp_to_key(cmp))",
        "highlight_llm": "",
        "highlight_gt": "14,15,16,17,18"
    },
    {
        "Task ID": 150,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if n % 2 == 0:",
        "Correct Code": "def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def x_or_y(n, x, y): if n % 2 == 0: return y else: return x",
        "Ground Truth": "def x_or_y(n, x, y): def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) return x if is_prime(n) else y",
        "highlight_llm": "10",
        "highlight_gt": "10,11"
    },
    {
        "Task ID": 151,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if x%2!= 0",
        "Correct Code": "if num % 2 == 1 and num > 0 and \".\" not in str(num):",
        "Semantic Level": "Miss condition",
        "Semantic Error ID": "Aa1",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def double_the_difference(lst): return sum([x**2 for x in lst if x%2!= 0])",
        "Ground Truth": "def double_the_difference(lst): ans = 0 for num in lst: if num % 2 == 1 and num > 0 and \".\" not in str(num): ans += num ** 2 return ans",
        "highlight_llm": "13",
        "highlight_gt": "15"
    },
    {
        "Task ID": 153,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "for i in extensions: cap = 0 sm = 0 for j in i: if j.isupper(): cap += 1 else: sm += 1 strength.append(cap - sm) strength.sort()",
        "Correct Code": "def strength(s: str) -> int: CAP, SM = 0, 0 for ch in s: if ch.isupper(): CAP += 1 if ch.islower(): SM += 1 return CAP - SM max_strength = max(map(strength, extensions)) for e in extensions: if strength(e) == max_strength:",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def Strongest_Extension(class_name, extensions): strength = [] for i in extensions: cap = 0 sm = 0 for j in i: if j.isupper(): cap += 1 else: sm += 1 strength.append(cap - sm) strength.sort() return class_name + '.' + extensions[strength.index(strength[0])]",
        "Ground Truth": "def Strongest_Extension(class_name, extensions): def strength(s: str) -> int: CAP, SM = 0, 0 for ch in s: if ch.isupper(): CAP += 1 if ch.islower(): SM += 1 return CAP - SM max_strength = max(map(strength, extensions)) for e in extensions: if strength(e) == max_strength: return class_name + \".\" + e",
        "highlight_llm": "19,20,21,22,23,24,25,26,27,28",
        "highlight_gt": "18,19,20,21,22,23,24,25,26"
    },
    {
        "Task ID": 154,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "b in a[1:] + a[:1]",
        "Correct Code": "for i in range(0, len(b)): if b[i:] + b[:i] in a: return True",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def cycpattern_check(a , b): return b in a or b in a[1:] + a[:1]",
        "Ground Truth": "def cycpattern_check(a , b): if a == b: return True if b == \"\": return True for i in range(0, len(b)): if b[i:] + b[:i] in a: return True return False",
        "highlight_llm": "11",
        "highlight_gt": "15,16,17"
    },
    {
        "Task ID": 156,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "m = [\"\", \"m\"] c = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"] x = [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"] i = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"] thousands = m[number // 1000] hundreds = c[(number % 1000) // 100] tens = x[(number % 100) // 10] ones = i[number % 10] return thousands + hundreds + tens + ones",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def int_to_mini_roman(number): pass",
        "Ground Truth": "def int_to_mini_roman(number): m = [\"\", \"m\"] c = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"] x = [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"] i = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"] thousands = m[number // 1000] hundreds = c[(number % 1000) // 100] tens = x[(number % 100) // 10] ones = i[number % 10] return thousands + hundreds + tens + ones",
        "highlight_llm": "12",
        "highlight_gt": "12,13,14,15,16,17,18,19,20"
    },
    {
        "Task ID": 157,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "a**2 + b**2 == c**2",
        "Correct Code": "a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def right_angle_triangle(a, b, c): return a**2 + b**2 == c**2",
        "Ground Truth": "def right_angle_triangle(a, b, c): return a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2",
        "highlight_llm": "11",
        "highlight_gt": "12"
    },
    {
        "Task ID": 158,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "mx_ch_cnt, ans = 0, \"\" for word in words: ch_cnt = len(set(word)) if ch_cnt > mx_ch_cnt or (ch_cnt == mx_ch_cnt and word < ans): mx_ch_cnt, ans = ch_cnt, word return ans",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def find_max(words): pass",
        "Ground Truth": "def find_max(words): mx_ch_cnt, ans = 0, \"\" for word in words: ch_cnt = len(set(word)) if ch_cnt > mx_ch_cnt or (ch_cnt == mx_ch_cnt and word < ans): mx_ch_cnt, ans = ch_cnt, word return ans",
        "highlight_llm": "11",
        "highlight_gt": "11,12,13,14,15,16"
    },
    {
        "Task ID": 159,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return [number + need, remaining - need]",
        "Correct Code": "if need <= remaining: return [number + need, remaining - need] else: return [number + remaining, 0]",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def eat(number, need, remaining): return [number + need, remaining - need]",
        "Ground Truth": "def eat(number, need, remaining): if need <= remaining: return [number + need, remaining - need] else: return [number + remaining, 0]",
        "highlight_llm": "30",
        "highlight_gt": "30,31,32,33"
    },
    {
        "Task ID": 160,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "exp = \"\" for i in range(len(operator)): exp += str(operand[i]) + operator[i] exp += str(operand[-1]) return eval(exp)",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def do_algebra(operator, operand): pass",
        "Ground Truth": "def do_algebra(operator, operand): exp = \"\" for i in range(len(operator)): exp += str(operand[i]) + operator[i] exp += str(operand[-1]) return eval(exp)",
        "highlight_llm": "26",
        "highlight_gt": "26,27,28,29,30"
    },
    {
        "Task ID": 161,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return s[::-1]",
        "Correct Code": "ans, has_letter = \"\", False for ch in s: if ch.isalpha(): has_letter = True ans += ch.swapcase() else: ans += ch return ans if has_letter else s[::-1]",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def solve(s): return s[::-1]",
        "Ground Truth": "def solve(s): ans, has_letter = \"\", False for ch in s: if ch.isalpha(): has_letter = True ans += ch.swapcase() else: ans += ch return ans if has_letter else s[::-1]",
        "highlight_llm": "12",
        "highlight_gt": "12,13,14,15,16,17,18,19"
    },
    {
        "Task ID": 162,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "hashlib.md5",
        "Correct Code": "import hashlib ",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Import error",
        "Syntactic Error ID": "Bf1",
        "Generated Code": "def string_to_md5(text): if text == '': return None return hashlib.md5(text.encode('utf-8')).hexdigest()",
        "Ground Truth": "def string_to_md5(text): if text == \"\": return None import hashlib m = hashlib.md5() m.update(text.encode(\"utf-8\")) return m.hexdigest()",
        "highlight_llm": "10",
        "highlight_gt": "9"
    },
    {
        "Task ID": 163,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "if a > b: a, b = b, a",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def generate_integers(a, b): return [i for i in range(a, b + 1) if i % 2 == 0]",
        "Ground Truth": "def generate_integers(a, b): if a > b: a, b = b, a return [i for i in range(a, min(b + 1, 10)) if i % 2 == 0]",
        "highlight_llm": "",
        "highlight_gt": "11"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "in range(a, b + 1)",
        "Correct Code": "in range(a, min(b + 1, 10))",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "11",
        "highlight_gt": "12"
    }
]