[
  {
    "Task ID": 10,
    "Are the correct and incorrect answers similar": "yes",
    "Error ID": 1,
    "Incorrect Code": "for i in range(len(string) - 1, 0, -1):",
    "Correct Code": "for i in range(len(string)):",
    "Semantic Level": "Incorrect condition",
    "Semantic Error ID": "Aa2",
    "Syntactic Level": "For error",
    "Syntactic Error ID": "Bb1",
    "Is the logic of generating code easier": "no",
    "full incorrect code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if is_palindrome(string):\n        return string\n    for i in range(len(string) - 1, 0, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]",
    "full correct code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]",
    "prompt": "\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before \n\t\t\tthe palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"",
    "highlight_llm": "20",
    "highlight_gt": "20"
  },
  {
    "Task ID": "",
    "Are the correct and incorrect answers similar": "",
    "Error ID": 2,
    "Incorrect Code": "return string + string[:i][::-1]\n\n    return string + string[:-1][::-1]",
    "Correct Code": "return string + string[i-1::-1]",
    "Semantic Level": "Incorrect but defined method/variable/attribute name",
    "Semantic Error ID": "Ac1",
    "Syntactic Level": "Incorrect return value",
    "Syntactic Error ID": "Bc2",
    "Is the logic of generating code easier": "",
    "full incorrect code": "",
    "full correct code": "",
    "prompt": "",
    "highlight_llm": "22,24",
    "highlight_gt": "22"
  },
  {
    "Task ID": 22,
    "Are the correct and incorrect answers similar": "no",
    "Error ID": 1,
    "Incorrect Code": "isinstance(value, int)",
    "Correct Code": "type(x) == int",
    "Semantic Level": "Incorrect but defined method/variable/attribute name",
    "Semantic Error ID": "Ac1",
    "Syntactic Level": "Incorrect function name",
    "Syntactic Error ID": "Bd1",
    "Is the logic of generating code easier": "same",
    "full incorrect code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]",
    "full correct code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: type(x) == int, values))",
    "prompt": "\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"",
    "highlight_llm": "11",
    "highlight_gt": "11"
  },
  {
    "Task ID": 32,
    "Are the correct and incorrect answers similar": "no",
    "Error ID": 1,
    "Incorrect Code": "def bisection(a: float, b: float, tol: float = 1e-6, max_iter: int = 1000):\n        iter_count = 0\n        while iter_count < max_iter:\n            c = (a + b) / 2\n            if poly(xs, c) == 0 or (b - a) / 2 < tol:\n                return c\n            iter_count += 1\n            if poly(xs, a) * poly(xs, c) < 0:\n                b = c\n            else:\n                a = c\n        return None\n    # Find the interval where the zero is located\n    a, b = -100, 100\n    while poly(xs, a) * poly(xs, b) > 0:\n        a -= 100\n        b += 100",
    "Correct Code": "dxs = [xs[i] * i for i in range(1, len(xs))]\n    def func(x):\n        return poly(xs, x)\n    def derivative(x):\n        return poly(dxs, x)\n    x, tol = 0, 1e-5\n    for _ in range(1000):\n        fx = func(x)\n        dfx = derivative(x)\n        if abs(fx) < tol: break\n        x = x - fx / dfx",
    "Semantic Level": "Wrong (logical) direction",
    "Semantic Error ID": "Ae3",
    "Syntactic Level": "incorrect code block",
    "Syntactic Error ID": "Bg1",
    "Is the logic of generating code easier": "no",
    "full incorrect code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    def bisection(a: float, b: float, tol: float = 1e-6, max_iter: int = 1000):\n        iter_count = 0\n        while iter_count < max_iter:\n            c = (a + b) / 2\n            if poly(xs, c) == 0 or (b - a) / 2 < tol:\n                return c\n            iter_count += 1\n            if poly(xs, a) * poly(xs, c) < 0:\n                b = c\n            else:\n                a = c\n        return None\n    # Find the interval where the zero is located\n    a, b = -100, 100\n    while poly(xs, a) * poly(xs, b) > 0:\n        a -= 100\n        b += 100\n\n    return bisection(a, b)",
    "full correct code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    dxs = [xs[i] * i for i in range(1, len(xs))]\n    def func(x):\n        return poly(xs, x)\n    def derivative(x):\n        return poly(dxs, x)\n    x, tol = 0, 1e-5\n    for _ in range(1000):\n        fx = func(x)\n        dfx = derivative(x)\n        if abs(fx) < tol: break\n        x = x - fx / dfx\n    return x",
    "prompt": "\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"",
    "highlight_llm": "24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,43",
    "highlight_gt": "24,25,26,27,28,30,31,32,33,34,35"
  },
  {
    "Task ID": 43,
    "Are the correct and incorrect answers similar": "no",
    "Error ID": 1,
    "Incorrect Code": "if -num in elements and num != 0:",
    "Correct Code": "if i != j and l[i] + l[j] == 0:",
    "Semantic Level": "Incorrect condition",
    "Semantic Error ID": "Aa2",
    "Syntactic Level": "If error",
    "Syntactic Error ID": "Ba1",
    "Is the logic of generating code easier": "no",
    "full incorrect code": "def pairs_sum_to_zero(l):\n    # Create a set to store the elements of the list\n    elements = set(l)\n    # Iterate through the elements in the list\n    for num in elements:\n        # Check if the negative of the current element is in the set\n        if -num in elements and num != 0:\n            return True\n    # If no pairs sum to zero, return False\n    return False",
    "full correct code": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if i != j and l[i] + l[j] == 0:\n                return True\n    return False",
    "prompt": "\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"",
    "highlight_llm": "23",
    "highlight_gt": "19"
  },
  {
    "Task ID": 48,
    "Are the correct and incorrect answers similar": "no",
    "Error ID": 1,
    "Incorrect Code": "cleaned_text = ''.join(char.lower() for char in text if char.isalnum())",
    "Correct Code": "",
    "Semantic Level": "Wrong (logical) direction",
    "Semantic Error ID": "Ae3",
    "Syntactic Level": "incorrect code block",
    "Syntactic Error ID": "Bg1",
    "Is the logic of generating code easier": "no",
    "full incorrect code": "def is_palindrome(text: str):\n    # Remove any non-alphanumeric characters and convert to lowercase\n    cleaned_text = ''.join(char.lower() for char in text if char.isalnum())\n    # Compare the cleaned text with its reverse\n    return cleaned_text == cleaned_text[::-1]",
    "full correct code": "def is_palindrome(text: str):\n    return text == text[::-1]",
    "prompt": "\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"",
    "highlight_llm": "14",
    "highlight_gt": ""
  },
  {
    "Task ID": 55,
    "Are the correct and incorrect answers similar": "no",
    "Error ID": 1,
    "Incorrect Code": "",
    "Correct Code": "if n == 0: return 0",
    "Semantic Level": "Missing one statement",
    "Semantic Error ID": "Af1",
    "Syntactic Level": "missing code block",
    "Syntactic Error ID": "Bg2",
    "Is the logic of generating code easier": "no",
    "full incorrect code": "# CANNOT PARSE CODE SNIPPET\ndef fib(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n# Test cases\nprint(fib(10))  # Output: 55\nprint(fib(1))   # Output: 1\nprint(fib(8))   # Output: 21",
    "full correct code": "def fib(n: int):\n    if n == 0: return 0\n    if n <= 2: return 1\n    a, b = 1, 1\n    for _ in range(3, n + 1):\n        a, b, = b, a + b\n    return b",
    "prompt": "\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"",
    "highlight_llm": "",
    "highlight_gt": "10"
  },
  {
    "Task ID": "",
    "Are the correct and incorrect answers similar": "",
    "Error ID": 2,
    "Incorrect Code": "else:\n        return fib(n - 1) + fib(n - 2)",
    "Correct Code": "a, b = 1, 1\n    for _ in range(3, n + 1):\n        a, b, = b, a + b\n    return b",
    "Semantic Level": "Infinite Loop",
    "Semantic Error ID": "Ag1",
    "Syntactic Level": "incorrect code block",
    "Syntactic Error ID": "Bg1",
    "Is the logic of generating code easier": "",
    "full incorrect code": "",
    "full correct code": "",
    "prompt": "",
    "highlight_llm": "13,14",
    "highlight_gt": "12,13,14,15"
  },
  {
    "Task ID": 64,
    "Are the correct and incorrect answers similar": "no",
    "Error ID": 1,
    "Incorrect Code": "",
    "Correct Code": "if s == \"\": return 0",
    "Semantic Level": "Missing one statement",
    "Semantic Error ID": "Af1",
    "Syntactic Level": "missing code block",
    "Syntactic Error ID": "Bg2",
    "Is the logic of generating code easier": "same",
    "full incorrect code": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    s = s.lower()\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == 'y':\n        count += 1\n   return count",
    "full correct code": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt",
    "prompt": "\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"",
    "highlight_llm": "",
    "highlight_gt": "16"
  },
  {
    "Task ID": 68,
    "Are the correct and incorrect answers similar": "no",
    "Error ID": 1,
    "Incorrect Code": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [smallest_value, its index],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so w",
    "Correct Code": "def pluck(arr):\n\n    if all(val % 2 == 1 for val in arr): return []\n    min_even = min(filter(lambda x: x % 2 == 0, arr))\n    for i in range(len(arr)):\n        if arr[i] == min_even:\n            return [min_even, i]",
    "Semantic Level": "Only comments",
    "Semantic Error ID": "Ae1",
    "Syntactic Level": "missing code block",
    "Syntactic Error ID": "Bg2",
    "Is the logic of generating code easier": "no",
    "full incorrect code": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [smallest_value, its index],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so w",
    "full correct code": "def pluck(arr):\n\n    if all(val % 2 == 1 for val in arr): return []\n    min_even = min(filter(lambda x: x % 2 == 0, arr))\n    for i in range(len(arr)):\n        if arr[i] == min_even:\n            return [min_even, i]",
    "prompt": "\"\"\n    \"Given an array representing a branch of a tree that has non-negative \n\t\tinteger nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node \n\t\tthat has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"",
    "highlight_llm": "2,3,4,5,6,8,9,11,12,13,14,16,17,18,19,21,22,23,25,26,27,28,29",
    "highlight_gt": "2,3,4,5,6,8,9,11,12,13,14,16,17,18,19,21,22,23,25,26,27,28,29,31,32,33,34,35,36,37,38,39"
  },
  {
    "Task ID": 74,
    "Are the correct and incorrect answers similar": "no",
    "Error ID": 1,
    "Incorrect Code": "if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2",
    "Correct Code": "return lst1 if c1 <= c2 else lst2",
    "Semantic Level": "Miss condition",
    "Semantic Error ID": "Aa1",
    "Syntactic Level": "If error",
    "Syntactic Error ID": "Ba1",
    "Is the logic of generating code easier": "same",
    "full incorrect code": "# CANNOT PARSE\ndef total_match(lst1, lst2):\n    # Calculate the total number of chars in each list\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    # Compare the total number of chars and return the list with less chars\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2",
    "full correct code": "def total_match(lst1, lst2):\n    c1, c2 = sum(map(lambda s: len(s), lst1)), sum(map(lambda s: len(s), lst2))\n    return lst1 if c1 <= c2 else lst2",
    "prompt": "'''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) ➞ []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n    '''",
    "highlight_llm": "22,23,24,25",
    "highlight_gt": "16"
  },
  {
    "Task ID": 75,
    "Are the correct and incorrect answers similar": "no",
    "Error ID": 1,
    "Incorrect Code": "prime_factors = []\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            prime_factors.append(i)\n            a = a // i",
    "Correct Code": "cnt, tmp = 0, a\n    for i in range(2, a + 1):\n        while isprime[i] and tmp % i == 0:\n            tmp //= i",
    "Semantic Level": "Wrong (logical) direction",
    "Semantic Error ID": "Ae3",
    "Syntactic Level": "incorrect code block",
    "Syntactic Error ID": "Bg1",
    "Is the logic of generating code easier": "no",
    "full incorrect code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    if a >= 100:\n        return False\n    prime_factors = []\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            prime_factors.append(i)\n            a = a // i\n            if len(prime_factors) == 3 and a == 1:\n                return True\n            if len(prime_factors) > 3:\n                return False\n    return False",
    "full correct code": "def is_multiply_prime(a):\n    if a <= 1: return False\n    isprime = [True] * (a + 1)\n    for i in range(2, a + 1):\n        if isprime[i]:\n            for j in range(i + i, a + 1, i):\n                isprime[j] = False\n    cnt, tmp = 0, a\n    for i in range(2, a + 1):\n        while isprime[i] and tmp % i == 0:\n            tmp //= i\n            cnt += 1\n    return cnt == 3",
    "prompt": "\"\"Write a function that returns true if the given number is the multiplication \n\t\tof 3 prime numbers and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"",
    "highlight_llm": "20,21,22,23,24",
    "highlight_gt": "15,16,17,18"
  },
  {
    "Task ID": 76,
    "Are the correct and incorrect answers similar": "no",
    "Error ID": 1,
    "Incorrect Code": "i = 0\n    while n ** i <= x:\n        if n ** i == x:\n            return True\n        i += 1",
    "Correct Code": "p = n\n    while abs(p) <= abs(x):\n        if p == x: return True\n        p = p * n",
    "Semantic Level": "Missing multiple statements",
    "Semantic Error ID": "Af2",
    "Syntactic Level": "missing code block",
    "Syntactic Error ID": "Bg2",
    "Is the logic of generating code easier": "no",
    "full incorrect code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    i = 0\n    while n ** i <= x:\n        if n ** i == x:\n            return True\n        i += 1\n    return False",
    "full correct code": "def is_simple_power(x, n):\n    if x == 1: return True\n    if n == 0: return x == 0\n    if n == 1: return x == 1\n    if n == -1: return abs(x) == 1\n    p = n\n    while abs(p) <= abs(x):\n        if p == x: return True\n        p = p * n\n    return False",
    "prompt": "\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"",
    "highlight_llm": "15,16,17,18,19",
    "highlight_gt": "17,18,19,20"
  },
  {
    "Task ID": 83,
    "Are the correct and incorrect answers similar": "yes",
    "Error ID": 1,
    "Incorrect Code": "if n == 1:\n        return 2",
    "Correct Code": "if n == 1: return 1",
    "Semantic Level": "Constant Value Error",
    "Semantic Error ID": "Ab1",
    "Syntactic Level": "Incorrect return value",
    "Syntactic Error ID": "Bc2",
    "Is the logic of generating code easier": "no",
    "full incorrect code": "def starts_one_ends(n):\n\n    if n == 1:\n        return 2  # 1 and 10\n    else:\n        return 2 * (10 ** (n - 1)) - 10 ** (n - 2)",
    "full correct code": "def starts_one_ends(n):\n    if n == 1: return 1\n    return 18 * 10 ** (n - 2)",
    "prompt": "\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"",
    "highlight_llm": "6,7",
    "highlight_gt": "6"
  },
  {
    "Task ID": "",
    "Are the correct and incorrect answers similar": "",
    "Error ID": 2,
    "Incorrect Code": "2 * (10 ** (n - 1)) - 10 ** (n - 2)",
    "Correct Code": "18 * 10 ** (n - 2)",
    "Semantic Level": "Incorrect arithmetic operation",
    "Semantic Error ID": "Ad1",
    "Syntactic Level": "Incorrect arithmetic",
    "Syntactic Error ID": "Be1",
    "Is the logic of generating code easier": "",
    "full incorrect code": "",
    "full correct code": "",
    "prompt": "",
    "highlight_llm": "9",
    "highlight_gt": "7"
  },
  {
    "Task ID": 84,
    "Are the correct and incorrect answers similar": "no",
    "Error ID": 1,
    "Incorrect Code": "# Convert the integer to binary and remove the '0b' prefix\n    binary_n = bin(N)[2:]    # Calculate the sum of digits in binary\n    sum_of_digits = sum(int(digit) for digit in binary_n)",
    "Correct Code": "s = sum(map(lambda x: int(x), str(N)))",
    "Semantic Level": "Wrong (logical) direction",
    "Semantic Error ID": "Ae3",
    "Syntactic Level": "incorrect code block",
    "Syntactic Error ID": "Bg1",
    "Is the logic of generating code easier": "no",
    "full incorrect code": "def solve(N):\n    # Convert the integer to binary and remove the '0b' prefix\n    binary_n = bin(N)[2:]\n    # Calculate the sum of digits in binary\n    sum_of_digits = sum(int(digit) for digit in binary_n)\n    # Convert the sum of digits to binary and return as a string\n    return bin(sum_of_digits)[2:]",
    "full correct code": "def solve(N):\n    s = sum(map(lambda x: int(x), str(N)))\n    return bin(s)[2:]",
    "prompt": "\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"",
    "highlight_llm": "15,16,18,19",
    "highlight_gt": "15"
  },
  {
    "Task ID": 91,
    "Are the correct and incorrect answers similar": "no",
    "Error ID": 1,
    "Incorrect Code": "re.split",
    "Correct Code": "",
    "Semantic Level": "Undefined name",
    "Semantic Error ID": "Ac2",
    "Syntactic Level": "Import error",
    "Syntactic Error ID": "Bf1",
    "Is the logic of generating code easier": "no",
    "full incorrect code": "def is_bored(S):\n    # Split the input string into sentences\n    sentences = [s.strip() for s in re.split('[.!?]', S)]\n    # Count the number of sentences that start with \"I\"\n    boredoms = sum(1 for s in sentences if s.startswith(\"I\"))\n    return boredoms",
    "full correct code": "def is_bored(S):\n    sentences = map(lambda x: x.strip(), ((S.replace(\"?\", \".\")).replace(\"!\", \".\")).split(\".\"))\n    return len([s for s in sentences if s.startswith(\"I \")])",
    "prompt": "\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"",
    "highlight_llm": "14",
    "highlight_gt": ""
  },
  {
    "Task ID": "",
    "Are the correct and incorrect answers similar": "",
    "Error ID": 2,
    "Incorrect Code": "s.startswith(\"I\")",
    "Correct Code": "s.startswith(\"I \")",
    "Semantic Level": "Constant Value Error",
    "Semantic Error ID": "Ab1",
    "Syntactic Level": "If error",
    "Syntactic Error ID": "Ba1",
    "Is the logic of generating code easier": "",
    "full incorrect code": "",
    "full correct code": "",
    "prompt": "",
    "highlight_llm": "17",
    "highlight_gt": "14"
  },
  {
    "Task ID": 93,
    "Are the correct and incorrect answers similar": "no",
    "Error ID": 1,
    "Incorrect Code": "if char.islower():\n                    encoded_message += chr(((ord(char) - ord('a') + 2) % 26) + ord('a'))\n                else:\n                    encoded_message += chr(((ord(char) - ord('A') + 2) % 26) + ord('A'))",
    "Correct Code": "def switch_case(ch):\n        if ord(\"A\") <= ord(ch) <= ord(\"Z\"):\n            return chr(ord(ch) + 32)\n        elif ord(\"a\") <= ord(ch) <= ord(\"z\"):\n            return chr(ord(ch) - 32)\n        else:\n            return ch",
    "Semantic Level": "Missing one statement",
    "Semantic Error ID": "Af1",
    "Syntactic Level": "missing code block",
    "Syntactic Error ID": "Bg2",
    "Is the logic of generating code easier": "same",
    "full incorrect code": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                if char.islower():\n                    encoded_message += chr(((ord(char) - ord('a') + 2) % 26) + ord('a'))\n                else:\n                    encoded_message += chr(((ord(char) - ord('A') + 2) % 26) + ord('A'))\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message",
    "full correct code": "def encode(message):\n    def switch_case(ch):\n        if ord(\"A\") <= ord(ch) <= ord(\"Z\"):\n            return chr(ord(ch) + 32)\n        elif ord(\"a\") <= ord(ch) <= ord(\"z\"):\n            return chr(ord(ch) - 32)\n        else:\n            return ch\n    def vowel_change(ch):\n        return ch if ch not in \"aeiouAEIOU\" else chr(ord(ch) + 2)\n    m = \"\".join(map(switch_case, message))\n    return \"\".join(map(vowel_change, m))",
    "prompt": "\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"",
    "highlight_llm": "21,22,23,24",
    "highlight_gt": "15,16,17,18,19,20,21"
  },
  {
    "Task ID": 95,
    "Are the correct and incorrect answers similar": "yes",
    "Error ID": 1,
    "Incorrect Code": "if key != key.lower():\n            lower_case = False\n        if key != key.upper():\n            upper_case = False",
    "Correct Code": "if not k.islower(): lower = False\n        if not k.isupper(): upper = False",
    "Semantic Level": "Incorrect condition",
    "Semantic Error ID": "Aa2",
    "Syntactic Level": "If error",
    "Syntactic Error ID": "Ba1",
    "Is the logic of generating code easier": "same",
    "full incorrect code": "# CANNOT PARSE\ndef check_dict_case(dict):\n    if not dict:\n        return False\n    lower_case = True\n    upper_case = True\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key != key.lower():\n            lower_case = False\n        if key != key.upper():\n            upper_case = False\n    return lower_case or upper_case\n\n# Test cases\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})) # should return True\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})) # should return False\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})) # should return False\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})) # should return False\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })) # should return True",
    "full correct code": "def check_dict_case(dict):\n    keys = list(dict.keys())\n    if keys == []: return False\n    lower, upper = True, True\n    for k in keys:\n        if type(k) != str:\n            lower = upper = False\n            break\n        if not k.islower(): lower = False\n        if not k.isupper(): upper = False\n    return lower or upper",
    "prompt": "\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"",
    "highlight_llm": "24,25,26,27",
    "highlight_gt": "20,21"
  },
  {
    "Task ID": 108,
    "Are the correct and incorrect answers similar": "no",
    "Error ID": 1,
    "Incorrect Code": "digit = num % 10\n            num //= 10",
    "Correct Code": "l = list(str(x))",
    "Semantic Level": "Wrong (logical) direction",
    "Semantic Error ID": "Ae3",
    "Syntactic Level": "Incorrect code block",
    "Syntactic Error ID": "Bg1",
    "Is the logic of generating code easier": "no",
    "full incorrect code": "def count_nums(arr):\n    def sum_of_digits(num):\n        if num < 0:\n            num = -num\n            first_digit = True\n        else:\n            first_digit = False\n        sum_digits = 0\n        while num > 0:\n            digit = num % 10\n            if first_digit:\n                digit = -digit\n                first_digit = False\n            sum_digits += digit\n            num //= 10\n        return sum_digits\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count",
    "full correct code": "def count_nums(arr):\n    def judge(x: int) -> int:\n        l = list(str(x))\n        if l[0] == \"-\":\n            l = l[1:]\n            l = list(map(int, l))\n            l[0] = -l[0]\n        else:\n            l = list(map(int, l))\n        return 1 if sum(l) > 0 else 0\n    return sum(map(judge, arr))",
    "prompt": "\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"",
    "highlight_llm": "21,26",
    "highlight_gt": "12"
  },
  {
    "Task ID": 109,
    "Are the correct and incorrect answers similar": "no",
    "Error ID": 1,
    "Incorrect Code": "# CANNOT PARSE\ndef move_one_ball(arr):\n    if not arr:\n        return True\n    n = len(arr)\n    count = 0\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            count += 1\n            index = i\n    if count > 1:\n        return False\n    if count == 0:\n        return True\n    if index == n - 2 and arr[-1] <= arr[0]:\n        return True\n    if index == 0 and arr[-1] <= arr[1]:\n        return True\n    if 0 < index < n - 2 and arr[index - 1] <= arr[index + 1] and arr[index] <= arr[index + 2]:\n        return True\n    return False",
    "Correct Code": "def move_one_ball(arr):\n    \n    sorted_arr = sorted(arr)\n    if arr == sorted_arr: return True\n    for i in range(1, len(arr)):\n        if arr[i:] + arr[:i] == sorted_arr:\n            return True\n    return False",
    "Semantic Level": "Wrong (logical) direction",
    "Semantic Error ID": "Ae3",
    "Syntactic Level": "incorrect code block",
    "Syntactic Error ID": "Bg1",
    "Is the logic of generating code easier": "no",
    "full incorrect code": "# CANNOT PARSE\ndef move_one_ball(arr):\n    if not arr:\n        return True\n    n = len(arr)\n    count = 0\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            count += 1\n            index = i\n    if count > 1:\n        return False\n    if count == 0:\n        return True\n    if index == n - 2 and arr[-1] <= arr[0]:\n        return True\n    if index == 0 and arr[-1] <= arr[1]:\n        return True\n    if 0 < index < n - 2 and arr[index - 1] <= arr[index + 1] and arr[index] <= arr[index + 2]:\n        return True\n    return False",
    "full correct code": "def move_one_ball(arr):\n    sorted_arr = sorted(arr)\n    if arr == sorted_arr: return True\n    for i in range(1, len(arr)):\n        if arr[i:] + arr[:i] == sorted_arr:\n            return True\n    return False",
    "prompt": "\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"",
    "highlight_llm": "1,2,3,4,6,7,9,10,11,12,14,15,17,18,20,21,23,24,26,27,29",
    "highlight_gt": "29,30,31,32,33,34"
  },
  {
    "Task ID": 115,
    "Are the correct and incorrect answers similar": "yes",
    "Error ID": 1,
    "Incorrect Code": "def count_water_units(grid):\n        count = 0\n        for row in grid:\n            count += row.count(1)\n        return count\n    water_units = count_water_units(grid)",
    "Correct Code": "for l in grid:\n        ans += math.ceil(sum(l) / capacity)",
    "Semantic Level": "Wrong (logical) direction",
    "Semantic Error ID": "Ae3",
    "Syntactic Level": "incorrect code block",
    "Syntactic Error ID": "Bg1",
    "Is the logic of generating code easier": "no",
    "full incorrect code": "def max_fill(grid, capacity):\n    import math\n    def count_water_units(grid):\n        count = 0\n        for row in grid:\n            count += row.count(1)\n        return count\n    water_units = count_water_units(grid)\n    bucket_count = math.ceil(water_units / capacity)\n    return bucket_count",
    "full correct code": "def max_fill(grid, capacity):\n    import math\n    ans = 0    \n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return ans",
    "prompt": "\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"",
    "highlight_llm": "4,5,6,7,8,10",
    "highlight_gt": "42,43"
  },
  {
    "Task ID": 120,
    "Are the correct and incorrect answers similar": "no",
    "Error ID": 1,
    "Incorrect Code": "arr[:k]",
    "Correct Code": "sorted",
    "Semantic Level": "Missing one statement",
    "Semantic Error ID": "Af1",
    "Syntactic Level": "missing code block",
    "Syntactic Error ID": "Bg2",
    "Is the logic of generating code easier": "same",
    "full incorrect code": "def maximum(arr, k):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Return the first k elements of the sorted array\n    return arr[:k]",
    "full correct code": "def maximum(arr, k):\n    return sorted(sorted(arr)[::-1][:k])",
    "prompt": "\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"",
    "highlight_llm": "30",
    "highlight_gt": "26"
  },
  {
    "Task ID": 124,
    "Are the correct and incorrect answers similar": "no",
    "Error ID": 1,
    "Incorrect Code": "month, day, year = date.split('-')",
    "Correct Code": "m, d, y = date[:2], date[3:5], date[6:]",
    "Semantic Level": "Missing one statement",
    "Semantic Error ID": "Af1",
    "Syntactic Level": "missing code block",
    "Syntactic Error ID": "Bg2",
    "Is the logic of generating code easier": "same",
    "full incorrect code": "# CANNOT PARSE\ndef valid_date(date):\n    if not date:\n        return False\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    month, day, year = date.split('-')\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    else:  # month == 2\n        if day < 1 or day > 29:\n            return False\n    return True",
    "full correct code": "def valid_date(date):\n    days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if len(date) != 10: return False\n    if date[2] != \"-\" or date[5] != \"-\": return False\n    m, d, y = date[:2], date[3:5], date[6:]\n    if not m.isdigit() or not d.isdigit() or not y.isdigit(): return False\n    m, d = int(m), int(d)\n    if not 1 <= m <= 12: return False\n    if not 1 <= d <= days[m-1]: return False\n    return True",
    "prompt": "\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for \n\t\t\t\tmonths 1,3,5,7,8,10,12. And the number of days is not less than 1 or \n\t\t\t\thigher than 30 days for months 4,6,9,11. And, the number of days is not\n\t\t\t\tless than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"",
    "highlight_llm": "28",
    "highlight_gt": "24"
  },
  {
    "Task ID": 129,
    "Are the correct and incorrect answers similar": "no",
    "Error ID": 1,
    "Incorrect Code": "if new_path[-1] < min_path[-1]:\n                min_path = new_path\n            if path[-1] < min_path[-1]:\n                min_path = path",
    "Correct Code": "",
    "Semantic Level": "Incorrect condition",
    "Semantic Error ID": "Aa2",
    "Syntactic Level": "If error",
    "Syntactic Error ID": "Ba1",
    "Is the logic of generating code easier": "no",
    "full incorrect code": "def minPath(grid, k):\n    def neighbors(r, c):\n        for nr, nc in ((r-1, c), (r+1, c), (r, c-1), (r, c+1)):\n            if 0 <= nr < len(grid) and 0 <= nc < len(grid[0]):\n                yield nr, nc\n    def dfs(r, c, path, k):\n        if k == 0:\n            return path\n        min_path = path + [float('inf')] * k\n        for nr, nc in neighbors(r, c):\n            new_path = dfs(nr, nc, path + [grid[nr][nc]], k - 1)\n            if new_path[-1] < min_path[-1]:\n                min_path = new_path\n        return min_path\n    min_path = [float('inf')] * k\n    for r in range(len(grid)):\n        for c in range(len(grid[0])):\n            path = dfs(r, c, [grid[r][c]], k - 1)\n            if path[-1] < min_path[-1]:\n                min_path = path\n    return min_path",
    "full correct code": "def minPath(grid, k):\n    N = len(grid)\n    x, y = 0, 0\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == 1:\n                x, y = i, j\n    mn = N * N\n    if x > 0: mn = min(mn, grid[x - 1][y])\n    if x < N - 1: mn = min(mn, grid[x + 1][y])\n    if y > 0: mn = min(mn, grid[x][y - 1])\n    if y < N - 1: mn = min(mn, grid[x][y + 1])\n    return [1 if i % 2 == 0 else mn for i in range(k)]",
    "prompt": "\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go \n\t\tthrough.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"",
    "highlight_llm": "13,14,21,22",
    "highlight_gt": ""
  },
  {
    "Task ID": 132,
    "Are the correct and incorrect answers similar": "no",
    "Error ID": 1,
    "Incorrect Code": "",
    "Correct Code": "max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break",
    "Semantic Level": "Missing multiple statements",
    "Semantic Error ID": "Af2",
    "Syntactic Level": "missing code block",
    "Syntactic Error ID": "Bg2",
    "Is the logic of generating code easier": "no",
    "full incorrect code": "def is_nested(string):\n    stack = []\n    nested = False\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                nested = True\n    return nested and not stack",
    "full correct code": "def is_nested(string):\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
    "prompt": "'''\n    Create a function that takes a string as input which contains only square \n\t\tbrackets.\n    The function should return True if and only if there is a valid subsequence \n\t\tof brackets where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') ➞ True\n    is_nested('[]]]]]]][[[[[]') ➞ False\n    is_nested('[][]') ➞ False\n    is_nested('[]') ➞ False\n    is_nested('[[][]]') ➞ True\n    is_nested('[[]][[') ➞ True\n    '''",
    "highlight_llm": "",
    "highlight_gt": "23,24,25,26,27"
  },
  {
    "Task ID": 141,
    "Are the correct and incorrect answers similar": "no",
    "Error ID": 1,
    "Incorrect Code": "if not re.match(r'^[a-zA-Z]', name):",
    "Correct Code": "if not f_list[0][0].isalpha()",
    "Semantic Level": "Incorrect condition",
    "Semantic Error ID": "Aa2",
    "Syntactic Level": "If error",
    "Syntactic Error ID": "Ba1",
    "Is the logic of generating code easier": "no",
    "full incorrect code": "def file_name_check(file_name):\n    import re\n    # Check if the file name contains exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    # Check if the name starts with a latin alphabet letter\n    if not re.match(r'^[a-zA-Z]', name):\n        return 'No'\n    # Check if the name contains more than three digits\n    if len(re.findall(r'\\d', name)) > 3:\n        return 'No'\n    # Check if the extension is one of the allowed extensions\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'",
    "full correct code": "def file_name_check(file_name):\n    if len(list(filter(lambda ch: ch.isdigit(), file_name))) > 3:\n        return \"No\"\n    f_list = file_name.split(\".\")\n    if len(f_list) != 2: return \"No\"\n    if len(f_list[0]) == 0: return \"No\"\n    if not f_list[0][0].isalpha(): return \"No\"\n    if f_list[1] not in [\"txt\", \"exe\", \"dll\"]: return \"No\"\n    return \"Yes",
    "prompt": "\"\"Create a function which takes a string representing a file's name, and \n\t\treturns 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following \n\t\tconditions are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter \n\t\t\tfrom the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin \n\t\talphapet letter)\n    \"\"",
    "highlight_llm": "12",
    "highlight_gt": "20"
  },
  {
    "Task ID": 142,
    "Are the correct and incorrect answers similar": "yes",
    "Error ID": 1,
    "Incorrect Code": "if i % 3 == 0 and i % 4 != 0:",
    "Correct Code": "if i % 3 == 0:",
    "Semantic Level": "Incorrect condition",
    "Semantic Error ID": "Aa2",
    "Syntactic Level": "If error",
    "Syntactic Error ID": "Ba1",
    "Is the logic of generating code easier": "same",
    "full incorrect code": "# CANNOT PARSE\ndef sum_squares(lst):\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0 and i % 4 != 0:\n            result += num ** 2\n        elif i % 4 == 0:\n            result += num ** 3\n        else:\n            result += num\n    return result",
    "full correct code": "def sum_squares(lst):\n    ans = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            ans += num ** 2\n        elif i % 4 == 0:\n            ans += num ** 3\n        else:\n            ans += num\n    return ans",
    "prompt": "\"\"\"\n    This function will take a list of integers. For all entries in the list, \n\t\tthe function shall square the integer entry if its index is a multiple of 3 \n\t\tand will cube the integer entry if its index is a multiple of 4 and not a \n\t\tmultiple of 3. The function will not change the entries in the list \n\t\twhose indexes are not a multiple of 3 or 4. The function shall then return \n\t\tthe sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"",
    "highlight_llm": "15",
    "highlight_gt": "14"
  },
  {
    "Task ID": 144,
    "Are the correct and incorrect answers similar": "no",
    "Error ID": 1,
    "Incorrect Code": "def fraction_to_float(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator / denominator",
    "Correct Code": "return (x1 * n1) % (x2 * n2) == 0",
    "Semantic Level": "Wrong (logical) direction",
    "Semantic Error ID": "Ae3",
    "Syntactic Level": "incorrect code block",
    "Syntactic Error ID": "Bg1",
    "Is the logic of generating code easier": "no",
    "full incorrect code": "def simplify(x, n):\n    def fraction_to_float(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator / denominator\n    x_float = fraction_to_float(x)\n    n_float = fraction_to_float(n)\n    result = x_float * n_float\n    return result.is_integer()",
    "full correct code": "def simplify(x, n):\n    x1, x2 = map(int, x.split(\"/\"))\n    n1, n2 = map(int, n.split(\"/\"))\n    return (x1 * n1) % (x2 * n2) == 0",
    "prompt": "\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the \n\t\tfollowing format,\n    <numerator>/<denominator> where both numerator and denominator are positive \n\t\twhole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as \n\t\tdenominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"",
    "highlight_llm": "2,3,4",
    "highlight_gt": "20"
  },
  {
    "Task ID": 145,
    "Are the correct and incorrect answers similar": "no",
    "Error ID": 1,
    "Incorrect Code": "sum(int(digit) for digit in str(abs(num)))",
    "Correct Code": "x_list = list(str(x))\n        if x_list[0] == \"-\":\n            x_list = x_list[1:]\n            x_list = list(map(int, x_list))\n            x_list[0] = -x_list[0]\n        else:\n            x_list = list(map(int, x_list))\n        return sum(x_list)",
    "Semantic Level": "Missing multiple statements",
    "Semantic Error ID": "Af2",
    "Syntactic Level": "missing code block",
    "Syntactic Error ID": "Bg2",
    "Is the logic of generating code easier": "no",
    "full incorrect code": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))",
    "full correct code": "def order_by_points(nums):\n    def weight(x):\n        x_list = list(str(x))\n        if x_list[0] == \"-\":\n            x_list = x_list[1:]\n            x_list = list(map(int, x_list))\n            x_list[0] = -x_list[0]\n        else:\n            x_list = list(map(int, x_list))\n        return sum(x_list)\n    return sorted(nums, key=weight)",
    "prompt": "\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"",
    "highlight_llm": "14",
    "highlight_gt": "13,14,15,16,17,18,19,20"
  },
  {
    "Task ID": 154,
    "Are the correct and incorrect answers similar": "yes",
    "Error ID": 1,
    "Incorrect Code": "",
    "Correct Code": "if b == \"\":\n        return True",
    "Semantic Level": "Missing one statement",
    "Semantic Error ID": "Af1",
    "Syntactic Level": "missing code block",
    "Syntactic Error ID": "Bg2",
    "Is the logic of generating code easier": "same",
    "full incorrect code": "def cycpattern_check(a , b):\n    if len(b) > len(a):\n        return False\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n    return False",
    "full correct code": "def cycpattern_check(a , b):\n    if a == b:\n        return True\n    if b == \"\":\n        return True\n    for i in range(0, len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False",
    "prompt": "\"\"You are given 2 words. You need to return True if the second word or any of \n\t\t\t\tits rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"",
    "highlight_llm": "",
    "highlight_gt": "13,14"
  },
  {
    "Task ID": 160,
    "Are the correct and incorrect answers similar": "no",
    "Error ID": 1,
    "Incorrect Code": "if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]",
    "Correct Code": "eval(exp)",
    "Semantic Level": "Wrong (logical) direction",
    "Semantic Error ID": "Ae3",
    "Syntactic Level": "incorrect code block",
    "Syntactic Error ID": "Bg1",
    "Is the logic of generating code easier": "no",
    "full incorrect code": "# CANNOT PARSE\ndef do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result",
    "full correct code": "def do_algebra(operator, operand):\n    exp = \"\"\n    for i in range(len(operator)):\n        exp += str(operand[i]) + operator[i]\n    exp += str(operand[-1])\n    return eval(exp)",
    "prompt": "\"\"\n    Given two lists operator, and operand. The first list has basic algebra \n\t\toperations, and the second list is a list of integers. Use the two given \n\t\tlists to build the algebric expression and return the evaluation of this \n\t\texpression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n       The length of operator list is equal to the length of operand list minus one.\n       Operand is a list of of non-negative integers.\n       Operator list has at least one operator, and operand list has at least two \n\t\t\t\toperands.\n\n    \"\"",
    "highlight_llm": "29,30,31,32,33,34,35,36,37,38",
    "highlight_gt": "30"
  },
  {
    "Task ID": 163,
    "Are the correct and incorrect answers similar": "yes",
    "Error ID": 1,
    "Incorrect Code": "for i in range(a, b + 1):",
    "Correct Code": "for i in range(a, min(b + 1, 10))",
    "Semantic Level": "Incorrect condition",
    "Semantic Error ID": "Aa2",
    "Syntactic Level": "For error",
    "Syntactic Error ID": "Bb1",
    "Is the logic of generating code easier": "same",
    "full incorrect code": "def generate_integers(a, b):\n    # Ensure a is the smaller number\n    if a > b:\n        a, b = b, a\n    # Initialize the result list\n    result = []\n    # Iterate through the range of numbers between a and b\n    for i in range(a, b + 1):\n        # Check if the number is even\n        if i % 2 == 0:\n            # Add the even number to the result list\n            result.append(i)\n    return result",
    "full correct code": "def generate_integers(a, b):\n    if a > b: a, b = b, a\n    return [i for i in range(a, min(b + 1, 10)) if i % 2 == 0]",
    "prompt": "\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"",
    "highlight_llm": "19",
    "highlight_gt": "12"
  }
]