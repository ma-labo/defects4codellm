[
    {
        "Task ID": 10,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "for i in range(len(string)-1, -1, -1):",
        "Correct Code": "for i in range(len(string))",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "def is_palindrome(string: str) -> bool: \"\"\" Test if given string is a palindrome \"\"\" return string == string[::-1] def make_palindrome(string: str) -> str: if is_palindrome(string): return string for i in range(len(string)-1, -1, -1): if is_palindrome(string[i:]): return string + string[:i][::-1] return string + string[:-1][::-1]",
        "Ground Truth": "def is_palindrome(string: str) -> bool: \"\"\" Test if given string is a palindrome \"\"\" return string == string[::-1] def make_palindrome(string: str) -> str: if is_palindrome(string): return string for i in range(len(string)): if is_palindrome(string[i:]): return string + string[i-1::-1]",
        "highlight_llm": "14",
        "highlight_gt": "20"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "return string + string[:i][::-1]\n    return string + string[:-1][::-1]",
        "Correct Code": "return string + string[i-1::-1]",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "16,17",
        "highlight_gt": "22"
    },
    {
        "Task ID": 26,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "unique_numbers.append(number) return unique_numbers",
        "Correct Code": "num_cnt[number] = 0 num_cnt[number] += 1 return [number for number in numbers if num_cnt[number] == 1]",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "from typing import List def remove_duplicates(numbers: List[int]) -> List[int]: unique_numbers = [] for number in numbers: if number not in unique_numbers: unique_numbers.append(number) return unique_numbers",
        "Ground Truth": "from typing import List def remove_duplicates(numbers: List[int]) -> List[int]: num_cnt = dict() for number in numbers: if number not in num_cnt: num_cnt[number] = 0 num_cnt[number] += 1 return [number for number in numbers if num_cnt[number] == 1]",
        "highlight_llm": "13,14",
        "highlight_gt": "13,14,15"
    },
    {
        "Task ID": 32,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if len(xs) % 2 != 0: raise ValueError(\"The list of coefficients must have an even number of elements.\") if xs[-1] == 0: raise ValueError(\"The largest non-zero coefficient must be non-zero.\") a = xs[-1] b = sum(xs[:-1]) c = xs[0] delta = b**2 - 4*a*c if delta < 0: raise ValueError(\"The polynomial has no real roots.\") elif delta == 0: return -b / (2*a) else: x1 = (-b + math.sqrt(delta)) / (2*a) x2 = (-b - math.sqrt(delta)) / (2*a) return x1 if x1 < x2 else x2",
        "Correct Code": "dxs = [xs[i] * i for i in range(1, len(xs))] def func(x): return poly(xs, x) def derivative(x): return poly(dxs, x) x, tol = 0, 1e-5 for _ in range(1000): fx = func(x) dfx = derivative(x) if abs(fx) < tol: break x = x - fx / dfx return x",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "import math def poly(xs: list, x: float): \"\"\" Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \"\"\" return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)]) def find_zero(xs: list): if len(xs) % 2 != 0: raise ValueError(\"The list of coefficients must have an even number of elements.\") if xs[-1] == 0: raise ValueError(\"The largest non-zero coefficient must be non-zero.\") a = xs[-1] b = sum(xs[:-1]) c = xs[0] delta = b**2 - 4*a*c if delta < 0: raise ValueError(\"The polynomial has no real roots.\") elif delta == 0: return -b / (2*a) else: x1 = (-b + math.sqrt(delta)) / (2*a) x2 = (-b - math.sqrt(delta)) / (2*a) return x1 if x1 < x2 else x2",
        "Ground Truth": "import math def poly(xs: list, x: float): \"\"\" Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \"\"\" return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)]) def find_zero(xs: list): dxs = [xs[i] * i for i in range(1, len(xs))] def func(x): return poly(xs, x) def derivative(x): return poly(dxs, x) x, tol = 0, 1e-5 for _ in range(1000): fx = func(x) dfx = derivative(x) if abs(fx) < tol: break x = x - fx / dfx return x",
        "highlight_llm": "24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39",
        "highlight_gt": "24,25,26,27,28,30,31,32,33,34,35,37"
    },
    {
        "Task ID": 36,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if '7' in str(i)",
        "Correct Code": "filter(lambda c: c == \"7\", str(i))",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def fizz_buzz(n: int): count = 0 for i in range(n): if i % 11 == 0 or i % 13 == 0: if '7' in str(i): count += 1 return count",
        "Ground Truth": "def fizz_buzz(n: int): cnt = 0 for i in range(n): if i % 11 == 0 or i % 13 == 0: cnt += len(list(filter(lambda c: c == \"7\", str(i)))) return cnt",
        "highlight_llm": "13",
        "highlight_gt": "13"
    },
    {
        "Task ID": 41,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "# We can assume that the left-moving cars are at position 0 and the right-moving cars are at position 1 # We can also assume that the speed of the cars is 1 unit per time step # We can represent the positions of the cars using two lists left_cars = [0] * n right_cars = [1] * n # We can keep track of the number of collisions using a counter num_collisions = 0 # We can simulate the movement of the cars by iterating through time steps for t in range(1, 2*n): # At each time step, we move the cars one unit to the right or left for i in range(n): if left_cars[i] < t: left_cars[i] += 1 if right_cars[i] < t: right_cars[i] += 1 # We check for collisions by comparing the positions of the left-moving and right-moving cars for i in range(n): if left_cars[i] == right_cars[i]: num_collisions += 1 return num_collisions",
        "Correct Code": "return n ** 2",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def car_race_collision(n: int): # We can assume that the left-moving cars are at position 0 and the right-moving cars are at position 1 # We can also assume that the speed of the cars is 1 unit per time step # We can represent the positions of the cars using two lists left_cars = [0] * n right_cars = [1] * n # We can keep track of the number of collisions using a counter num_collisions = 0 # We can simulate the movement of the cars by iterating through time steps for t in range(1, 2*n): # At each time step, we move the cars one unit to the right or left for i in range(n): if left_cars[i] < t: left_cars[i] += 1 if right_cars[i] < t: right_cars[i] += 1 # We check for collisions by comparing the positions of the left-moving and right-moving cars for i in range(n): if left_cars[i] == right_cars[i]: num_collisions += 1 return num_collisions",
        "Ground Truth": "def car_race_collision(n: int): return n ** 2",
        "highlight_llm": "13,14,15,16,17,19,20,22,23,24,25,26,27,28,29,31,32,33,34,36",
        "highlight_gt": "13"
    },
    {
        "Task ID": 44,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "result = \"",
        "Correct Code": "if x == 0: return \"0\"\n    ret = \"",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def change_base(x: int, base: int): result = \"\" while x > 0: remainder = x % base result = str(remainder) + result x = x // base return result",
        "Ground Truth": "def change_base(x: int, base: int): if x == 0: return \"0\" ret = \"\" while x != 0: ret = str(x % base) + ret x //= base return ret",
        "highlight_llm": "12",
        "highlight_gt": "12,13"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "while x > 0",
        "Correct Code": "while x != 0",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "While error",
        "Syntactic Error ID": "Bb2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "13",
        "highlight_gt": "14"
    },
    {
        "Task ID": 46,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "if n == 0 or n == 1: return 0",
        "Correct Code": "elif n == 3: return 0",
        "Semantic Level": "Miss condition",
        "Semantic Error ID": "Aa1",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def fib4(n: int): if n == 0 or n == 1: return 0 elif n == 2: return 2 else: a, b, c, d = 0, 0, 2, 0 for i in range(3, n+1): d = a + b + c + d a, b, c = b, c, d return d",
        "Ground Truth": "def fib4(n: int): if n == 0: return 0 elif n == 1: return 0 elif n == 2: return 2 elif n == 3: return 0 else: a, b, c, d = 0, 0, 2, 0 for i in range(4, n + 1): a, b, c, d = b, c, d, a + b + c + d return d",
        "highlight_llm": "16,17",
        "highlight_gt": "23,24"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "for i in range(3, n+1)",
        "Correct Code": "for i in range(4, n + 1)",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "22",
        "highlight_gt": "27"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 3,
        "Incorrect Code": "d = a + b + c + d\n            a, b, c = b, c, d",
        "Correct Code": "a, b, c, d = b, c, d, a + b + c + d",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect arithmetic",
        "Syntactic Error ID": "Be1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "23,24",
        "highlight_gt": "28"
    },
    {
        "Task ID": 49,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "elif n % 2 == 0:\n        return modp(n//2, p)**2 % p\n    else:\n        return 2 * modp(n-1, p) % p",
        "Correct Code": "res, x = 1, 2 while n != 0: if n % 2 == 1: res = res * x % p x = x * x % p n //= 2 return res % p",
        "Semantic Level": "Infinite Loop",
        "Semantic Error ID": "Ag1",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def modp(n: int, p: int): if n == 0: return 1 elif n % 2 == 0: return modp(n//2, p)**2 % p else: return 2 * modp(n-1, p) % p",
        "Ground Truth": "def modp(n: int, p: int): res, x = 1, 2 while n != 0: if n % 2 == 1: res = res * x % p x = x * x % p n //= 2 return res % p",
        "highlight_llm": "16,17,18,19",
        "highlight_gt": "14,15,16,17,18,19,20"
    },
    {
        "Task ID": 55,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "else:\n        return fib(n-1) + fib(n-2)",
        "Correct Code": "a, b = 1, 1 for _ in range(3, n + 1): a, b, = b, a + b return b",
        "Semantic Level": "Infinite Loop",
        "Semantic Error ID": "Ag1",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def fib(n: int): if n <= 1: return n else: return fib(n-1) + fib(n-2)",
        "Ground Truth": "def fib(n: int): if n == 0: return 0 if n <= 2: return 1 a, b = 1, 1 for _ in range(3, n + 1): a, b, = b, a + b return b",
        "highlight_llm": "12,13",
        "highlight_gt": "12,13,14,15"
    },
    {
        "Task ID": 63,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1",
        "Correct Code": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def fibfib(n: int): if n == 0: return 0 elif n == 1 or n == 2: return 1 else: a, b, c = 1, 1, 0 for i in range(3, n+1): c = a + b + c b, a = a, b a = c return c",
        "Ground Truth": "def fibfib(n: int): if n == 0 or n == 1: return 0 elif n == 2: return 1 a, b, c = 0, 0, 1 for _ in range(3, n + 1): a, b, c = b, c, a + b + c return c",
        "highlight_llm": "15,16,17,18",
        "highlight_gt": "15,16,17,18"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "a, b, c = 1, 1, 0",
        "Correct Code": "a, b, c = 0, 0, 1",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect constant",
        "Syntactic Error ID": "Be4",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "20",
        "highlight_gt": "19"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 3,
        "Incorrect Code": "c = a + b + c\n            b, a = a, b\n            a = c",
        "Correct Code": "a, b, c = b, c, a + b + c",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect arithmetic",
        "Syntactic Error ID": "Be1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "22,23,24",
        "highlight_gt": "21"
    },
    {
        "Task ID": 68,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes,\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found, return the node that has smallest index.\n\n    The plucked node should be returned in a list, [smallest_value, its_index],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but there are two zeros,\n                     so",
        "Correct Code": "if all(val % 2 == 1 for val in arr): return []\n    min_even = min(filter(lambda x: x % 2 == 0, arr))\n    for i in range(len(arr)):\n        if arr[i] == min_even:\n            return [min_even, i]",
        "Semantic Level": "Only comments",
        "Semantic Error ID": "Ae1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def pluck(arr):",
        "Ground Truth": "def pluck(arr): if all(val % 2 == 1 for val in arr): return [] min_even = min(filter(lambda x: x % 2 == 0, arr)) for i in range(len(arr)): if arr[i] == min_even: return [min_even, i]",
        "highlight_llm": "3,4,5,6,8,9,11,12,13,14,16,17,18,19,21,22,23,25,26,,27,28,29",
        "highlight_gt": "35,36,37,38,39"
    },
    {
        "Task ID": 76,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "for i in range(2, int(x**(1/n))+1)",
        "Correct Code": "while abs(p) <= abs(x)",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "def is_simple_power(x, n): if x == 1: return True for i in range(2, int(x**(1/n))+1): if i**n == x: return True return False",
        "Ground Truth": "def is_simple_power(x, n): if x == 1: return True if n == 0: return x == 0 if n == 1: return x == 1 if n == -1: return abs(x) == 1 p = n while abs(p) <= abs(x): if p == x: return True p = p * n return False",
        "highlight_llm": "15",
        "highlight_gt": "18"
    },
    {
        "Task ID": 84,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "int(bin(int(d))[2:]",
        "Correct Code": "int(x)",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def solve(N): # Convert N to a string and then to a list of its digits digits = list(str(N)) # Convert each digit to binary and sum them up binary_sum = sum(int(bin(int(d))[2:]) for d in digits) # Convert the binary sum to a string and return it return bin(binary_sum)[2:]",
        "Ground Truth": "def solve(N): s = sum(map(lambda x: int(x), str(N))) return bin(s)[2:]",
        "highlight_llm": "19",
        "highlight_gt": "15"
    },
    {
        "Task ID": 86,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return ' '.join(ordered_words),words",
        "Correct Code": "return \" \".join(map(lambda x: \"\".join(sorted(x, key=lambda ch: ord(ch))), words))",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "def anti_shuffle(s): words = s.split() ordered_words = [] for word in words: ordered_word = ''.join(sorted(word)) ordered_words.append(ordered_word) return ' '.join(ordered_words),words",
        "Ground Truth": "def anti_shuffle(s): words = s.split(\" \") return \" \".join(map(lambda x: \"\".join(sorted(x, key=lambda ch: ord(ch))), words))",
        "highlight_llm": "7",
        "highlight_gt": "15"
    },
    {
        "Task ID": 87,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "in range(len(lst[i]))",
        "Correct Code": "in range(len(l) - 1, -1, -1)",
        "Semantic Level": "Missing condition",
        "Semantic Error ID": "Aa1",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "def get_row(lst, x): result = [] for i in range(len(lst)): if x in lst[i]: for j in range(len(lst[i])): if lst[i][j] == x: result.append((i, j)) result.sort(key=lambda x: x[0]) result.sort(key=lambda x: x[1], reverse=True) return result",
        "Ground Truth": "def get_row(lst, x): res = [] for i, l in enumerate(lst): for j in range(len(l) - 1, -1, -1): if l[j] == x: res.append((i, j)) return res",
        "highlight_llm": "5",
        "highlight_gt": "23"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1], reverse=True)",
        "Correct Code": "",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "8,9",
        "highlight_gt": ""
    },
    {
        "Task ID": 91,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if sentence.strip().startswith('I')",
        "Correct Code": "if s.startswith(\"I \")",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def is_bored(S): sentences = S.split('.') sentences += S.split('?') sentences += S.split('!') count = 0 for sentence in sentences: if sentence.strip().startswith('I'): count += 1 return count",
        "Ground Truth": "def is_bored(S): sentences = map(lambda x: x.strip(), ((S.replace(\"?\", \".\")).replace(\"!\", \".\")).split(\".\")) return len([s for s in sentences if s.startswith(\"I \")])",
        "highlight_llm": "18",
        "highlight_gt": "14"
    },
    {
        "Task ID": 93,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "encoded_message += chr(ord(letter) + 2)",
        "Correct Code": "if ord(\"A\") <= ord(ch) <= ord(\"Z\"):\n            return chr(ord(ch) + 32)\n        elif ord(\"a\") <= ord(ch) <= ord(\"z\"):\n            return chr(ord(ch) - 32)",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def encode(message): vowels = 'aeiouAEIOU' encoded_message = '' for letter in message: if letter.isalpha(): if letter in vowels: encoded_message += chr(ord(letter) + 2) else: if letter.islower(): encoded_message += letter.upper() else: encoded_message += letter.lower() else: encoded_message += letter return encoded_message",
        "Ground Truth": "def encode(message): def switch_case(ch): if ord(\"A\") <= ord(ch) <= ord(\"Z\"): return chr(ord(ch) + 32) elif ord(\"a\") <= ord(ch) <= ord(\"z\"): return chr(ord(ch) - 32) else: return ch def vowel_change(ch): return ch if ch not in \"aeiouAEIOU\" else chr(ord(ch) + 2) m = \"\".join(map(switch_case, message)) return \"\".join(map(vowel_change, m))",
        "highlight_llm": "7",
        "highlight_gt": "16,17,18,19"
    },
    {
        "Task ID": 97,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "abs(a % 10 * b % 10)",
        "Correct Code": "int(str(a)[-1]) * int(str(b)[-1])",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def multiply(a, b): return abs(a % 10 * b % 10)",
        "Ground Truth": "def multiply(a, b): return int(str(a)[-1]) * int(str(b)[-1])",
        "highlight_llm": "11",
        "highlight_gt": "11"
    },
    {
        "Task ID": 100,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "append(n + 2*i - 1)",
        "Correct Code": "num += 2",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def make_a_pile(n): stones = [n] for i in range(1, n): if n % 2 == 0: stones.append(n + 2*i) else: stones.append(n + 2*i - 1) return stones",
        "Ground Truth": "def make_a_pile(n): ans, num = [], n for _ in range(n): ans.append(num) num += 2 return ans",
        "highlight_llm": "20",
        "highlight_gt": "18"
    },
    {
        "Task ID": 101,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "words = s.split(\", \")",
        "Correct Code": "words = (s.replace(\",\", \" \")).split()",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def words_string(s): # Split the string into words using commas and spaces as delimiters words = s.split(\", \") words = [word.split(\" \") for word in words] # Flatten the list of words words = [word for sublist in words for word in sublist] # Return the list of words return words",
        "Ground Truth": "def words_string(s): words = (s.replace(\",\", \" \")).split() return [word for word in words if word != \"\"]",
        "highlight_llm": "11",
        "highlight_gt": "10"
    },
    {
        "Task ID": 103,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "return bin(avg)[2:]",
        "Correct Code": "return bin(avg)",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "def rounded_avg(n, m): if n > m: return -1 avg = round(sum(range(n, m+1)) / (m-n+1)) return bin(avg)[2:]",
        "Ground Truth": "def rounded_avg(n, m): if n > m: return -1 avg = round((n + m) / 2) return bin(avg)",
        "highlight_llm": "5",
        "highlight_gt": "14"
    },
    {
        "Task ID": 108,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "sum(int(d) for d in str(abs(n)))",
        "Correct Code": "l = list(str(x))\n        if l[0] == \"-\":\n            l = l[1:]\n            l = list(map(int, l))\n            l[0] = -l[0]",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def count_nums(arr): def sum_digits(n): \"\"\" Helper function to calculate the sum of digits of a number. \"\"\" return sum(int(d) for d in str(abs(n))) count = 0 for num in arr: if sum_digits(num) > 0: count += 1 print(sum_digits(num)) return count",
        "Ground Truth": "def count_nums(arr): def judge(x: int) -> int: l = list(str(x)) if l[0] == \"-\": l = l[1:] l = list(map(int, l)) l[0] = -l[0] else: l = list(map(int, l)) return 1 if sum(l) > 0 else 0 return sum(map(judge, arr))",
        "highlight_llm": "15",
        "highlight_gt": "12,13,14,15,16"
    },
    {
        "Task ID": 109,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performing 2 right shift operations, non-decreasing order can\n                 be achieve",
        "Correct Code": "sorted_arr = sorted(arr)\n    if arr == sorted_arr: return True\n    for i in range(1, len(arr)):\n        if arr[i:] + arr[:i] == sorted_arr:\n            return True\n    return False",
        "Semantic Level": "Only comments",
        "Semantic Error ID": "Ae1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def move_one_ball(arr):",
        "Ground Truth": "def move_one_ball(arr): sorted_arr = sorted(arr) if arr == sorted_arr: return True for i in range(1, len(arr)): if arr[i:] + arr[:i] == sorted_arr: return True return False",
        "highlight_llm": "2,3,4,5,6,8,9,10,12,13,14,16,18,20,21,22",
        "highlight_gt": "29,30,31,32,33,34"
    },
    {
        "Task ID": 111,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "# Split the string into a list of words\n    words = test.split()\n\n    # Create an empty dictionary to store the counts\n    counts = {}\n\n    # Loop through each word in the list\n    for word in words:\n        # Loop through each letter in the word\n        for letter in word:\n            # If the letter is not already in the dictionary, add it with a count of 1\n            if letter not in counts:\n                counts[letter] = 1\n            # If the letter is already in the dictionary, increment its count by 1\n            else:\n                counts[letter] += 1\n\n    # Find the maximum count\n    max_count = max(counts.values())\n\n    # Create a new dictionary to store the letters with the maximum count\n    result = {}\n\n    # Loop through each letter and count in the dictionary\n    for letter, count in counts.items():\n        # If the count is equal to the maximum count, add the letter and count to the result dictionary\n        if count == max_count:\n            result[letter] = c",
        "Correct Code": "if test == \"\": return {} count, ans = dict(), dict() for word in test.split(\" \"): if word != \"\": if word not in count: count[word] = 0 count[word] += 1 mx = max(list(count.values())) for ch, c in count.items(): if c == mx: ans[ch] = c return ans",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def histogram(test): # Split the string into a list of words words = test.split() # Create an empty dictionary to store the counts counts = {} # Loop through each word in the list for word in words: # Loop through each letter in the word for letter in word: # If the letter is not already in the dictionary, add it with a count of 1 if letter not in counts: counts[letter] = 1 # If the letter is already in the dictionary, increment its count by 1 else: counts[letter] += 1 # Find the maximum count max_count = max(counts.values()) # Create a new dictionary to store the letters with the maximum count result = {} # Loop through each letter and count in the dictionary for letter, count in counts.items(): # If the count is equal to the maximum count, add the letter and count to the result dictionary if count == max_count: result[letter] = c",
        "Ground Truth": "def histogram(test): if test == \"\": return {} count, ans = dict(), dict() for word in test.split(\" \"): if word != \"\": if word not in count: count[word] = 0 count[word] += 1 mx = max(list(count.values())) for ch, c in count.items(): if c == mx: ans[ch] = c return ans",
        "highlight_llm": "14,15,17,18,20,21,22,23,24,25,26,27,28,29,31,32,34,35,37,38,39,40,41",
        "highlight_gt": "18,19,20,21,22,23,24,25,26,27,28"
    },
    {
        "Task ID": 113,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "append(\"the number of odd elements in the string {} of the input.\".format(odd_count))",
        "Correct Code": "append(template.replace(\"i\", str(odd_cnt)))",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def odd_count(lst): result = [] for string in lst: odd_count = 0 for digit in string: if int(digit) % 2 == 1: odd_count += 1 result.append(\"the number of odd elements in the string {} of the input.\".format(odd_count)) return result",
        "Ground Truth": "def odd_count(lst): ans, template = [], \"the number of odd elements in the string i of the input.\" for s in lst: odd_cnt = len(list(filter(lambda ch: int(ch) % 2 == 1, s))) ans.append(template.replace(\"i\", str(odd_cnt))) return ans",
        "highlight_llm": "19",
        "highlight_gt": "16"
    },
    {
        "Task ID": 114,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "min_sum = math.inf\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        current_sum = max(current_sum, 0)\n    return min_sum",
        "Correct Code": "if all(x >= 0 for x in nums): return min(nums)\n    s, ans = 0, 0\n    for x in nums:\n        s += x\n        ans = min(ans, s)\n        if s >= 0: s = 0\n    return ans",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "import math def minSubArraySum(nums): min_sum = math.inf current_sum = 0 for num in nums: current_sum += num min_sum = min(min_sum, current_sum) current_sum = max(current_sum, 0) return min_sum",
        "Ground Truth": "import math def minSubArraySum(nums): if all(x >= 0 for x in nums): return min(nums) s, ans = 0, 0 for x in nums: s += x ans = min(ans, s) if s >= 0: s = 0 return ans",
        "highlight_llm": "11,12,13,14,15,16,17",
        "highlight_gt": "9,10,11,12,13,14,15"
    },
    {
        "Task ID": 115,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "total_water = sum(sum(row) for row in grid)\n    num_buckets = math.ceil(total_water / bucket_capacity)",
        "Correct Code": "ans += math.ceil(sum(l) / capacity)",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "# CANNOT PARSE CODE SNIPPET def max_fill(grid, bucket_capacity): import math # Calculate the total amount of water in the wells total_water = sum(sum(row) for row in grid) # Calculate the number of times the buckets need to be lowered num_buckets = math.ceil(total_water / bucket_capacity) return num_buckets",
        "Ground Truth": "def max_fill(grid, capacity): import math ans = 0 for l in grid: ans += math.ceil(sum(l) / capacity) return ans",
        "highlight_llm": "6,9",
        "highlight_gt": "43"
    },
    {
        "Task ID": 118,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "word = word.lower()",
        "Correct Code": "",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect variable name",
        "Syntactic Error ID": "Be5",
        "Generated Code": "def get_closest_vowel(word): vowels = set(['a', 'e', 'i', 'o', 'u']) word = word.lower() for i in range(len(word)-2, 0, -1): if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels: return word[i].upper() if word[i].isupper() else word[i] return \"",
        "Ground Truth": "def get_closest_vowel(word): def is_vowel(ch: str) -> bool: return ch in \"aeiouAEIOU\" for i in range(len(word) - 2, 0, -1): if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]): return word[i] return \"",
        "highlight_llm": "3",
        "highlight_gt": ""
    },
    {
        "Task ID": 120,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "arr.sort(reverse=True)",
        "Correct Code": "sorted(sorted(arr)[::-1]",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def maximum(arr, k): arr.sort(reverse=True) return arr[:k]",
        "Ground Truth": "def maximum(arr, k): return sorted(sorted(arr)[::-1][:k])",
        "highlight_llm": "26",
        "highlight_gt": "26"
    },
    {
        "Task ID": 121,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "for i in range(1, len(lst), 2)",
        "Correct Code": "for i in range(len(lst)) if i % 2 == 0",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "def solution(lst): sum = 0 for i in range(1, len(lst), 2): if lst[i] % 2 != 0: sum += lst[i] return sum",
        "Ground Truth": "def solution(lst): return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 == 1)",
        "highlight_llm": "11",
        "highlight_gt": "10"
    },
    {
        "Task ID": 122,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if arr[i] >= 10 and arr[i] <= 99",
        "Correct Code": "len(s) - 1 if s[0] == \"-\" else len(s)\n    return sum(filter(lambda x: digits(x) <= 2",
        "Semantic Level": "Miss condition",
        "Semantic Error ID": "Aa1",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def add_elements(arr, k): total = 0 for i in range(k): if arr[i] >= 10 and arr[i] <= 99: total += arr[i] return total",
        "Ground Truth": "def add_elements(arr, k): def digits(x: int) -> int: s = str(x) return len(s) - 1 if s[0] == \"-\" else len(s) return sum(filter(lambda x: digits(x) <= 2, arr[:k]))",
        "highlight_llm": "17",
        "highlight_gt": "17,18"
    },
    {
        "Task ID": 124,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "re.match",
        "Correct Code": "",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Import error",
        "Syntactic Error ID": "Bf1",
        "Generated Code": "def valid_date(date): # Check if the date string is empty if not date: return False # Check if the date is in the correct format if not re.match(r'\\d{2}-\\d{2}-\\d{4}', date): return False # Split the date into month, day, and year month, day, year = map(int, date.split('-')) # Check if the month is valid if month < 1 or month > 12: return False # Check if the day is valid for the given month if month in [1, 3, 5, 7, 8, 10, 12]: if day < 1 or day > 31: return False elif month in [4, 6, 9, 11]: if day < 1 or day > 30: return False elif month == 2: if day < 1 or day > 29: return False # Check if the year is valid if year < 1: return False # If all checks pass, return True return True",
        "Ground Truth": "def valid_date(date): days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] if len(date) != 10: return False if date[2] != \"-\" or date[5] != \"-\": return False m, d, y = date[:2], date[3:5], date[6:] if not m.isdigit() or not d.isdigit() or not y.isdigit(): return False m, d = int(m), int(d) if not 1 <= m <= 12: return False if not 1 <= d <= days[m-1]: return False return True",
        "highlight_llm": "26",
        "highlight_gt": ""
    },
    {
        "Task ID": 125,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if ' ' in txt",
        "Correct Code": "whitespace = tuple(' \\n\\r\\t')",
        "Semantic Level": "Miss condition",
        "Semantic Error ID": "Aa1",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def split_words(txt): if ' ' in txt: return txt.split() elif ',' in txt: return txt.split(',') else: count = 0 for char in txt: if char.islower() and ord(char) % 2 == 1: count += 1 return count",
        "Ground Truth": "def split_words(txt): whitespace = tuple(' \\n\\r\\t') if any([x in txt for x in whitespace]): return txt.split() if \",\" in txt: return txt.split(\",\") cnt = 0 for ch in txt: if ch.islower() and (ord(ch) - ord(\"a\")) % 2 == 1: cnt += 1 return cnt",
        "highlight_llm": "11",
        "highlight_gt": "11"
    },
    {
        "Task ID": 126,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if lst[i] >= lst[i+1]\n   if lst.count(i) > 1",
        "Correct Code": "if count[x] > 2 lst == sorted(lst)",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def is_sorted(lst): for i in range(len(lst)-1): if lst[i] >= lst[i+1]: return False for i in lst: if lst.count(i) > 1: return False return True",
        "Ground Truth": "def is_sorted(lst): count = dict() for x in lst: if x not in count: count[x] = 0 count[x] += 1 if count[x] > 2: return False return lst == sorted(lst)",
        "highlight_llm": "18,21",
        "highlight_gt": "22,23"
    },
    {
        "Task ID": 127,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:",
        "Correct Code": "if interval1[0] > interval2[0]: interval1, interval2 = interval2, interval1\n    l, r = interval2[0], min(interval1[1], interval2[1])\n    return \"YES\" if is_prime(r - l) else \"NO",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def is_prime(n): \"\"\"Helper function to check if a number is prime\"\"\" if n < 2: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def intersection(interval1, interval2): start = max(interval1[0], interval2[0]) end = min(interval1[1], interval2[1]) if start > end:",
        "Ground Truth": "def intersection(interval1, interval2): def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) if interval1[0] > interval2[0]: interval1, interval2 = interval2, interval1 l, r = interval2[0], min(interval1[1], interval2[1]) return \"YES\" if is_prime(r - l) else \"NO",
        "highlight_llm": "30,31,32",
        "highlight_gt": "23,24,25"
    },
    {
        "Task ID": 129,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "heapq.heappop(heap)",
        "Correct Code": "",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def minPath(grid, k): n = len(grid) visited = set() heap = [(grid[i][j], [(i, j)]) for i in range(n) for j in range(n)] heapq.heapify(heap) while heap: val, path = heapq.heappop(heap) if len(path) == k: return [grid[i][j] for i, j in path] i, j = path[-1] for ni, nj in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]: if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in visited: visited.add((ni, nj)) heapq.heappush(heap, (grid[ni][nj], path + [(ni, nj)]))",
        "Ground Truth": "def minPath(grid, k): N = len(grid) x, y = 0, 0 for i in range(N): for j in range(N): if grid[i][j] == 1: x, y = i, j mn = N * N if x > 0: mn = min(mn, grid[x - 1][y]) if x < N - 1: mn = min(mn, grid[x + 1][y]) if y > 0: mn = min(mn, grid[x][y - 1]) if y < N - 1: mn = min(mn, grid[x][y + 1]) return [1 if i % 2 == 0 else mn for i in range(k)]",
        "highlight_llm": "34",
        "highlight_gt": ""
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "n = len(grid)\n    visited = set()\n    heap = [(grid[i][j], [(i, j)]) for i in range(n) for j in range(n)]\n    heapq.heapify(heap)\n    while heap:\n        val, path = heapq.heappop(heap)\n        if len(path) == k:\n            return [grid[i][j] for i, j in path]\n        i, j = path[-1]\n        for ni, nj in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in visited:\n                visited.add((ni, nj))\n                heapq.heappush(heap, (grid[ni][nj], path + [(ni, nj)]))",
        "Correct Code": "N = len(grid)\n    x, y = 0, 0\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == 1:\n                x, y = i, j\n    mn = N * N\n    if x > 0: mn = min(mn, grid[x - 1][y])\n    if x < N - 1: mn = min(mn, grid[x + 1][y])\n    if y > 0: mn = min(mn, grid[x][y - 1])\n    if y < N - 1: mn = min(mn, grid[x][y + 1])\n    return [1 if i % 2 == 0 else mn for i in range(k)]",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "31,32,33,34,35,36,37,38,39,40,41,42,43",
        "highlight_gt": "31,32,33,34,35,36,37,38,39,40,41,42"
    },
    {
        "Task ID": 130,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "return [] return [3]",
        "Correct Code": "return [1] return [1, 3]",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "def tri(n): if n == 0: return [] elif n == 1: return [3] else: seq = [3, 1] for i in range(2, n+1): if i % 2 == 0: seq.append(1 + i // 2) else: seq.append(seq[i-1] + seq[i-2] + seq[i+1]) return seq",
        "Ground Truth": "def tri(n): if n == 0: return [1] if n == 1: return [1, 3] ans = [1, 3] for i in range(2, n + 1): if i % 2 == 0: ans.append(1 + i / 2) else: ans.append(ans[-1] + ans[-2] + 1 + (i + 1) / 2) return ans",
        "highlight_llm": "19,21",
        "highlight_gt": "18,19"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "seq = [3, 1]",
        "Correct Code": "ans = [1, 3]",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect constant",
        "Syntactic Error ID": "Be4",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "23",
        "highlight_gt": "20"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "append(1 + i // 2) append(seq[i-1] + seq[i-2] + seq[i+1])",
        "Correct Code": "append(1 E58+ i / 2) append(ans[-1] + ans[-2] + 1 + (i + 1) / 2)",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "26,28",
        "highlight_gt": "23,25"
    },
    {
        "Task ID": 132,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n            else:\n                stack.append(bracket)\n    return len(stack) < len(string) and len(stack) > 0",
        "Correct Code": "for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def is_nested(string): stack = [] for bracket in string: if bracket == '[': stack.append(bracket) elif bracket == ']': if len(stack) > 0 and stack[-1] == '[': stack.pop() else: stack.append(bracket) return len(stack) < len(string) and len(stack) > 0",
        "Ground Truth": "def is_nested(string): for i in range(len(string)): if string[i] == \"]\": continue cnt, max_nest = 0, 0 for j in range(i, len(string)): if string[j] == \"[\": cnt += 1 else: cnt -= 1 max_nest = max(max_nest, cnt) if cnt == 0: if max_nest >= 2: return True break return False",
        "highlight_llm": "2,3,4,5,6,7,8,9,10,11",
        "highlight_gt": "15,16,17,18,19,20,21,22,23,24,25,26,27,28"
    },
    {
        "Task ID": 134,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "and (len(txt.split()[-1]) == 1)",
        "Correct Code": "and txt[-2] == \" ",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def check_if_last_char_is_a_letter(txt): if len(txt) == 0: return False else: last_char = txt[-1] if last_char.isalpha() and (len(txt.split()[-1]) == 1): return True else: return False",
        "Ground Truth": "def check_if_last_char_is_a_letter(txt): if len(txt) == 0: return False if len(txt) == 1: return txt.isalpha() return txt[-1].isalpha() and txt[-2] ==\" \" ",
        "highlight_llm": "18",
        "highlight_gt": "17"
    },
    {
        "Task ID": 135,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "if arr[i] < arr[i-1]:\n            return i-1",
        "Correct Code": "if not (arr[i] >= arr[i - 1]):\n            return i",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def can_arrange(arr): for i in range(len(arr)-1, 0, -1): if arr[i] < arr[i-1]: return i-1 return -1",
        "Ground Truth": "def can_arrange(arr): for i in range(len(arr) - 1, 0, -1): if not (arr[i] >= arr[i - 1]): return i return -1",
        "highlight_llm": "12,13",
        "highlight_gt": "12,13"
    },
    {
        "Task ID": 137,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if type(a) == type(b): else:\n        return None",
        "Correct Code": "if num_a == num_b:\n        return None",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def compare_one(a, b): if type(a) == type(b): if type(a) == int or type(a) == float: if a > b: return a elif b > a: return b else: return None elif type(a) == str: a = a.replace(\",\", \".\") b = b.replace(\",\", \".\") if float(a) > float(b): return a elif float(b) > float(a): return b else: return None else: return None",
        "Ground Truth": "def compare_one(a, b): num_a = float(str(a).replace(\",\", \".\")) num_b = float(str(b).replace(\",\", \".\")) if num_a == num_b: return None return a if num_a > num_b else b",
        "highlight_llm": "13,30,31",
        "highlight_gt": "20,21"
    },
    {
        "Task ID": 138,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "for i in range(2, n-2, 2):\n        for j in range(i, n-i-2, 2):\n            for k in range(j, n-i-j-2, 2):\n                if i + j + k + n-i-j-k == n:",
        "Correct Code": "n >= 8 and n % 2 == 0",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def is_equal_to_sum_even(n): if n < 8: return False for i in range(2, n-2, 2): for j in range(i, n-i-2, 2): for k in range(j, n-i-j-2, 2): if i + j + k + n-i-j-k == n: return True return False",
        "Ground Truth": "def is_equal_to_sum_even(n): return n >= 8 and n % 2 == 0",
        "highlight_llm": "10,11,12,13",
        "highlight_gt": "8"
    },
    {
        "Task ID": 140,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "while i < len(text) - 2:\n        if text[i:i+3] == \"___\":\n            text = text[:i] + \"-\" + text[i+3:]\n        else:\n            i += 1",
        "Correct Code": "for i in range(len(text)-1, 2, -1):\n        ans = ans.replace(\" \" * i, \"-\")",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def fix_spaces(text): # Replace all spaces with underscores text = text.replace(\" \", \"_\") # Replace consecutive spaces with - i = 0 while i < len(text) - 2: if text[i:i+3] == \"___\": text = text[:i] + \"-\" + text[i+3:] else: i += 1 # Return the modified string return text",
        "Ground Truth": "def fix_spaces(text): ans = text for i in range(len(text)-1, 2, -1): ans = ans.replace(\" \" * i, \"-\") return ans.replace(\" \", \"_\")",
        "highlight_llm": "17,18,19,20,21",
        "highlight_gt": "13,14"
    },
    {
        "Task ID": 141,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pattern = r'^[a-zA-Z][a-zA-Z0-9]*\\.[txt|exe|dll]{3}$'",
        "Correct Code": "if len(f_list) != 2: return \"No\"\n    if len(f_list[0]) == 0: return \"No\"\n    if not f_list[0][0].isalpha(): return \"No",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect constant",
        "Syntactic Error ID": "Be4",
        "Generated Code": "def file_name_check(file_name): import re pattern = r'^[a-zA-Z][a-zA-Z0-9]*\\.[txt|exe|dll]{3}$' if re.match(pattern, file_name): if len(re.findall(r'\\d', file_name)) <= 3: return 'Yes' return 'No'",
        "Ground Truth": "def file_name_check(file_name): if len(list(filter(lambda ch: ch.isdigit(), file_name))) > 3: return \"No\" f_list = file_name.split(\".\") if len(f_list) != 2: return \"No\" if len(f_list[0]) == 0: return \"No\" if not f_list[0][0].isalpha(): return \"No\" if f_list[1] not in [\"txt\", \"exe\", \"dll\"]: return \"No\" return \"Yes",
        "highlight_llm": "16",
        "highlight_gt": "18,19,20"
    },
    {
        "Task ID": 145,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return sum(int(digit) for digit in str(abs(num)))",
        "Correct Code": "x_list = list(str(x))\n        if x_list[0] == \"-\":\n            x_list = x_list[1:]\n            x_list = list(map(int, x_list))\n            x_list[0] = -x_list[0]\n        else:\n            x_list = list(map(int, x_list))\n        return sum(x_list)",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def order_by_points(nums): def sum_of_digits(num): return sum(int(digit) for digit in str(abs(num))) return sorted(nums, key=lambda num: (sum_of_digits(num), nums.index(num)))",
        "Ground Truth": "def order_by_points(nums): def weight(x): x_list = list(str(x)) if x_list[0] == \"-\": x_list = x_list[1:] x_list = list(map(int, x_list)) x_list[0] = -x_list[0] else: x_list = list(map(int, x_list)) return sum(x_list) return sorted(nums, key=weight)",
        "highlight_llm": "3",
        "highlight_gt": "13,14,15,16,17,18,19,20"
    },
    {
        "Task ID": 147,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "count = 0",
        "Correct Code": "if n <= 2: return False",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def get_max_triples(n): a = [i*i - i + 1 for i in range(1, n+1)] count = 0 for i in range(n-2): for j in range(i+1, n-1): for k in range(j+1, n): if (a[i] + a[j] + a[k]) % 3 == 0: count += 1 return count",
        "Ground Truth": "def get_max_triples(n): if n <= 2: return False one_cnt = 1 + (n - 2) // 3 * 2 + (n - 2) % 3 zero_cnt = n - one_cnt return one_cnt * (one_cnt - 1) * (one_cnt - 2) // 6 + zero_cnt * (zero_cnt - 1) * (zero_cnt - 2) // 6",
        "highlight_llm": "16",
        "highlight_gt": "15"
    },
    {
        "Task ID": 151,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "num >= 0",
        "Correct Code": "num > 0",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def double_the_difference(lst): sum_of_squares = 0 for num in lst: if isinstance(num, int) and num >= 0 and num % 2 != 0: sum_of_squares += num ** 2 return sum_of_squares * 2",
        "Ground Truth": "def double_the_difference(lst): ans = 0 for num in lst: if num % 2 == 1 and num > 0 and \".\" not in str(num): ans += num ** 2 return ans",
        "highlight_llm": "15",
        "highlight_gt": "15"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "return sum_of_squares * 2",
        "Correct Code": "return ans",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "17",
        "highlight_gt": "17"
    },
    {
        "Task ID": 154,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "if b == \"\":\n        return True",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def cycpattern_check(a , b): for i in range(len(b)): if b[i:] + b[:i] in a: return True return False",
        "Ground Truth": "def cycpattern_check(a , b): if a == b: return True if b == \"\": return True for i in range(0, len(b)): if b[i:] + b[:i] in a: return True return False",
        "highlight_llm": "",
        "highlight_gt": "13,14"
    },
    {
        "Task ID": 155,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if num < 0:\n        even_count *= -1\n        odd_count *= -1",
        "Correct Code": "",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def even_odd_count(num): even_count = 0 odd_count = 0 for digit in str(abs(num)): if int(digit) % 2 == 0: even_count += 1 else: odd_count += 1 if num < 0: even_count *= -1 odd_count *= -1 return (even_count, odd_count)",
        "Ground Truth": "def even_odd_count(num): even, odd = 0, 0 for ch in str(num): if ch in \"02468\": even += 1 if ch in \"13579\": odd += 1 return even, odd",
        "highlight_llm": "9,10,11",
        "highlight_gt": ""
    },
    {
        "Task ID": 159,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "total_eaten = number + remaining\n    remaining_carrots = 0\n    if total_eaten >= need:\n        total_eaten = need\n    else:\n        remaining_carrots = need - total_eaten\n        total_eaten = need\n    return [total_eaten, remaining_carrots]",
        "Correct Code": "if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def eat(number, need, remaining): total_eaten = number + remaining remaining_carrots = 0 if total_eaten >= need: total_eaten = need else: remaining_carrots = need - total_eaten total_eaten = need return [total_eaten, remaining_carrots]",
        "Ground Truth": "def eat(number, need, remaining): if need <= remaining: return [number + need, remaining - need] else: return [number + remaining, 0]",
        "highlight_llm": "30,31,32,33,34,35,36,37",
        "highlight_gt": "30,31,32,33"
    },
    {
        "Task ID": 160,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]",
        "Correct Code": "exp += str(operand[i]) + operator[i]\n    exp += str(operand[-1])\n    return eval(exp)",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def do_algebra(operator, operand): result = operand[0] for i in range(len(operator)): if operator[i] == '+': result += operand[i+1] elif operator[i] == '-': result -= operand[i+1] elif operator[i] == '*': result *= operand[i+1] elif operator[i] == '//': result //= operand[i+1] elif operator[i] == '**': result **= operand[i+1] return result",
        "Ground Truth": "def do_algebra(operator, operand): exp = \"\" for i in range(len(operator)): exp += str(operand[i]) + operator[i] exp += str(operand[-1]) return eval(exp)",
        "highlight_llm": "28,29,30,31,32,33,34,35,36,37",
        "highlight_gt": "28,29,30"
    },
    {
        "Task ID": 163,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "for num in range(a, b+1)",
        "Correct Code": "for i in range(a, min(b + 1, 10))",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "def generate_integers(a, b): even_digits = [] for num in range(a, b+1): for digit in str(num): if int(digit) % 2 == 0: even_digits.append(int(digit)) return sorted(list(set(even_digits)))",
        "Ground Truth": "def generate_integers(a, b): if a > b: a, b = b, a return [i for i in range(a, min(b + 1, 10)) if i % 2 == 0]",
        "highlight_llm": "12",
        "highlight_gt": "12"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "if a > b: a, b = b, a",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "11"
    }
] 