[
    {
        "Task ID": 1,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "# TODO: Implement this function # pass # return [] # stack = [] # for i in range(len(paren_string)): # if paren_string[i] == '(': # stack.append(paren_string[i]) # elif paren_string[i] == ')': # stack.pop() # if len(stack) == 0: # return [paren_string[:i+1]] # return [paren_string] # stack = [] # for i in range(len(paren_string)): # if paren_string[i] == '(': # stack.append(paren_string[i]) # elif paren_string[i] == ')': # stack.pop() # if len(stack) == 0: # return [paren_string[:i+1]] # return [paren_string] # stack = [] # for i in range(len(paren_string)): # if paren_string[i] == '(': # stack.append(paren_string[i]) # elif paren_string[i] == ')': # stack.pop() # if len(stack) == 0: # return [paren_string[:i+1]] # return [paren_string] # stack = [] # for i in range(len(paren_string)): # if paren_string[i] == '(': # stack.append(paren_string[i]) # elif paren_string[i] == ')': # stack.pop() # if len(stack) == 0: # return [paren_string[:i+1]] # return [paren_string] # stack = [] # for i in range(len(paren_string)): # if paren_string[i] == '(': # stack.append(paren_string[i])",
        "Correct Code": "cnt, group, results = 0, \"\", [] for ch in paren_string: if ch == \"(\": cnt += 1 if ch == \")\": cnt -= 1 if ch != \" \": group += ch if cnt == 0: if group != \"\": results.append(group) group = \"\" return results",
        "Semantic Level": "Only comments",
        "Semantic Error ID": "Ae1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "from typing import List def separate_paren_groups(paren_string: str) -> List[str]: # TODO: Implement this function # pass # return [] # stack = [] # for i in range(len(paren_string)): # if paren_string[i] == '(': # stack.append(paren_string[i]) # elif paren_string[i] == ')': # stack.pop() # if len(stack) == 0: # return [paren_string[:i+1]] # return [paren_string] # stack = [] # for i in range(len(paren_string)): # if paren_string[i] == '(': # stack.append(paren_string[i]) # elif paren_string[i] == ')': # stack.pop() # if len(stack) == 0: # return [paren_string[:i+1]] # return [paren_string] # stack = [] # for i in range(len(paren_string)): # if paren_string[i] == '(': # stack.append(paren_string[i]) # elif paren_string[i] == ')': # stack.pop() # if len(stack) == 0: # return [paren_string[:i+1]] # return [paren_string] # stack = [] # for i in range(len(paren_string)): # if paren_string[i] == '(': # stack.append(paren_string[i]) # elif paren_string[i] == ')': # stack.pop() # if len(stack) == 0: # return [paren_string[:i+1]] # return [paren_string] # stack = [] # for i in range(len(paren_string)): # if paren_string[i] == '(': # stack.append(paren_string[i])",
        "Ground Truth": "from typing import List def separate_paren_groups(paren_string: str) -> List[str]: cnt, group, results = 0, \"\", [] for ch in paren_string: if ch == \"(\": cnt += 1 if ch == \")\": cnt -= 1 if ch != \" \": group += ch if cnt == 0: if group != \"\": results.append(group) group = \"\" return results",
        "highlight_llm": "12,13,14,15,16,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,45,46,47,48,49,50,51,52,53,55,56,57,58",
        "highlight_gt": "12,13,14,15,17,18,19,20,21,22,23,24,25"
    },
    {
        "Task ID": 3,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if operations[0] < 0: return True",
        "Correct Code": "account = 0 for operation in operations: account += operation if account < 0: return True",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "from typing import List def below_zero(operations: List[int]) -> bool: if len(operations) == 0: return False if operations[0] < 0: return True return below_zero(operations[1:])",
        "Ground Truth": "from typing import List def below_zero(operations: List[int]) -> bool: account = 0 for operation in operations: account += operation if account < 0: return True return False",
        "highlight_llm": "15,16",
        "highlight_gt": "13,14,15,16,17"
    },
    {
        "Task ID": 5,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "[delimeter] + [numbers[i] for i in range(len(numbers) - 1)] + [delimeter]",
        "Correct Code": "res = [] for i in range(len(numbers)): res.append(numbers[i]) if i != len(numbers) - 1: res.append(delimeter)",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "from typing import List def intersperse(numbers: List[int], delimeter: int) -> List[int]: return [delimeter] + [numbers[i] for i in range(len(numbers) - 1)] + [delimeter]",
        "Ground Truth": "from typing import List def intersperse(numbers: List[int], delimeter: int) -> List[int]: res = [] for i in range(len(numbers)): res.append(numbers[i]) if i != len(numbers) - 1: res.append(delimeter) return res",
        "highlight_llm": "11",
        "highlight_gt": "11,12,13,14,15"
    },
    {
        "Task ID": 6,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "# TODO: Implement this function. # Use a stack to keep track of the depth of nesting. # Use a set to keep track of the open parentheses. # Use a dictionary to keep track of the number of open parentheses at each depth. # Use a list to keep track of the deepest level of nesting. # Use a set to keep track of the open parentheses. # Use a dictionary to keep track of the number of open parentheses at each depth. # Use a list to keep track of the deepest level of nesting. # Use a set to keep track of the open parentheses. # Use a dictionary to keep track of the number of open parentheses at each depth. # Use a list to keep track of the deepest level of nesting. # Use a set to keep track of the open parentheses. # Use a dictionary to keep track of the number of open parentheses at each depth. # Use a list to keep track of the deepest level of nesting. # Use a set to keep track of the open parentheses. # Use a dictionary to keep track of the number of open parentheses at each depth. # Use a list to keep track of the deepest level of nesting. # Use a set to keep track of the open parentheses. # Use a dictionary to keep track of the number of open parentheses at each depth. # Use a list to keep track of the deepest level of nesting. # Use a set to keep track of the open parentheses. # Use a dictionary to keep track of the number of open parentheses at each depth. # Use a list to keep track of the deepest level of nesting. # Use a set to keep track of the open parentheses. # Use a dictionary to keep track of the number of open parentheses at each depth. # Use a list to keep track of the deepest level of nesting. # Use a set to keep track of the open parentheses. # Use a dictionary to keep track of the number of open parentheses at each depth. # Use a list to keep track of the deepest level of nesting. # Use a set to keep track of the open parentheses. # Use a dictionary to keep track of the number of open parentheses at each depth. # Use a list to keep track of the deepest level of",
        "Correct Code": "def count_depth(s: str) -> int: max_depth, cnt = 0, 0 for ch in s: if ch == \"(\": cnt += 1 if ch == \")\": cnt -= 1 max_depth = max(max_depth, cnt) return max_depth return [count_depth(s) for s in paren_string.split(\" \") if s != \"\"]",
        "Semantic Level": "Only comments",
        "Semantic Error ID": "Ae1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "from typing import List def parse_nested_parens(paren_string: str) -> List[int]: # TODO: Implement this function. # Use a stack to keep track of the depth of nesting. # Use a set to keep track of the open parentheses. # Use a dictionary to keep track of the number of open parentheses at each depth. # Use a list to keep track of the deepest level of nesting. # Use a set to keep track of the open parentheses. # Use a dictionary to keep track of the number of open parentheses at each depth. # Use a list to keep track of the deepest level of nesting. # Use a set to keep track of the open parentheses. # Use a dictionary to keep track of the number of open parentheses at each depth. # Use a list to keep track of the deepest level of nesting. # Use a set to keep track of the open parentheses. # Use a dictionary to keep track of the number of open parentheses at each depth. # Use a list to keep track of the deepest level of nesting. # Use a set to keep track of the open parentheses. # Use a dictionary to keep track of the number of open parentheses at each depth. # Use a list to keep track of the deepest level of nesting. # Use a set to keep track of the open parentheses. # Use a dictionary to keep track of the number of open parentheses at each depth. # Use a list to keep track of the deepest level of nesting. # Use a set to keep track of the open parentheses. # Use a dictionary to keep track of the number of open parentheses at each depth. # Use a list to keep track of the deepest level of nesting. # Use a set to keep track of the open parentheses. # Use a dictionary to keep track of the number of open parentheses at each depth. # Use a list to keep track of the deepest level of nesting. # Use a set to keep track of the open parentheses. # Use a dictionary to keep track of the number of open parentheses at each depth. # Use a list to keep track of the deepest level of nesting. # Use a set to keep track of the open parentheses. # Use a dictionary to keep track of the number of open parentheses at each depth. # Use a list to keep track of the deepest level of",
        "Ground Truth": "from typing import List def parse_nested_parens(paren_string: str) -> List[int]: def count_depth(s: str) -> int: max_depth, cnt = 0, 0 for ch in s: if ch == \"(\": cnt += 1 if ch == \")\": cnt -= 1 max_depth = max(max_depth, cnt) return max_depth return [count_depth(s) for s in paren_string.split(\" \") if s != \"\"]",
        "highlight_llm": "12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43",
        "highlight_gt": "17,18,19,20,21,22,23,25"
    },
    {
        "Task ID": 10,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "find_palindrome_prefix(string)",
        "Correct Code": "for i in range(len(string)): if is_palindrome(string[i:]):",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def is_palindrome(string: str) -> bool: \"\"\" Test if given string is a palindrome \"\"\" return string == string[::-1] def make_palindrome(string: str) -> str: if not string: return '' if is_palindrome(string): return string palindrome_prefix = find_palindrome_prefix(string) return palindrome_prefix + string[::-1]",
        "Ground Truth": "def is_palindrome(string: str) -> bool: \"\"\" Test if given string is a palindrome \"\"\" return string == string[::-1] def make_palindrome(string: str) -> str: if is_palindrome(string): return string for i in range(len(string)): if is_palindrome(string[i:]): return string + string[i-1::-1]",
        "highlight_llm": "22",
        "highlight_gt": "20,21"
    },
    {
        "Task ID": 17,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "in music_string.split('|')",
        "Correct Code": "music_string.split(\" \")",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "from typing import List def parse_music(music_string: str) -> List[int]: return [4 if x == 'o' else 2 if x == 'o|' else 1 for x in music_string.split('|')]",
        "Ground Truth": "from typing import List def parse_music(music_string: str) -> List[int]: def count_beats(note: str) -> int: if note == \"o\": return 4 elif note == \"o|\": return 2 elif note == \".|\": return 1 if music_string == \"\": return [] return list(map(count_beats, music_string.split(\" \")))",
        "highlight_llm": "17",
        "highlight_gt": "23"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "if music_string == \"\": return []",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "22"
    },
    {
        "Task ID": 19,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "numbers = numbers.split() numbers = [int(i) for i in numbers] numbers.sort() numbers = [str(i) for i in numbers] return ' '.join(numbers)",
        "Correct Code": "to_int = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9} if numbers == \"\": return \"\" return \" \".join(sorted(numbers.split(\" \"), key=lambda n: to_int[n]))",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "from typing import List def sort_numbers(numbers: str) -> str: numbers = numbers.split() numbers = [int(i) for i in numbers] numbers.sort() numbers = [str(i) for i in numbers] return ' '.join(numbers)",
        "Ground Truth": "from typing import List def sort_numbers(numbers: str) -> str: to_int = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9} if numbers == \"\": return \"\" return \" \".join(sorted(numbers.split(\" \"), key=lambda n: to_int[n]))",
        "highlight_llm": "11,12,13,14,15",
        "highlight_gt": "12,14,15"
    },
    {
        "Task ID": 20,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return (numbers[0], numbers[-1])",
        "Correct Code": "min_diff = float(\"inf\") min_pair = None for l, r in zip(numbers[:-1], numbers[1:]): diff = r - l if diff < min_diff: min_diff = diff min_pair = (l, r) return min_pair",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "from typing import List, Tuple def find_closest_elements(numbers: List[float]) -> Tuple[float, float]: \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number). >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) \"\"\" # TODO: implement this function. # raise NotImplementedError() numbers.sort() return (numbers[0], numbers[-1])",
        "Ground Truth": "from typing import List, Tuple def find_closest_elements(numbers: List[float]) -> Tuple[float, float]: numbers.sort() min_diff = float(\"inf\") min_pair = None for l, r in zip(numbers[:-1], numbers[1:]): diff = r - l if diff < min_diff: min_diff = diff min_pair = (l, r) return min_pair",
        "highlight_llm": "15",
        "highlight_gt": "13,14,15,16,17,18,19,20"
    },
    {
        "Task ID": 22,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "isinstance(value, int)",
        "Correct Code": "(lambda x: type(x) == int, values)",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "from typing import List, Any def filter_integers(values: List[Any]) -> List[int]: return [value for value in values if isinstance(value, int)]",
        "Ground Truth": "from typing import List, Any def filter_integers(values: List[Any]) -> List[int]: return list(filter(lambda x: type(x) == int, values))",
        "highlight_llm": "11",
        "highlight_gt": "11"
    },
    {
        "Task ID": 24,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "while n % divisor != 0:",
        "Correct Code": "",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "While error",
        "Syntactic Error ID": "Bb2",
        "Generated Code": "def largest_divisor(n: int) -> int: divisor = 1 while n % divisor != 0: divisor += 1 return divisor",
        "Ground Truth": "def largest_divisor(n: int) -> int: for i in range(2, n): if n % i == 0: return n // i return 1",
        "highlight_llm": "7",
        "highlight_gt": ""
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "if n % i == 0: return n // i",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "7"
    },
    {
        "Task ID": 26,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "# for i in range(len(numbers)): # for j in range(i+1, len(numbers)): # if numbers[i] == numbers[j]: # numbers.pop(j) # break # return numbers return list(set(numbers))",
        "Correct Code": "num_cnt = dict() for number in numbers: if number not in num_cnt: num_cnt[number] = 0 num_cnt[number] += 1 return [number for number in numbers if num_cnt[number] == 1]",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "Missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "from typing import List def remove_duplicates(numbers: List[int]) -> List[int]: # for i in range(len(numbers)): # for j in range(i+1, len(numbers)): # if numbers[i] == numbers[j]: # numbers.pop(j) # break # return numbers return list(set(numbers))",
        "Ground Truth": "from typing import List def remove_duplicates(numbers: List[int]) -> List[int]: num_cnt = dict() for number in numbers: if number not in num_cnt: num_cnt[number] = 0 num_cnt[number] += 1 return [number for number in numbers if num_cnt[number] == 1]",
        "highlight_llm": "10,11,12,13,14,15,16",
        "highlight_gt": "10,11,12,13,14,15"
    },
    {
        "Task ID": 31,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "if n == 1:",
        "Correct Code": "if n <= 1:",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def is_prime(n): if n == 1: return False for i in range(2, n): if n % i == 0: return False return True",
        "Ground Truth": "def is_prime(n): if n <= 1: return False n_sqrt = 1 while n_sqrt ** 2 < n: n_sqrt += 1 for i in range(2, min(n_sqrt + 1, n)): if n % i == 0: return False return True",
        "highlight_llm": "19",
        "highlight_gt": "18"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "n_sqrt = 1 while n_sqrt ** 2 < n: n_sqrt += 1",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "19,20"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 3,
        "Incorrect Code": "for i in range(2, n)",
        "Correct Code": "for i in range(2, min(n_sqrt + 1, n))",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "21",
        "highlight_gt": "21"
    },
    {
        "Task ID": 32,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "assert len(xs) % 2 == 0, \"xs must have even number of coefficients\" assert max(xs) != 0, \"xs must have largest non zero coefficient\" xs = [x / max(xs) for x in xs] xs.sort(reverse=True) xs = [x * -1 for x in xs] xs.append(0) xs.sort() xs = [x * -1 for x in xs] xs.append(0) xs.sort(reverse=True) xs = [x * -1 for x in xs] xs.append(0) xs.sort() xs = [x * -1 for x in xs] xs.append(0) xs.sort(reverse=True) xs = [x * -1 for x in xs] xs.append(0) xs.sort() xs = [x * -1 for x in xs] xs.append(0) xs.sort(reverse=True) xs = [x * -1 for x in xs] xs.append(0) xs.sort() xs = [x * -1 for x in xs] xs.append(0) xs.sort(reverse=True) xs = [x * -1 for x in xs] xs.append(0) xs.sort() xs = [x * -1 for x in xs] xs.append(0) xs.sort(reverse=True) xs = [x * -1 for x in xs] xs.append(0) xs.sort() xs = [x * -1 for x in xs] xs.append(0) xs.sort(reverse=True) xs = [x * -1 for x in xs] xs.append(0) xs.sort() xs = [x * -1 for x in xs] xs.append(0) xs.sort(reverse=True) xs = [x * -1 for x in",
        "Correct Code": "dxs = [xs[i] * i for i in range(1, len(xs))] def func(x): return poly(xs, x) def derivative(x): return poly(dxs, x) x, tol = 0, 1e-5 for _ in range(1000): fx = func(x) dfx = derivative(x) if abs(fx) < tol: break x = x - fx / dfx return x",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "import math def poly(xs: list, x: float): \"\"\" Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \"\"\" return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)]) def find_zero(xs: list): assert len(xs) % 2 == 0, \"xs must have even number of coefficients\" assert max(xs) != 0, \"xs must have largest non zero coefficient\" xs = [x / max(xs) for x in xs] xs.sort(reverse=True) xs = [x * -1 for x in xs] xs.append(0) xs.sort() xs = [x * -1 for x in xs] xs.append(0) xs.sort(reverse=True) xs = [x * -1 for x in xs] xs.append(0) xs.sort() xs = [x * -1 for x in xs] xs.append(0) xs.sort(reverse=True) xs = [x * -1 for x in xs] xs.append(0) xs.sort() xs = [x * -1 for x in xs] xs.append(0) xs.sort(reverse=True) xs = [x * -1 for x in xs] xs.append(0) xs.sort() xs = [x * -1 for x in xs] xs.append(0) xs.sort(reverse=True) xs = [x * -1 for x in xs] xs.append(0) xs.sort() xs = [x * -1 for x in xs] xs.append(0) xs.sort(reverse=True) xs = [x * -1 for x in xs] xs.append(0) xs.sort() xs = [x * -1 for x in xs] xs.append(0) xs.sort(reverse=True) xs = [x * -1 for x in xs] xs.append(0) xs.sort() xs = [x * -1 for x in xs] xs.append(0) xs.sort(reverse=True) xs = [x * -1 for x in",
        "Ground Truth": "import math def poly(xs: list, x: float): \"\"\" Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \"\"\" return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)]) def find_zero(xs: list): dxs = [xs[i] * i for i in range(1, len(xs))] def func(x): return poly(xs, x) def derivative(x): return poly(dxs, x) x, tol = 0, 1e-5 for _ in range(1000): fx = func(x) dfx = derivative(x) if abs(fx) < tol: break x = x - fx / dfx return x",
        "highlight_llm": "24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70",
        "highlight_gt": "24,25,26,27,28,30,31,32,33,34,35,37"
    },
    {
        "Task ID": 33,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "# l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0]",
        "Correct Code": "third = [l[i] for i in range(len(l)) if i % 3 == 0] third.sort() return [third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]",
        "Semantic Level": "Only comments",
        "Semantic Error ID": "Ae1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def sort_third(l: list): # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0] # l' = [l[i] for i in range(len(l)) if i % 3 != 0]",
        "Ground Truth": "def sort_third(l: list): third = [l[i] for i in range(len(l)) if i % 3 == 0] third.sort() return [third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]",
        "highlight_llm": "10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28",
        "highlight_gt": "10,11,12"
    },
    {
        "Task ID": 36,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if \"7\" in str(i): count += 1",
        "Correct Code": "cnt += len(list(filter(lambda c: c == \"7\", str(i))))",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def fizz_buzz(n: int): count = 0 for i in range(1, n): if i % 11 == 0 or i % 13 == 0: if \"7\" in str(i): count += 1 return count",
        "Ground Truth": "def fizz_buzz(n: int): cnt = 0 for i in range(n): if i % 11 == 0 or i % 13 == 0: cnt += len(list(filter(lambda c: c == \"7\", str(i)))) return cnt",
        "highlight_llm": "13,14",
        "highlight_gt": "13"
    },
    {
        "Task ID": 37,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "l_odd.sort() l_even.extend(l_odd)",
        "Correct Code": "even.sort() return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def sort_even(l: list): l_even = [] l_odd = [] for i in range(len(l)): if i % 2 == 0: l_even.append(l[i]) else: l_odd.append(l[i]) l_even.sort() l_odd.sort() l_even.extend(l_odd) return l_even",
        "Ground Truth": "def sort_even(l: list): even = [l[i] for i in range(len(l)) if i % 2 == 0] even.sort() return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]",
        "highlight_llm": "18,19",
        "highlight_gt": "11,12"
    },
    {
        "Task ID": 38,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "(group[1:] + group[0])",
        "Correct Code": "(group[2] + group[:2])",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "incorrect variable name",
        "Syntactic Error ID": "Be5",
        "Generated Code": "def encode_cyclic(s: str): \"\"\" returns encoded string by cycling groups of three characters. \"\"\" # split string to groups. Each of length 3. groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)] # cycle elements in each group. Unless group has fewer elements than 3. groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups] return \"\".join(groups) def decode_cyclic(s: str): # split string to groups. Each of length 3. groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)] # cycle elements in each group. Unless group has fewer elements than 3. groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups] return \"\".join(groups)",
        "Ground Truth": "def encode_cyclic(s: str): \"\"\" returns encoded string by cycling groups of three characters. \"\"\" # split string to groups. Each of length 3. groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)] # cycle elements in each group. Unless group has fewer elements than 3. groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups] return \"\".join(groups) def decode_cyclic(s: str): groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)] groups = [(group[2] + group[:2]) if len(group) == 3 else group for group in groups] return \"\".join(groups)",
        "highlight_llm": "19",
        "highlight_gt": "17"
    },
    {
        "Task ID": 39,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "fib_n = fib(n)",
        "Correct Code": "",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def prime_fib(n: int): fib_n = fib(n) if is_prime(fib_n): return fib_n else: return None",
        "Ground Truth": "def prime_fib(n: int): import random def miller_rabin(n, k=10): \"\"\"Test if n is prime using the Miller-Rabin primality test.\"\"\" if n < 2: return False if n == 2 or n == 3: return True if n % 2 == 0: return False r = 0 d = n - 1 while d % 2 == 0: r += 1 d //= 2 for _ in range(k): a = random.randint(2, n - 2) x = pow(a, d, n) if x == 1 or x == n - 1: continue for _ in range(r - 1): x = pow(x, 2, n) if x == n - 1: break else: return False return True c_prime = 0 a, b = 0, 1 while c_prime < n: a, b = b, a + b if miller_rabin(b): c_prime += 1 return b",
        "highlight_llm": "15",
        "highlight_gt": ""
    },
    {
        "Task ID": 40,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if l[i] == l[i + 1] + l[i + 2]:",
        "Correct Code": "if i != j and i != k and j != k and l[i] + l[j] + l[k] == 0:",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def triples_sum_to_zero(l: list): # check if the list is empty if len(l) < 3: return False # sort the list l.sort() # iterate through the list for i in range(len(l) - 2): # check if the current element is equal to the sum of the next two elements if l[i] == l[i + 1] + l[i + 2]: return True return False",
        "Ground Truth": "def triples_sum_to_zero(l: list): for i in range(len(l)): for j in range(len(l)): for k in range(len(l)): if i != j and i != k and j != k and l[i] + l[j] + l[k] == 0: return True return False",
        "highlight_llm": "26",
        "highlight_gt": "21"
    },
    {
        "Task ID": 41,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "return n // 2",
        "Correct Code": "return n ** 2",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect arithmetic",
        "Syntactic Error ID": "Be1",
        "Generated Code": "def car_race_collision(n: int): assert n > 0 assert n % 2 == 0 return n // 2",
        "Ground Truth": "def car_race_collision(n: int): return n ** 2",
        "highlight_llm": "15",
        "highlight_gt": "13"
    },
    {
        "Task ID": 44,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "ret = \"\" while x != 0: ret = str(x % base) + ret x //= base return ret",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def change_base(x: int, base: int): if x == 0: return '0' if base == 10: return str(x) if base == 2: return bin(x)[2:] if base == 8: return oct(x)[2:] if base == 16: return hex(x)[2:] return None",
        "Ground Truth": "def change_base(x: int, base: int): if x == 0: return \"0\" ret = \"\" while x != 0: ret = str(x % base) + ret x //= base return ret",
        "highlight_llm": "",
        "highlight_gt": "13,14,15,16,17"
    },
    {
        "Task ID": 46,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)",
        "Correct Code": "a, b, c, d = 0, 0, 2, 0 for i in range(4, n + 1): a, b, c, d = b, c, d, a + b + c + d return d",
        "Semantic Level": "Infinite Loop",
        "Semantic Error ID": "Ag1",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def fib4(n: int): if n == 0: return 0 elif n == 1: return 0 elif n == 2: return 2 elif n == 3: return 0 else: return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)",
        "Ground Truth": "def fib4(n: int): if n == 0: return 0 elif n == 1: return 0 elif n == 2: return 2 elif n == 3: return 0 else: a, b, c, d = 0, 0, 2, 0 for i in range(4, n + 1): a, b, c, d = b, c, d, a + b + c + d return d",
        "highlight_llm": "25",
        "highlight_gt": "26,27,28,29"
    },
    {
        "Task ID": 49,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "elif n % 2 == 0: return modp(n // 2, p) ** 2 % p else: return (modp(n - 1, p) ** 2 * 2) % p",
        "Correct Code": "while n != 0: if n % 2 == 1: res = res * x % p x = x * x % p n //= 2 return res % p",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def modp(n: int, p: int): if n == 0: return 1 elif n % 2 == 0: return modp(n // 2, p) ** 2 % p else: return (modp(n - 1, p) ** 2 * 2) % p",
        "Ground Truth": "def modp(n: int, p: int): res, x = 1, 2 while n != 0: if n % 2 == 1: res = res * x % p x = x * x % p n //= 2 return res % p",
        "highlight_llm": "16,17,18,19",
        "highlight_gt": "15,16,17,18,19,20"
    },
    {
        "Task ID": 51,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "vowels = 'aeiou'",
        "Correct Code": "not in \"aeiouAEIOU",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect constant",
        "Syntactic Error ID": "Be4",
        "Generated Code": "def remove_vowels(text): vowels = 'aeiou' return ''.join([i for i in text if i not in vowels])",
        "Ground Truth": "def remove_vowels(text): return \"\".join(list(filter(lambda ch: ch not in \"aeiouAEIOU\", text)))",
        "highlight_llm": "17",
        "highlight_gt": "17"
    },
    {
        "Task ID": 54,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return len(set(s0) & set(s1)) == len(s0) == len(s1)",
        "Correct Code": "return set(s0) == set(s1)",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "def same_chars(s0: str, s1: str): return len(set(s0) & set(s1)) == len(s0) == len(s1)",
        "Ground Truth": "def same_chars(s0: str, s1: str): return set(s0) == set(s1)",
        "highlight_llm": "17",
        "highlight_gt": "17"
    },
    {
        "Task ID": 55,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return fib(n - 1) + fib(n - 2)",
        "Correct Code": "a, b = 1, 1 for _ in range(3, n + 1): a, b, = b, a + b return b",
        "Semantic Level": "Infinite Loop",
        "Semantic Error ID": "Ag1",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def fib(n: int): if n < 2: return n return fib(n - 1) + fib(n - 2)",
        "Ground Truth": "def fib(n: int): if n == 0: return 0 if n <= 2: return 1 a, b = 1, 1 for _ in range(3, n + 1): a, b, = b, a + b return b",
        "highlight_llm": "12",
        "highlight_gt": "12,13,14,15"
    },
    {
        "Task ID": 57,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "l[i] <= l[i+1] l[i] >= l[i+1]",
        "Correct Code": "if l[i] > l[i + 1]  if l[i] < l[i + 1]",
        "Semantic Level": "incorrect comparison operation",
        "Semantic Error ID": "Ad4",
        "Syntactic Level": "incorrect comparison",
        "Syntactic Error ID": "Be6",
        "Generated Code": "def monotonic(l: list): if len(l) < 2: return True if l[0] < l[1]: return all(l[i] <= l[i+1] for i in range(len(l)-1)) else: return all(l[i] >= l[i+1] for i in range(len(l)-1))",
        "Ground Truth": "def monotonic(l: list): inc, dec = True, True for i in range(len(l) - 1): if l[i] > l[i + 1]: inc = False if l[i] < l[i + 1]: dec = False return inc or dec",
        "highlight_llm": "13,15",
        "highlight_gt": "12,13"
    },
    {
        "Task ID": 63,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "Correct Code": "a, b, c = 0, 0, 1 for _ in range(3, n + 1): a, b, c = b, c, a + b + c return c",
        "Semantic Level": "Infinite Loop",
        "Semantic Error ID": "Ag1",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def fibfib(n: int): if n == 0: return 0 elif n == 1: return 0 elif n == 2: return 1 else: return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "Ground Truth": "def fibfib(n: int): if n == 0 or n == 1: return 0 elif n == 2: return 1 a, b, c = 0, 0, 1 for _ in range(3, n + 1): a, b, c = b, c, a + b + c return c",
        "highlight_llm": "22",
        "highlight_gt": "19,20,21,22"
    },
    {
        "Task ID": 64,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "vowels = \"aeiou",
        "Correct Code": "in \"aeiouAEIOU",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect constant",
        "Syntactic Error ID": "Be4",
        "Generated Code": "FIX = \"\"\" Add more test cases. \"\"\" def vowels_count(s): vowels = \"aeiou\" count = 0 for i in s: if i in vowels: count += 1 if s[-1] in vowels: count += 1 return count",
        "Ground Truth": "FIX = \"\"\" Add more test cases. \"\"\" def vowels_count(s): if s == \"\": return 0 cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s))) if s[-1] in \"yY\": cnt += 1 return cnt",
        "highlight_llm": "17",
        "highlight_gt": "17"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "if s[-1] in vowels:",
        "Correct Code": "if s[-1] in \"yY\":",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "22",
        "highlight_gt": "18"
    },
    {
        "Task ID": 65,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "if shift >= len(s): return s[::-1]",
        "Correct Code": "if shift > len(s): return s[::-1] shift %= len(s) if shift == 0: return s",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def circular_shift(x, shift): s = str(x) if shift >= len(s): return s[::-1] else: return s[-shift:] + s[:-shift]",
        "Ground Truth": "def circular_shift(x, shift): s = str(x) if shift > len(s): return s[::-1] shift %= len(s) if shift == 0: return s else: return s[len(s) - shift:] + s[:len(s) - shift]",
        "highlight_llm": "11,12",
        "highlight_gt": "11,12,13,14"
    },
    {
        "Task ID": 67,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "int(s.split()[1]",
        "Correct Code": "int(words[3])",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect constant",
        "Syntactic Error ID": "Be4",
        "Generated Code": "def fruit_distribution(s,n): # your code here return n - int(s.split()[0]) - int(s.split()[1])",
        "Ground Truth": "def fruit_distribution(s,n): words = s.split(\" \") c1, c2 = int(words[0]), int(words[3]) assert n - c1 - c2 >= 0, \"invalid inputs\" # $_CONTRACT_$ return n - c1 - c2",
        "highlight_llm": "15",
        "highlight_gt": "17"
    },
    {
        "Task ID": 69,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "for i in freq: if freq[i] >= i: return i return -1",
        "Correct Code": "ans = -1 for num, cnt in count.items(): if cnt >= num: ans = max(ans, num) return ans",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def search(lst): freq = {} for i in lst: if i in freq: freq[i] += 1 else: freq[i] = 1 for i in freq: if freq[i] >= i: return i return -1",
        "Ground Truth": "def search(lst): count = dict() for num in lst: if num not in count: count[num] = 0 count[num] += 1 ans = -1 for num, cnt in count.items(): if cnt >= num: ans = max(ans, num) return ans",
        "highlight_llm": "18,19,20,21",
        "highlight_gt": "18,19,20,21,22"
    },
    {
        "Task ID": 70,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "+ [min(lst)]",
        "Correct Code": "",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect arithmetic",
        "Syntactic Error ID": "Be1",
        "Generated Code": "def strange_sort_list(lst): if len(lst) == 0: return [] else: return [min(lst)] + strange_sort_list([x for x in lst if x != min(lst)]) + [min(lst)]",
        "Ground Truth": "def strange_sort_list(lst): sorted_list = sorted(lst) ans, i, j = [], 0, len(sorted_list) - 1 while i < j: ans.append(sorted_list[i]) ans.append(sorted_list[j]) i += 1 j -= 1 if i == j: ans.append(sorted_list[i]) return ans",
        "highlight_llm": "15",
        "highlight_gt": ""
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "strange_sort_list([x for x in lst if x != min(lst)])",
        "Correct Code": "while i < j: ans.append(sorted_list[i]) ans.append(sorted_list[j]) i += 1 j -= 1 if i == j: ans.append(sorted_list[i])",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "15",
        "highlight_gt": "14,15,16,17,18,19"
    },
    {
        "Task ID": 71,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "if a + b <= c or a + c <= b or b + c <= a: return -1",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def triangle_area(a, b, c): # Calculate the area of the triangle s = (a + b + c) / 2 area = (s * (s - a) * (s - b) * (s - c)) ** 0.5 return round(area, 2)",
        "Ground Truth": "def triangle_area(a, b, c): if a + b <= c or a + c <= b or b + c <= a: return -1 p = (a + b + c) / 2 return round((p * (p - a) * (p - b) * (p - c)) ** 0.5, 2)",
        "highlight_llm": "",
        "highlight_gt": "13"
    },
    {
        "Task ID": 72,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "is_balanced(q)",
        "Correct Code": "",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def will_it_fly(q,w): # Your code here if is_balanced(q) and sum(q) <= w: return True else: return False",
        "Ground Truth": "def will_it_fly(q,w): return q == q[::-1] and sum(q) <= w",
        "highlight_llm": "22",
        "highlight_gt": ""
    },
    {
        "Task ID": 73,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "arr_reversed, cnt = arr[::-1], 0 for i in range(len(arr) // 2): if arr[i] != arr_reversed[i]: cnt += 1 return cnt",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def smallest_change(arr): # TODO: Write your code here pass",
        "Ground Truth": "def smallest_change(arr): arr_reversed, cnt = arr[::-1], 0 for i in range(len(arr) // 2): if arr[i] != arr_reversed[i]: cnt += 1 return cnt",
        "highlight_llm": "13",
        "highlight_gt": "12,13,14,15,16"
    },
    {
        "Task ID": 74,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if len(lst1) > len(lst2):  elif len(lst1) < len(lst2):",
        "Correct Code": "c1, c2 = sum(map(lambda s: len(s), lst1)), sum(map(lambda s: len(s), lst2))  if c1 <= c2",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def total_match(lst1, lst2): if len(lst1) > len(lst2): return lst2 elif len(lst1) < len(lst2): return lst1 else: return lst1",
        "Ground Truth": "def total_match(lst1, lst2): c1, c2 = sum(map(lambda s: len(s), lst1)), sum(map(lambda s: len(s), lst2)) return lst1 if c1 <= c2 else lst2",
        "highlight_llm": "15,17",
        "highlight_gt": "15,16"
    },
    {
        "Task ID": 75,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "for i in range(2, a): if a % i == 0: return False return True",
        "Correct Code": "if a <= 1: return False isprime = [True] * (a + 1) for i in range(2, a + 1): if isprime[i]: for j in range(i + i, a + 1, i): isprime[j] = False cnt, tmp = 0, a for i in range(2, a + 1): while isprime[i] and tmp % i == 0: tmp //= i cnt += 1 return cnt == 3",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def is_multiply_prime(a): for i in range(2, a): if a % i == 0: return False return True",
        "Ground Truth": "def is_multiply_prime(a): if a <= 1: return False isprime = [True] * (a + 1) for i in range(2, a + 1): if isprime[i]: for j in range(i + i, a + 1, i): isprime[j] = False cnt, tmp = 0, a for i in range(2, a + 1): while isprime[i] and tmp % i == 0: tmp //= i cnt += 1 return cnt == 3",
        "highlight_llm": "9,10,11,12",
        "highlight_gt": "9,10,11,12,13,14,15,16,17,18,19,20"
    },
    {
        "Task ID": 76,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return x == n**int(n)",
        "Correct Code": "if x == 1: return True if n == 0: return x == 0 if n == 1: return x == 1 if n == -1: return abs(x) == 1 p = n while abs(p) <= abs(x): if p == x: return True p = p * n return False",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def is_simple_power(x, n): return x == n**int(n)",
        "Ground Truth": "def is_simple_power(x, n): if x == 1: return True if n == 0: return x == 0 if n == 1: return x == 1 if n == -1: return abs(x) == 1 p = n while abs(p) <= abs(x): if p == x: return True p = p * n return False",
        "highlight_llm": "13",
        "highlight_gt": "13,14,15,16,17,18,19,20,21"
    },
    {
        "Task ID": 77,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "a**(1/3) % 1 == 0",
        "Correct Code": "(a ** (1. / 3))) ** 3 == a",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect arithmetic",
        "Syntactic Error ID": "Be1",
        "Generated Code": "def iscube(a): return a**(1/3) % 1 == 0",
        "Ground Truth": "def iscube(a): a = abs(a) return int(round(a ** (1. / 3))) ** 3 == a",
        "highlight_llm": "14",
        "highlight_gt": "15"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "a = abs(a) return int(round",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "14,15"
    },
    {
        "Task ID": 78,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return 0",
        "Correct Code": "return len(list(filter(lambda x: x in \"2357BD\", num)))",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def hex_key(num): # your code here return 0",
        "Ground Truth": "def hex_key(num): return len(list(filter(lambda x: x in \"2357BD\", num)))",
        "highlight_llm": "20",
        "highlight_gt": "20"
    },
    {
        "Task ID": 80,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "s = list(s) s = set(s) if len(s) == 3: return True else: return False",
        "Correct Code": "for i in range(len(s) - 2): if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]: return False return True",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def is_happy(s): if len(s) < 3: return False else: s = list(s) s = set(s) if len(s) == 3: return True else: return False",
        "Ground Truth": "def is_happy(s): if len(s) < 3: return False for i in range(len(s) - 2): if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]: return False return True",
        "highlight_llm": "16,17,18,19,20,21",
        "highlight_gt": "14,15,16,17"
    },
    {
        "Task ID": 81,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "def to_letter_grade(score): if score == 4.0: return \"A+\" elif score > 3.7: return \"A\" elif score > 3.3: return \"A-\" elif score > 3.0: return \"B+\" elif score > 2.7: return \"B\" elif score > 2.3: return \"B-\" elif score > 2.0: return \"C+\" elif score > 1.7: return \"C\" elif score > 1.3: return \"C-\" elif score > 1.0: return \"D+\" elif score > 0.7: return \"D\" elif score > 0.0: return \"D-\" else: return \"E\" return [to_letter_grade(x) for x in grades]",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def numerical_letter_grade(grades): pass",
        "Ground Truth": "def numerical_letter_grade(grades): def to_letter_grade(score): if score == 4.0: return \"A+\" elif score > 3.7: return \"A\" elif score > 3.3: return \"A-\" elif score > 3.0: return \"B+\" elif score > 2.7: return \"B\" elif score > 2.3: return \"B-\" elif score > 2.0: return \"C+\" elif score > 1.7: return \"C\" elif score > 1.3: return \"C-\" elif score > 1.0: return \"D+\" elif score > 0.7: return \"D\" elif score > 0.0: return \"D-\" else: return \"E\" return [to_letter_grade(x) for x in grades]",
        "highlight_llm": "26",
        "highlight_gt": "26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54"
    },
    {
        "Task ID": 82,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return True",
        "Correct Code": "",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "def prime_length(string): if len(string) == 1: return True elif len(string) == 2: return True elif len(string) % 2 == 0: return False else: for i in range(3, int(len(string) / 2) + 1, 2): if len(string) % i == 0: return False return True",
        "Ground Truth": "def prime_length(string): def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) return is_prime(len(string))",
        "highlight_llm": "11",
        "highlight_gt": ""
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "in range(3, int(len(string) / 2) + 1, 2):",
        "Correct Code": "not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "17",
        "highlight_gt": "11"
    },
    {
        "Task ID": 83,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "ends_one_starts(n - 1)",
        "Correct Code": "",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def starts_one_ends(n): if n == 1: return 1 return starts_one_ends(n - 1) + ends_one_starts(n - 1)",
        "Ground Truth": "def starts_one_ends(n): if n == 1: return 1 return 18 * 10 ** (n - 2)",
        "highlight_llm": "8",
        "highlight_gt": ""
    },
    {
        "Task ID": 84,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "return bin(N)[2:]",
        "Correct Code": "s = sum(map(lambda x: int(x), str(N))) return bin(s)[2:]",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def solve(N): return bin(N)[2:]",
        "Ground Truth": "def solve(N): s = sum(map(lambda x: int(x), str(N))) return bin(s)[2:]",
        "highlight_llm": "15",
        "highlight_gt": "15,16"
    },
    {
        "Task ID": 85,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "if lst[i] % 2 == 0",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def add(lst): return sum([lst[i] for i in range(1, len(lst), 2)])",
        "Ground Truth": "def add(lst): s = 0 for i in range(1, len(lst), 2): if lst[i] % 2 == 0: s += lst[i] return s",
        "highlight_llm": "",
        "highlight_gt": "10"
    },
    {
        "Task ID": 86,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "key=lambda x: ''.join(sorted(x))",
        "Correct Code": "key=lambda ch: ord(ch)))",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def anti_shuffle(s): return ' '.join(sorted(s.split(), key=lambda x: ''.join(sorted(x))))",
        "Ground Truth": "def anti_shuffle(s): words = s.split(\" \") return \" \".join(map(lambda x: \"\".join(sorted(x, key=lambda ch: ord(ch))), words))",
        "highlight_llm": "14",
        "highlight_gt": "15"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "sorted",
        "Correct Code": "map",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "14",
        "highlight_gt": "15"
    },
    {
        "Task ID": 88,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pivot = array[0] left = [x for x in array[1:] if x <= pivot] right = [x for x in array[1:] if x > pivot] return sort_array(left) + [pivot] + sort_array(right)",
        "Correct Code": "if array == []: return [] return sorted(array, reverse=(array[0]+array[-1]) % 2 == 0)",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def sort_array(array): if len(array) < 2: return array pivot = array[0] left = [x for x in array[1:] if x <= pivot] right = [x for x in array[1:] if x > pivot] return sort_array(left) + [pivot] + sort_array(right)",
        "Ground Truth": "def sort_array(array): if array == []: return [] return sorted(array, reverse=(array[0]+array[-1]) % 2 == 0)",
        "highlight_llm": "19,20,21,23",
        "highlight_gt": "16,17"
    },
    {
        "Task ID": 89,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "# create a list of the alphabet alphabet = list('abcdefghijklmnopqrstuvwxyz') # create a list of the alphabet shifted down by two shifted_alphabet = alphabet[2:] + alphabet[:2] # create a dictionary of the alphabet alphabet_dict = dict(zip(alphabet, shifted_alphabet)) # create a list of the alphabet shifted down by two multiplied to two places shifted_alphabet_dict = dict(zip(shifted_alphabet, alphabet)) # create a list of the alphabet shifted down by two multiplied to two places shifted_alphabet_dict_two = dict(zip(shifted_alphabet, alphabet)) # create a list of the alphabet shifted down by two multiplied to two places shifted_alphabet_dict_two_two = dict(zip(shifted_alphabet, alphabet)) # create a list of the alphabet shifted down by two multiplied to two places shifted_alphabet_dict_two_two_two = dict(zip(shifted_alphabet, alphabet)) # create a list of the alphabet shifted down by two multiplied to two places shifted_alphabet_dict_two_two_two_two = dict(zip(shifted_alphabet, alphabet)) # create a list of the alphabet shifted down by two multiplied to two places shifted_alphabet_dict_two_two_two_two_two = dict(zip(shifted_alphabet, alphabet)) # create a list of the alphabet shifted down by two multiplied to two places shifted_alphabet_dict_two_two_two_two_two_two = dict(zip(shifted_alphabet, alphabet)) # create a list of the alphabet shifted down by two multiplied to two places shifted_alphabet_dict_two_two_two_two_two_two_two = dict(zip(shifted_alphabet, alphabet)) # create a list of the alphabet shifted down by two multiplied to two places shifted_alphabet_dict_two_two_two_two_two_two_two_two = dict(zip(shifted_alphabet, alphabet))",
        "Correct Code": "d = 'abcdefghijklmnopqrstuvwxyz' return \"\".join(map(lambda ch: chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\")) if ch in d else ch, s))",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def encrypt(s): # create a list of the alphabet alphabet = list('abcdefghijklmnopqrstuvwxyz') # create a list of the alphabet shifted down by two shifted_alphabet = alphabet[2:] + alphabet[:2] # create a dictionary of the alphabet alphabet_dict = dict(zip(alphabet, shifted_alphabet)) # create a list of the alphabet shifted down by two multiplied to two places shifted_alphabet_dict = dict(zip(shifted_alphabet, alphabet)) # create a list of the alphabet shifted down by two multiplied to two places shifted_alphabet_dict_two = dict(zip(shifted_alphabet, alphabet)) # create a list of the alphabet shifted down by two multiplied to two places shifted_alphabet_dict_two_two = dict(zip(shifted_alphabet, alphabet)) # create a list of the alphabet shifted down by two multiplied to two places shifted_alphabet_dict_two_two_two = dict(zip(shifted_alphabet, alphabet)) # create a list of the alphabet shifted down by two multiplied to two places shifted_alphabet_dict_two_two_two_two = dict(zip(shifted_alphabet, alphabet)) # create a list of the alphabet shifted down by two multiplied to two places shifted_alphabet_dict_two_two_two_two_two = dict(zip(shifted_alphabet, alphabet)) # create a list of the alphabet shifted down by two multiplied to two places shifted_alphabet_dict_two_two_two_two_two_two = dict(zip(shifted_alphabet, alphabet)) # create a list of the alphabet shifted down by two multiplied to two places shifted_alphabet_dict_two_two_two_two_two_two_two = dict(zip(shifted_alphabet, alphabet)) # create a list of the alphabet shifted down by two multiplied to two places shifted_alphabet_dict_two_two_two_two_two_two_two_two = dict(zip(shifted_alphabet, alphabet))",
        "Ground Truth": "def encrypt(s): d = 'abcdefghijklmnopqrstuvwxyz' return \"\".join(map(lambda ch: chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\")) if ch in d else ch, s))",
        "highlight_llm": "12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35",
        "highlight_gt": "12,13"
    },
    {
        "Task ID": 90,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return lst[1]",
        "Correct Code": "for x in sorted_list: if x != sorted_list[0]: return x",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def next_smallest(lst): if len(lst) < 2: return None lst.sort() return lst[1]",
        "Ground Truth": "def next_smallest(lst): if len(lst) <= 1: return None sorted_list = sorted(lst) for x in sorted_list: if x != sorted_list[0]: return x",
        "highlight_llm": "16",
        "highlight_gt": "14,15,16"
    },
    {
        "Task ID": 91,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "in S.split()",
        "Correct Code": "in S.split()",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "def is_bored(S): return sum(1 for word in S.split() if word.startswith('I'))",
        "Ground Truth": "def is_bored(S): sentences = map(lambda x: x.strip(), ((S.replace(\"?\", \".\")).replace(\"!\", \".\")).split(\".\")) return len([s for s in sentences if s.startswith(\"I \")])",
        "highlight_llm": "13",
        "highlight_gt": "13"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "if word.startswith('I')",
        "Correct Code": "if s.startswith(\"I \")",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "13",
        "highlight_gt": "14"
    },
    {
        "Task ID": 92,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "if type(x) != int or type(y) != int or type(z) != int: return False",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def any_int(x, y, z): if x == y + z or y == x + z or z == x + y: return True else: return False",
        "Ground Truth": "def any_int(x, y, z): if type(x) != int or type(y) != int or type(z) != int: return False return x == y + z or y == x + z or z == y + x",
        "highlight_llm": "",
        "highlight_gt": "19"
    },
    {
        "Task ID": 93,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "def switch_case(ch): if ord(\"A\") <= ord(ch) <= ord(\"Z\"): return chr(ord(ch) + 32) elif ord(\"a\") <= ord(ch) <= ord(\"z\"): return chr(ord(ch) - 32) else: return ch def vowel_change(ch): return ch if ch not in \"aeiouAEIOU\" else chr(ord(ch) + 2) m = \"\".join(map(switch_case, message)) return \"\".join(map(vowel_change, m))",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def encode(message): pass",
        "Ground Truth": "def encode(message): def switch_case(ch): if ord(\"A\") <= ord(ch) <= ord(\"Z\"): return chr(ord(ch) + 32) elif ord(\"a\") <= ord(ch) <= ord(\"z\"): return chr(ord(ch) - 32) else: return ch def vowel_change(ch): return ch if ch not in \"aeiouAEIOU\" else chr(ord(ch) + 2) m = \"\".join(map(switch_case, message)) return \"\".join(map(vowel_change, m))",
        "highlight_llm": "15",
        "highlight_gt": "15,16,17,18,19,20,21,23,24,26,27"
    },
    {
        "Task ID": 94,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] lst = [0,81,12,3,1,21] lst = [0,8,1,2,1,7] lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] lst = [0,81,12,3,1,21] lst = [0,8,1,2,1,7] lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] lst = [1,3,",
        "Correct Code": "def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) sorted_list = sorted(lst)[::-1] for x in sorted_list: if is_prime(x): return sum(map(lambda ch: int(ch), str(x)))",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def skjkasdkd(lst): lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] lst = [0,81,12,3,1,21] lst = [0,8,1,2,1,7] lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] lst = [0,81,12,3,1,21] lst = [0,8,1,2,1,7] lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] lst = [1,3,",
        "Ground Truth": "def skjkasdkd(lst): def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) sorted_list = sorted(lst)[::-1] for x in sorted_list: if is_prime(x): return sum(map(lambda ch: int(ch), str(x)))",
        "highlight_llm": "13,14,15,16,17,18,19,20,21,22,23,24,25,26,27",
        "highlight_gt": "16,17,18,19,20,21"
    },
    {
        "Task ID": 95,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "for key in dict: if key.isupper() == True: return False elif key.islower() == True: return True else: return False",
        "Correct Code": "lower, upper = True, True for k in keys: if type(k) != str: lower = upper = False break if not k.islower(): lower = False if not k.isupper(): upper = False return lower or upper",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def check_dict_case(dict): if len(dict) == 0: return False else: for key in dict: if key.isupper() == True: return False elif key.islower() == True: return True else: return False",
        "Ground Truth": "def check_dict_case(dict): keys = list(dict.keys()) if keys == []: return False lower, upper = True, True for k in keys: if type(k) != str: lower = upper = False break if not k.islower(): lower = False if not k.isupper(): upper = False return lower or upper",
        "highlight_llm": "16,17,18,19,20,21,22",
        "highlight_gt": "15,16,17,18,19,20,21,22"
    },
    {
        "Task ID": 96,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "ans = [] isprime = [True] * (n + 1) for i in range(2, n): if isprime[i]: ans.append(i) for j in range(i + i, n, i): isprime[j] = False return ans",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def count_up_to(n): pass",
        "Ground Truth": "def count_up_to(n): ans = [] isprime = [True] * (n + 1) for i in range(2, n): if isprime[i]: ans.append(i) for j in range(i + i, n, i): isprime[j] = False return ans",
        "highlight_llm": "12",
        "highlight_gt": "12,13,14,15,16,17,18,19"
    },
    {
        "Task ID": 97,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "a * b",
        "Correct Code": "int(str(a)[-1]) * int(str(b)[-1])",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def multiply(a, b): return a * b",
        "Ground Truth": "def multiply(a, b): return int(str(a)[-1]) * int(str(b)[-1])",
        "highlight_llm": "11",
        "highlight_gt": "11"
    },
    {
        "Task ID": 98,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "and s[i].upper()",
        "Correct Code": "if s[i] in \"AEIOU\":",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def count_upper(s): count = 0 for i in range(len(s)): if i % 2 == 0 and s[i].upper() in 'AEIOU': count += 1 return count",
        "Ground Truth": "def count_upper(s): cnt = 0 for i in range(0, len(s), 2): if s[i] in \"AEIOU\": cnt += 1 return cnt",
        "highlight_llm": "12",
        "highlight_gt": "12"
    },
    {
        "Task ID": 99,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "int(value) if int(value) == float(value) else int(value) if int(value) > float(value) else int(value) - 1",
        "Correct Code": "def rounding(val): if abs(val - int(val)) != 0.5: return round(val) if val > 0: return int(val) + 1 else: return int(val) - 1 return rounding(float(value))",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def closest_integer(value): return int(value) if int(value) == float(value) else int(value) if int(value) > float(value) else int(value) - 1",
        "Ground Truth": "def closest_integer(value): def rounding(val): if abs(val - int(val)) != 0.5: return round(val) if val > 0: return int(val) + 1 else: return int(val) - 1 return rounding(float(value))",
        "highlight_llm": "19",
        "highlight_gt": "24,25,26,27,28,29,30,31"
    },
    {
        "Task ID": 100,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return [n] + make_a_pile(n + 2)  return [n] + make_a_pile(n + 1)",
        "Correct Code": "for _ in range(n): ans.append(num) num += 2 return ans",
        "Semantic Level": "Infinite Loop",
        "Semantic Error ID": "Ag1",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def make_a_pile(n): if n % 2 == 0: return [n] + make_a_pile(n + 2) else: return [n] + make_a_pile(n + 1)",
        "Ground Truth": "def make_a_pile(n): ans, num = [], n for _ in range(n): ans.append(num) num += 2 return ans",
        "highlight_llm": "16,18",
        "highlight_gt": "16,17,18,19"
    },
    {
        "Task ID": 101,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "s.split(', ')",
        "Correct Code": "(s.replace(\",\", \" \")).split()",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def words_string(s): return s.split(', ')",
        "Ground Truth": "def words_string(s): words = (s.replace(\",\", \" \")).split() return [word for word in words if word != \"\"]",
        "highlight_llm": "10",
        "highlight_gt": "10"
    },
    {
        "Task ID": 102,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if x % 2 == 0 and x <= y:  elif y % 2 == 0 and x < y:  else:",
        "Correct Code": "if x > y: if x == y: if y % 2 == 0 else if y % 2 == 0 else",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def choose_num(x, y): if x % 2 == 0 and x <= y: return x elif y % 2 == 0 and x < y: return y else: return -1",
        "Ground Truth": "def choose_num(x, y): if x > y: return -1 if x == y: return y if y % 2 == 0 else -1 return y if y % 2 == 0 else y - 1",
        "highlight_llm": "10,12,14",
        "highlight_gt": "10,11,12"
    },
    {
        "Task ID": 103,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "int",
        "Correct Code": "round",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def rounded_avg(n, m): if n > m: return -1 else: return bin(int((n + m) / 2))[2:]",
        "Ground Truth": "def rounded_avg(n, m): if n > m: return -1 avg = round((n + m) / 2) return bin(avg)",
        "highlight_llm": "15",
        "highlight_gt": "13"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "[2:]",
        "Correct Code": "",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "15",
        "highlight_gt": ""
    },
    {
        "Task ID": 104,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return sorted(list(filter(lambda x: not any(map(lambda y: y % 2 == 0, list(str(x)))), x)))",
        "Correct Code": "def judge(x): for ch in str(x): if int(ch) % 2 == 0: return False return True return sorted(list(filter(judge, x)))",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def unique_digits(x): return sorted(list(filter(lambda x: not any(map(lambda y: y % 2 == 0, list(str(x)))), x)))",
        "Ground Truth": "def unique_digits(x): def judge(x): for ch in str(x): if int(ch) % 2 == 0: return False return True return sorted(list(filter(judge, x)))",
        "highlight_llm": "13",
        "highlight_gt": "13,14,15,16,17,18"
    },
    {
        "Task ID": 105,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "# Your code here return []",
        "Correct Code": "def to_word(x: int) -> str: if x == 1: return \"One\" elif x == 2: return \"Two\" elif x == 3: return \"Three\" elif x == 4: return \"Four\" elif x == 5: return \"Five\" elif x == 6: return \"Six\" elif x == 7: return \"Seven\" elif x == 8: return \"Eight\" else: return \"Nine\" sorted_list, ans = sorted(arr)[::-1], [] for x in sorted_list: if 1 <= x <= 9: ans.append(to_word(x)) return ans",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def by_length(arr): # Your code here return []",
        "Ground Truth": "def by_length(arr): def to_word(x: int) -> str: if x == 1: return \"One\" elif x == 2: return \"Two\" elif x == 3: return \"Three\" elif x == 4: return \"Four\" elif x == 5: return \"Five\" elif x == 6: return \"Six\" elif x == 7: return \"Seven\" elif x == 8: return \"Eight\" else: return \"Nine\" sorted_list, ans = sorted(arr)[::-1], [] for x in sorted_list: if 1 <= x <= 9: ans.append(to_word(x)) return ans",
        "highlight_llm": "23,24",
        "highlight_gt": "23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46"
    },
    {
        "Task ID": 106,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "# Your code here return []",
        "Correct Code": "if n == 0: return [] if n == 1: return [1] if n == 2: return [1, 2] ans = [1, 2] for i in range(3, n + 1): if i % 2 == 1: ans.append(ans[-2] + (i - 1) + i) else: ans.append(ans[-2] * (i - 1) * i) return ans",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def f(n): # your code here return [1]",
        "Ground Truth": "def f(n): if n == 0: return [] if n == 1: return [1] if n == 2: return [1, 2] ans = [1, 2] for i in range(3, n + 1): if i % 2 == 1: ans.append(ans[-2] + (i - 1) + i) else: ans.append(ans[-2] * (i - 1) * i) return ans",
        "highlight_llm": "10,11",
        "highlight_gt": "10,11,12,14,15,16,17,18,19,20"
    },
    {
        "Task ID": 107,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "if is_palindrome(i): if is_even(i):",
        "Correct Code": "if str(i) == str(i)[::-1]: if i % 2 == 1:",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def even_odd_palindrome(n): # Time complexity: O(n) # Space complexity: O(1) even, odd = 0, 0 for i in range(1, n + 1): if is_palindrome(i): if is_even(i): even += 1 else: odd += 1 return even, odd",
        "Ground Truth": "def even_odd_palindrome(n): odd_cnt, even_cnt = 0, 0 for i in range(1, n + 1): if str(i) == str(i)[::-1]: if i % 2 == 1: odd_cnt += 1 else: even_cnt += 1 return even_cnt, odd_cnt",
        "highlight_llm": "28,29",
        "highlight_gt": "26,27"
    },
    {
        "Task ID": 108,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if sum(int(digit) for digit in str(abs(num))) > 0:",
        "Correct Code": "def judge(x: int) -> int: l = list(str(x)) if l[0] == \"-\": l = l[1:] l = list(map(int, l)) l[0] = -l[0] else: l = list(map(int, l)) return 1 if sum(l) > 0 else 0",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def count_nums(arr): count = 0 for num in arr: if sum(int(digit) for digit in str(abs(num))) > 0: count += 1 return count",
        "Ground Truth": "def count_nums(arr): def judge(x: int) -> int: l = list(str(x)) if l[0] == \"-\": l = l[1:] l = list(map(int, l)) l[0] = -l[0] else: l = list(map(int, l)) return 1 if sum(l) > 0 else 0 return sum(map(judge, arr))",
        "highlight_llm": "13",
        "highlight_gt": "11,12,13,14,15,16,17,18,19"
    },
    {
        "Task ID": 109,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "else: arr.append(arr.pop(0)) return move_one_ball(arr)",
        "Correct Code": "for i in range(1, len(arr)): if arr[i:] + arr[:i] == sorted_arr: return True return False",
        "Semantic Level": "Infinite Loop",
        "Semantic Error ID": "Ag1",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def move_one_ball(arr): if len(arr) == 0: return True # If the array is already sorted then return True if arr == sorted(arr): return True # If the array is not sorted then we need to move the last element to the # first position and then perform right shift operation to make the array # sorted. else: arr.append(arr.pop(0)) return move_one_ball(arr)",
        "Ground Truth": "def move_one_ball(arr): sorted_arr = sorted(arr) if arr == sorted_arr: return True for i in range(1, len(arr)): if arr[i:] + arr[:i] == sorted_arr: return True return False",
        "highlight_llm": "38,39,40",
        "highlight_gt": "31,32,33,34"
    },
    {
        "Task ID": 110,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if sum(lst1) == sum(lst2) and sum(lst1) % 2 == 0",
        "Correct Code": "cnt_odd = len(list(filter(lambda x: x % 2 == 1, lst1))) cnt_even = len(list(filter(lambda x: x % 2 == 0, lst2)))  if cnt_odd <= cnt_even",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def exchange(lst1, lst2): # TODO: implement this function return \"YES\" if sum(lst1) == sum(lst2) and sum(lst1) % 2 == 0 else \"NO",
        "Ground Truth": "def exchange(lst1, lst2): cnt_odd = len(list(filter(lambda x: x % 2 == 1, lst1))) cnt_even = len(list(filter(lambda x: x % 2 == 0, lst2))) return \"YES\" if cnt_odd <= cnt_even else \"NO",
        "highlight_llm": "15",
        "highlight_gt": "14,15,16"
    },
    {
        "Task ID": 111,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "else: dictionary[letter] = 1 return dictionary",
        "Correct Code": "if word not in count: count[word] = 0 count[word] += 1 mx = max(list(count.values())) for ch, c in count.items(): if c == mx: ans[ch] = c return ans",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def histogram(test): # Your code here # split the string into a list of strings # iterate through the list # if the letter is in the dictionary, increment the count # if the letter is not in the dictionary, add it to the dictionary with a count of 1 # return the dictionary # split the string into a list of strings test_list = test.split() # create a dictionary dictionary = {} # iterate through the list for letter in test_list: # if the letter is in the dictionary, increment the count if letter in dictionary: dictionary[letter] += 1 # if the letter is not in the dictionary, add it to the dictionary with a count of 1 else: dictionary[letter] = 1 return dictionary",
        "Ground Truth": "def histogram(test): if test == \"\": return {} count, ans = dict(), dict() for word in test.split(\" \"): if word != \"\": if word not in count: count[word] = 0 count[word] += 1 mx = max(list(count.values())) for ch, c in count.items(): if c == mx: ans[ch] = c return ans",
        "highlight_llm": "34,35,37",
        "highlight_gt": "22,23,24,25,26,27,28"
    },
    {
        "Task ID": 113,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "n the str\" + str(j + 1) + \" of the ",
        "Correct Code": "template.replace(\"i\", str(odd_cnt))",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect constant",
        "Syntactic Error ID": "Be4",
        "Generated Code": "def odd_count(lst): return [\"the number of odd elements \" + str(len([i for i in lst[j] if int(i) % 2 == 1])) + \"n the str\" + str(j + 1) + \" of the \" + str(j + 1) + \"nput.\" for j in range(len(lst))]",
        "Ground Truth": "def odd_count(lst): ans, template = [], \"the number of odd elements in the string i of the input.\" for s in lst: odd_cnt = len(list(filter(lambda ch: int(ch) % 2 == 1, s))) ans.append(template.replace(\"i\", str(odd_cnt))) return ans",
        "highlight_llm": "13",
        "highlight_gt": "16"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "str(j + 1)",
        "Correct Code": "odd_cnt = len(list(filter(lambda ch: int(ch) % 2 == 1, s))) ans.append(template.replace(\"i\", str(odd_cnt)))",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "13",
        "highlight_gt": "15,16"
    },
    {
        "Task ID": 114,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if len(nums) == 2: return min(nums[0], nums[1]) min_sum = math.inf for i in range(len(nums)): for j in range(i, len(nums)): if i == j: min_sum = min(min_sum, nums[i]) else: min_sum = min(min_sum, sum(nums[i:j+1]))",
        "Correct Code": "if all(x >= 0 for x in nums): return min(nums) s, ans = 0, 0 for x in nums: s += x ans = min(ans, s) if s >= 0: s = 0",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "import math def minSubArraySum(nums): if len(nums) == 0: return 0 if len(nums) == 1: return nums[0] if len(nums) == 2: return min(nums[0], nums[1]) min_sum = math.inf for i in range(len(nums)): for j in range(i, len(nums)): if i == j: min_sum = min(min_sum, nums[i]) else: min_sum = min(min_sum, sum(nums[i:j+1])) return min_sum",
        "Ground Truth": "import math def minSubArraySum(nums): if all(x >= 0 for x in nums): return min(nums) s, ans = 0, 0 for x in nums: s += x ans = min(ans, s) if s >= 0: s = 0 return ans",
        "highlight_llm": "15,16,18,19,20,21,22,23,24",
        "highlight_gt": "9,10,11,12,13,14"
    },
    {
        "Task ID": 115,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if grid[row][col] == 0: return max(max_fill_helper(grid, capacity, row, col + 1), max_fill_helper(grid, capacity, row + 1, col)) return max_fill_helper(grid, capacity - grid[row][col], row, col + 1) + 1",
        "Correct Code": "ans = 0 for l in grid: ans += math.ceil(sum(l) / capacity)",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def max_fill(grid, capacity): import math # O(n^2) time | O(n) space def max_fill_helper(grid, capacity, row, col): if row == len(grid): return 0 if col == len(grid[0]): return max_fill_helper(grid, capacity, row + 1, 0) if grid[row][col] == 0: return max(max_fill_helper(grid, capacity, row, col + 1), max_fill_helper(grid, capacity, row + 1, col)) return max_fill_helper(grid, capacity - grid[row][col], row, col + 1) + 1 return max_fill_helper(grid, capacity, 0, 0)",
        "Ground Truth": "def max_fill(grid, capacity): import math ans = 0 for l in grid: ans += math.ceil(sum(l) / capacity) return ans",
        "highlight_llm": "42,43,44",
        "highlight_gt": "41,42,43"
    },
    {
        "Task ID": 117,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "# your code here return []",
        "Correct Code": "ans = [] for word in s.split(\" \"): if word != \"\": c_cnt = len(list(filter(lambda ch: ch not in \"aeiouAEIOU\", word))) if c_cnt == n: ans.append(word) return ans",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def select_words(s, n): # your code here return []",
        "Ground Truth": "def select_words(s, n): ans = [] for word in s.split(\" \"): if word != \"\": c_cnt = len(list(filter(lambda ch: ch not in \"aeiouAEIOU\", word))) if c_cnt == n: ans.append(word) return ans",
        "highlight_llm": "14,15",
        "highlight_gt": "14,15,16,17,18,19"
    },
    {
        "Task ID": 118,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "set('aeiou')",
        "Correct Code": "in \"aeiouAEIOU",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect constant",
        "Syntactic Error ID": "Be4",
        "Generated Code": "def get_closest_vowel(word): vowels = set('aeiou') for i in range(len(word) - 1): if word[i] not in vowels and word[i + 1] in vowels: return word[i] return ''",
        "Ground Truth": "def get_closest_vowel(word): def is_vowel(ch: str) -> bool: return ch in \"aeiouAEIOU\" for i in range(len(word) - 2, 0, -1): if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]): return word[i] return \"",
        "highlight_llm": "16",
        "highlight_gt": "17"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "if word[i] not in vowels and word[i + 1] in vowels",
        "Correct Code": "if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1])",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "18",
        "highlight_gt": "19"
    },
    {
        "Task ID": 119,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if lst[0] == '(' and lst[1] == ')'",
        "Correct Code": "def valid_parens(s: str) -> bool: cnt = 0 for ch in s: cnt = cnt + 1 if ch == \"(\" else cnt - 1 if cnt < 0: return False return cnt == 0   if valid_parens(lst[0] + lst[1]) or valid_parens(lst[1] + lst[0])",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def match_parens(lst): # Your code here return 'Yes' if lst[0] == '(' and lst[1] == ')' else 'No'",
        "Ground Truth": "def match_parens(lst): def valid_parens(s: str) -> bool: cnt = 0 for ch in s: cnt = cnt + 1 if ch == \"(\" else cnt - 1 if cnt < 0: return False return cnt == 0 return \"Yes\" if valid_parens(lst[0] + lst[1]) or valid_parens(lst[1] + lst[0]) else \"No",
        "highlight_llm": "17",
        "highlight_gt": "17,18,19,20,21,22,23"
    },
    {
        "Task ID": 120,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "return sorted(sorted(arr)[::-1][:k])",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def maximum(arr, k): pass",
        "Ground Truth": "def maximum(arr, k): return sorted(sorted(arr)[::-1][:k])",
        "highlight_llm": "26",
        "highlight_gt": "26"
    },
    {
        "Task ID": 121,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if i % 2 == 0:",
        "Correct Code": "if i % 2 == 0 and lst[i] % 2 == 1)",
        "Semantic Level": "Miss condition",
        "Semantic Error ID": "Aa1",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def solution(lst): sum = 0 for i in range(len(lst)): if i % 2 == 0: sum += lst[i] return sum",
        "Ground Truth": "def solution(lst): return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 == 1)",
        "highlight_llm": "13",
        "highlight_gt": "10"
    },
    {
        "Task ID": 122,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "len(str(x)) <= 2)",
        "Correct Code": "def digits(x: int) -> int: s = str(x) return len(s) - 1 if s[0] == \"-\" else len(s)  lambda x: digits(x) <= 2,",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def add_elements(arr, k): return sum(int(x) for x in arr[:k] if len(str(x)) <= 2)",
        "Ground Truth": "def add_elements(arr, k): def digits(x: int) -> int: s = str(x) return len(s) - 1 if s[0] == \"-\" else len(s) return sum(filter(lambda x: digits(x) <= 2, arr[:k]))",
        "highlight_llm": "15",
        "highlight_gt": "15,16,17,18"
    },
    {
        "Task ID": 123,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "ans, x = [], n while x != 1: if x % 2 == 1: ans.append(x) x = x // 2 if x % 2 == 0 else x * 3 + 1 ans.append(1) return sorted(ans)",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def get_odd_collatz(n): pass",
        "Ground Truth": "def get_odd_collatz(n): ans, x = [], n while x != 1: if x % 2 == 1: ans.append(x) x = x // 2 if x % 2 == 0 else x * 3 + 1 ans.append(1) return sorted(ans)",
        "highlight_llm": "18",
        "highlight_gt": "18,19,20,21,22,23"
    },
    {
        "Task ID": 124,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "if len(date) != 10: return False",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def valid_date(date): if not date: return False date_list = date.split('-') if len(date_list) != 3: return False month, day, year = date_list if not month.isdigit() or not day.isdigit() or not year.isdigit(): return False month = int(month) day = int(day) year = int(year) if month < 1 or month > 12: return False if month in [1, 3, 5, 7, 8, 10, 12]: if day < 1 or day > 31: return False elif month in [4, 6, 9, 11]: if day < 1 or day > 30: return False elif month == 2: if day < 1 or day > 29: return False else: return False return True",
        "Ground Truth": "def valid_date(date): days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] if len(date) != 10: return False if date[2] != \"-\" or date[5] != \"-\": return False m, d, y = date[:2], date[3:5], date[6:] if not m.isdigit() or not d.isdigit() or not y.isdigit(): return False m, d = int(m), int(d) if not 1 <= m <= 12: return False if not 1 <= d <= days[m-1]: return False return True",
        "highlight_llm": "",
        "highlight_gt": "22"
    },
    {
        "Task ID": 125,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "if any([x in txt for x in whitespace]): return txt.split() if \",\" in txt: return txt.split(\",\") cnt = 0 for ch in txt: if ch.islower() and (ord(ch) - ord(\"a\")) % 2 == 1: cnt += 1 return cnt",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def split_words(txt): return txt.split()",
        "Ground Truth": "def split_words(txt): whitespace = tuple(' \\n\\r\\t') if any([x in txt for x in whitespace]): return txt.split() if \",\" in txt: return txt.split(\",\") cnt = 0 for ch in txt: if ch.islower() and (ord(ch) - ord(\"a\")) % 2 == 1: cnt += 1 return cnt",
        "highlight_llm": "",
        "highlight_gt": "12,13,14,15,16,17"
    },
    {
        "Task ID": 126,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if lst[i] > lst[i + 1]: return False",
        "Correct Code": "if count[x] > 2: return False",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def is_sorted(lst): if len(lst) == 1: return True elif len(lst) > 1: for i in range(len(lst) - 1): if lst[i] > lst[i + 1]: return False return True else: return False",
        "Ground Truth": "def is_sorted(lst): count = dict() for x in lst: if x not in count: count[x] = 0 count[x] += 1 if count[x] > 2: return False return lst == sorted(lst)",
        "highlight_llm": "21,22",
        "highlight_gt": "22"
    },
    {
        "Task ID": 127,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "# TODO: implement this function. # raise NotImplementedError if interval1[0] > interval2[1] or interval2[0] > interval1[1]: return \"NO\" else: return \"YES",
        "Correct Code": "def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) if interval1[0] > interval2[0]: interval1, interval2 = interval2, interval1 l, r = interval2[0], min(interval1[1], interval2[1]) return \"YES\" if is_prime(r - l) else \"NO",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def intersection(interval1, interval2): # TODO: implement this function. # raise NotImplementedError if interval1[0] > interval2[1] or interval2[0] > interval1[1]: return \"NO\" else: return \"YES",
        "Ground Truth": "def intersection(interval1, interval2): def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) if interval1[0] > interval2[0]: interval1, interval2 = interval2, interval1 l, r = interval2[0], min(interval1[1], interval2[1]) return \"YES\" if is_prime(r - l) else \"NO",
        "highlight_llm": "21,22,23,24,25,26",
        "highlight_gt": "21,22,23,24,25"
    },
    {
        "Task ID": 128,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "prod(sign(i)",
        "Correct Code": "",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def prod_signs(arr): if not arr: return None return sum(abs(i) for i in arr) * prod(sign(i) for i in arr)",
        "Ground Truth": "def prod_signs(arr): if arr == []: return None if 0 in arr: return 0 s, sgn = 0, 1 for x in arr: s += abs(x) sgn *= (x // abs(x)) return s * sgn",
        "highlight_llm": "15",
        "highlight_gt": ""
    },
    {
        "Task ID": 129,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if not grid or not grid[0]: return [] n = len(grid) m = len(grid[0]) if k > n * m: return [] if k == 0: return [[]] if k == 1: return [[i for i in range(1, n * m + 1)]] # dp[i][j] = min path of length i from (0, 0) to (i, j) dp = [[float('inf')] * m for _ in range(n)] dp[0][0] = 0 for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # dp[i][j] = min path of length k from (0, 0) to (i, j) paths = [[(0, 0)] * m for _ in range(n)] for i in range(n): for j in range(m): if dp[i][j] == dp[i - 1][j] + grid[i][j]: paths[i][j] = paths[i - 1][j] elif dp[i][j] == dp[i][j - 1] + grid[i][j]: paths[i][j] = paths[i][j - 1] else: paths[i][j] = paths[i - 1][j] + paths[i][j - 1] # find the path of length k ans = [] for i in range(n): for j in range(m): if paths[i][j] == k: ans.append",
        "Correct Code": "N = len(grid) x, y = 0, 0 for i in range(N): for j in range(N): if grid[i][j] == 1: x, y = i, j mn = N * N if x > 0: mn = min(mn, grid[x - 1][y]) if x < N - 1: mn = min(mn, grid[x + 1][y]) if y > 0: mn = min(mn, grid[x][y - 1]) if y < N - 1: mn = min(mn, grid[x][y + 1]) return [1 if i % 2 == 0 else mn for i in range(k)]",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def minPath(grid, k): if not grid or not grid[0]: return [] n = len(grid) m = len(grid[0]) if k > n * m: return [] if k == 0: return [[]] if k == 1: return [[i for i in range(1, n * m + 1)]] # dp[i][j] = min path of length i from (0, 0) to (i, j) dp = [[float('inf')] * m for _ in range(n)] dp[0][0] = 0 for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # dp[i][j] = min path of length k from (0, 0) to (i, j) paths = [[(0, 0)] * m for _ in range(n)] for i in range(n): for j in range(m): if dp[i][j] == dp[i - 1][j] + grid[i][j]: paths[i][j] = paths[i - 1][j] elif dp[i][j] == dp[i][j - 1] + grid[i][j]: paths[i][j] = paths[i][j - 1] else: paths[i][j] = paths[i - 1][j] + paths[i][j - 1] # find the path of length k ans = [] for i in range(n): for j in range(m): if paths[i][j] == k: ans.append",
        "Ground Truth": "def minPath(grid, k): N = len(grid) x, y = 0, 0 for i in range(N): for j in range(N): if grid[i][j] == 1: x, y = i, j mn = N * N if x > 0: mn = min(mn, grid[x - 1][y]) if x < N - 1: mn = min(mn, grid[x + 1][y]) if y > 0: mn = min(mn, grid[x][y - 1]) if y < N - 1: mn = min(mn, grid[x][y + 1]) return [1 if i % 2 == 0 else mn for i in range(k)]",
        "highlight_llm": "31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69",
        "highlight_gt": "31,32,33,34,35,36,37,38,39,40,41,42"
    },
    {
        "Task ID": 130,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return [0] return [3] return [1, 3]",
        "Correct Code": "return [1] return [1, 3]",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "def tri(n): if n == 0: return [0] elif n == 1: return [3] elif n == 2: return [1, 3] else: return [1, 3] + [sum(tri(n - 1)) for n in range(3, n + 1)]",
        "Ground Truth": "def tri(n): if n == 0: return [1] if n == 1: return [1, 3] ans = [1, 3] for i in range(2, n + 1): if i % 2 == 0: ans.append(1 + i / 2) else: ans.append(ans[-1] + ans[-2] + 1 + (i + 1) / 2) return ans",
        "highlight_llm": "19,21,23,25",
        "highlight_gt": "18,19"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "sum(tri(n - 1))",
        "Correct Code": "if i % 2 == 0: ans.append(1 + i / 2) else: ans.append(ans[-1] + ans[-2] + 1 + (i + 1) / 2)",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "25",
        "highlight_gt": "22,23,24,25"
    },
    {
        "Task ID": 131,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if int(i) % 2 == 0: return 0",
        "Correct Code": "has_odd, prod = False, 1 for ch in str(n): if int(ch) % 2 == 1: has_odd = True prod *= int(ch) return 0 if not has_odd",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def digits(n): product = 1 for i in str(n): if int(i) % 2 == 0: return 0 else: product *= int(i) return product",
        "Ground Truth": "def digits(n): has_odd, prod = False, 1 for ch in str(n): if int(ch) % 2 == 1: has_odd = True prod *= int(ch) return 0 if not has_odd else prod",
        "highlight_llm": "11,12",
        "highlight_gt": "9,10,11,12,13,14"
    },
    {
        "Task ID": 132,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "# if string is empty, return False if not string: return False # if string is not empty, check if there is a valid subsequence of brackets # if there is, return True # if there is not, return False # create a stack to store the brackets stack = [] # iterate through the string for char in string: # if the character is a left bracket, push it to the stack if char == '[': stack.append(char) # if the character is a right bracket, pop the last element from the stack # if the last element is a left bracket, return True # if the last element is not a left bracket, return False elif char == ']': if stack: stack.pop() else: return False # if the stack is empty, return True # if the stack is not empty, return False if not stack: return True else: return False",
        "Correct Code": "for i in range(len(string)): if string[i] == \"]\": continue cnt, max_nest = 0, 0 for j in range(i, len(string)): if string[j] == \"[\": cnt += 1 else: cnt -= 1 max_nest = max(max_nest, cnt) if cnt == 0: if max_nest >= 2: return True break return False",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def is_nested(string): # if string is empty, return False if not string: return False # if string is not empty, check if there is a valid subsequence of brackets # if there is, return True # if there is not, return False # create a stack to store the brackets stack = [] # iterate through the string for char in string: # if the character is a left bracket, push it to the stack if char == '[': stack.append(char) # if the character is a right bracket, pop the last element from the stack # if the last element is a left bracket, return True # if the last element is not a left bracket, return False elif char == ']': if stack: stack.pop() else: return False # if the stack is empty, return True # if the stack is not empty, return False if not stack: return True else: return False",
        "Ground Truth": "def is_nested(string): for i in range(len(string)): if string[i] == \"]\": continue cnt, max_nest = 0, 0 for j in range(i, len(string)): if string[j] == \"[\": cnt += 1 else: cnt -= 1 max_nest = max(max_nest, cnt) if cnt == 0: if max_nest >= 2: return True break return False",
        "highlight_llm": "15,16,17,19,20,21,23,24,26,27,29,30,31,33,34,35,36,37,38,39,40,42,43,44,45,46,47",
        "highlight_gt": "15,16,17,18,19,20,21,22,23,24,25,26,27,28"
    },
    {
        "Task ID": 133,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "int(",
        "Correct Code": "math.ceil(",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def sum_squares(lst): return sum([int(i**2) for i in lst])",
        "Ground Truth": "def sum_squares(lst): import math return sum(map(lambda x: math.ceil(x) ** 2, lst))",
        "highlight_llm": "14",
        "highlight_gt": "15"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "int(i**2)",
        "Correct Code": "math.ceil(x) ** 2",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect arithmetic",
        "Syntactic Error ID": "Be1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "14",
        "highlight_gt": "15"
    },
    {
        "Task ID": 134,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "and txt.count(' ') == 0",
        "Correct Code": "if len(txt) == 0: return False if len(txt) == 1: return txt.isalpha() txt[-2] == \" ",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def check_if_last_char_is_a_letter(txt): return txt[-1].isalpha() and txt.count(' ') == 0",
        "Ground Truth": "def check_if_last_char_is_a_letter(txt): if len(txt) == 0: return False if len(txt) == 1: return txt.isalpha() return txt[-1].isalpha() and txt[-2] == \" \"",
        "highlight_llm": "14",
        "highlight_gt": "14,15,16"
    },
    {
        "Task ID": 135,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return 0 return i-1",
        "Correct Code": "return -1 return i",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect return value",
        "Syntactic Error ID": "Bc2",
        "Generated Code": "def can_arrange(arr): # Your code here if len(arr) == 0: return -1 if len(arr) == 1: return 0 if len(arr) == 2: if arr[0] < arr[1]: return 0 else: return 1 else: for i in range(len(arr)): if arr[i] < arr[i-1]: return i-1 return -1",
        "Ground Truth": "def can_arrange(arr): for i in range(len(arr) - 1, 0, -1): if not (arr[i] >= arr[i - 1]): return i return -1",
        "highlight_llm": "15,18,24",
        "highlight_gt": "13,14"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "if arr[0] < arr[1]: if arr[i] < arr[i-1]:",
        "Correct Code": "if not (arr[i] >= arr[i - 1]):",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "17,23",
        "highlight_gt": "12"
    },
    {
        "Task ID": 136,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if len(negatives) == 0: return (None, min(positives)) elif len(positives) == 0: return (max(negatives), None) else: return (max(negatives), min(positives))",
        "Correct Code": "None if neg == [] else max(neg), None if pos == [] else min(pos)",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def largest_smallest_integers(lst): if len(lst) == 0: return (None, None) else: negatives = [] positives = [] for i in lst: if i < 0: negatives.append(i) elif i > 0: positives.append(i) if len(negatives) == 0: return (None, min(positives)) elif len(positives) == 0: return (max(negatives), None) else: return (max(negatives), min(positives))",
        "Ground Truth": "def largest_smallest_integers(lst): neg = list(filter(lambda x: x < 0, lst)) pos = list(filter(lambda x: x > 0, lst)) return None if neg == [] else max(neg), None if pos == [] else min(pos)",
        "highlight_llm": "23,24,25,26,27,28",
        "highlight_gt": "15"
    },
    {
        "Task ID": 137,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "num_a = float(str(a).replace(\",\", \".\")) num_b = float(str(b).replace(\",\", \".\"))",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def compare_one(a, b): if a > b: return a elif b > a: return b else: return None",
        "Ground Truth": "def compare_one(a, b): num_a = float(str(a).replace(\",\", \".\")) num_b = float(str(b).replace(\",\", \".\")) if num_a == num_b: return None return a if num_a > num_b else b",
        "highlight_llm": "",
        "highlight_gt": "18,19"
    },
    {
        "Task ID": 138,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "and n % 4 == 0",
        "Correct Code": "n >= 8",
        "Semantic Level": "incorrect comparison operation",
        "Semantic Error ID": "Ad4",
        "Syntactic Level": "incorrect comparison",
        "Syntactic Error ID": "Be6",
        "Generated Code": "def is_equal_to_sum_even(n): return n % 2 == 0 and n % 4 == 0",
        "Ground Truth": "def is_equal_to_sum_even(n): return n >= 8 and n % 2 == 0",
        "highlight_llm": "8",
        "highlight_gt": "8"
    },
    {
        "Task ID": 139,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "for i in range(1, n+1):",
        "Correct Code": "for i in range(2, n + 1):",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "def special_factorial(n): factorial = 1 for i in range(1, n+1): factorial *= i return factorial",
        "Ground Truth": "def special_factorial(n): fac, ans = 1, 1 for i in range(2, n + 1): fac *= i ans *= fac return ans",
        "highlight_llm": "14",
        "highlight_gt": "14"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "factorial = 1 factorial *= i",
        "Correct Code": "fac, ans = 1, 1 fac *= i ans *= fac",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "13,15",
        "highlight_gt": "13,15,16"
    },
    {
        "Task ID": 140,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "# TODO: Write your code here return text",
        "Correct Code": "ans = text for i in range(len(text)-1, 2, -1): ans = ans.replace(\" \" * i, \"-\") return ans.replace(\" \", \"_\")",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def fix_spaces(text): # TODO: Write your code here return text",
        "Ground Truth": "def fix_spaces(text): ans = text for i in range(len(text)-1, 2, -1): ans = ans.replace(\" \" * i, \"-\") return ans.replace(\" \", \"_\")",
        "highlight_llm": "13,15",
        "highlight_gt": "12,13,14,15"
    },
    {
        "Task ID": 141,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if len(file_name) > 3:",
        "Correct Code": "if len(list(filter(lambda ch: ch.isdigit(), file_name))) > 3:",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def file_name_check(file_name): if len(file_name) > 3: return 'No' elif file_name.count('.') > 1: return 'No' elif file_name.count('.') == 1: if file_name.split('.')[0] == '': return 'No' elif file_name.split('.')[0][0].isalpha(): if file_name.split('.')[1] in ['txt', 'exe', 'dll']: return 'Yes' else: return 'No' else: return 'No' else: return 'No'",
        "Ground Truth": "def file_name_check(file_name): if len(list(filter(lambda ch: ch.isdigit(), file_name))) > 3: return \"No\" f_list = file_name.split(\".\") if len(f_list) != 2: return \"No\" if len(f_list[0]) == 0: return \"No\" if not f_list[0][0].isalpha(): return \"No\" if f_list[1] not in [\"txt\", \"exe\", \"dll\"]: return \"No\" return \"Yes",
        "highlight_llm": "15",
        "highlight_gt": "15"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "elif file_name.count('.') > 1",
        "Correct Code": "f_list = file_name.split(\".\") if len(f_list) != 2: return \"No",
        "Semantic Level": "Miss condition",
        "Semantic Error ID": "Aa1",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "17",
        "highlight_gt": "17,18"
    },
    {
        "Task ID": 142,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if i % 3 == 0 or i % 4 == 0: new_lst.append(lst[i] ** 2)",
        "Correct Code": "if i % 3 == 0: ans += num ** 2 elif i % 4 == 0: ans += num ** 3",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def sum_squares(lst): if len(lst) == 0: return 0 else: new_lst = [] for i in range(len(lst)): if i % 3 == 0 or i % 4 == 0: new_lst.append(lst[i] ** 2) else: new_lst.append(lst[i]) return sum(new_lst)",
        "Ground Truth": "def sum_squares(lst): ans = 0 for i, num in enumerate(lst): if i % 3 == 0: ans += num ** 2 elif i % 4 == 0: ans += num ** 3 else: ans += num return ans",
        "highlight_llm": "17,18",
        "highlight_gt": "14,15,16,17"
    },
    {
        "Task ID": 143,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if is_prime(len(word)):",
        "Correct Code": "",
        "Semantic Level": "Undefined name",
        "Semantic Error ID": "Ac2",
        "Syntactic Level": "Incorrect function name",
        "Syntactic Error ID": "Bd1",
        "Generated Code": "def words_in_sentence(sentence): words = sentence.split(' ') primes = [] for word in words: if is_prime(len(word)): primes.append(word) return ' '.join(primes)",
        "Ground Truth": "def words_in_sentence(sentence): def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) return \" \".join(list(filter(lambda word: is_prime(len(word)), sentence.split(\" \"))))",
        "highlight_llm": "24",
        "highlight_gt": ""
    },
    {
        "Task ID": 144,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return False",
        "Correct Code": "x1, x2 = map(int, x.split(\"/\")) n1, n2 = map(int, n.split(\"/\")) return (x1 * n1) % (x2 * n2) == 0",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def simplify(x, n): return False",
        "Ground Truth": "def simplify(x, n): x1, x2 = map(int, x.split(\"/\")) n1, n2 = map(int, n.split(\"/\")) return (x1 * n1) % (x2 * n2) == 0",
        "highlight_llm": "13",
        "highlight_gt": "18,19,20"
    },
    {
        "Task ID": 145,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "key=lambda x: sum(int(i) for i in str(x)))",
        "Correct Code": "def weight(x): x_list = list(str(x)) if x_list[0] == \"-\": x_list = x_list[1:] x_list = list(map(int, x_list)) x_list[0] = -x_list[0] else: x_list = list(map(int, x_list)) return sum(x_list)",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def order_by_points(nums): return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))",
        "Ground Truth": "def order_by_points(nums): def weight(x): x_list = list(str(x)) if x_list[0] == \"-\": x_list = x_list[1:] x_list = list(map(int, x_list)) x_list[0] = -x_list[0] else: x_list = list(map(int, x_list)) return sum(x_list) return sorted(nums, key=weight)",
        "highlight_llm": "12",
        "highlight_gt": "12,13,14,15,16,17,18,19,20"
    },
    {
        "Task ID": 146,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "if num > 10 and num % 2 != 0:",
        "Correct Code": "if num > 10 and str(num)[0] in odd and str(num)[-1] in odd:",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def specialFilter(nums): count = 0 for num in nums: if num > 10 and num % 2 != 0: count += 1 return count",
        "Ground Truth": "def specialFilter(nums): ans, odd = 0, [\"1\", \"3\", \"5\", \"7\", \"9\"] for num in nums: if num > 10 and str(num)[0] in odd and str(num)[-1] in odd: ans += 1 return ans",
        "highlight_llm": "11",
        "highlight_gt": "11"
    },
    {
        "Task ID": 147,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return sum(i * i - i + 1 for i in range(1, n + 1) if (i * i - i + 1) % 3 == 0)",
        "Correct Code": "if n <= 2: return False\n  one_cnt = 1 + (n - 2) // 3 * 2 + (n - 2) % 3\n  zero_cnt = n - one_cnt\n    return one_cnt * (one_cnt - 1) * (one_cnt - 2) // 6 + zero_cnt * (zero_cnt - 1) * (zero_cnt - 2) // 6",
        "Semantic Level": "Wrong (logical) direction",
        "Semantic Error ID": "Ae3",
        "Syntactic Level": "incorrect code block",
        "Syntactic Error ID": "Bg1",
        "Generated Code": "def get_max_triples(n): return sum(i * i - i + 1 for i in range(1, n + 1) if (i * i - i + 1) % 3 == 0)",
        "Ground Truth": "def get_max_triples(n): if n <= 2: return False one_cnt = 1 + (n - 2) // 3 * 2 + (n - 2) % 3 zero_cnt = n - one_cnt return one_cnt * (one_cnt - 1) * (one_cnt - 2) // 6 + zero_cnt * (zero_cnt - 1) * (zero_cnt - 2) // 6",
        "highlight_llm": "15",
        "highlight_gt": "15,16,17,18"
    },
    {
        "Task ID": 149,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "key=len",
        "Correct Code": "key=cmp_to_key(cmp))",
        "Semantic Level": "Incorrect but defined method/variable/attribute name",
        "Semantic Error ID": "Ac1",
        "Syntactic Level": "Incorrect function arguments",
        "Syntactic Error ID": "Bd2",
        "Generated Code": "def sorted_list_sum(lst): return sorted(list(filter(lambda x: len(x) % 2 == 0, lst)), key=len)",
        "Ground Truth": "def sorted_list_sum(lst): from functools import cmp_to_key def cmp(s: str, t: str): if len(s) != len(t): return len(s) - len(t) return -1 if s < t else 1 return sorted(list(filter(lambda s: len(s) % 2 == 0, lst)), key=cmp_to_key(cmp))",
        "highlight_llm": "16",
        "highlight_gt": "19"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "",
        "Correct Code": "from functools import cmp_to_key def cmp(s: str, t: str): if len(s) != len(t): return len(s) - len(t) return -1 if s < t else 1",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "",
        "highlight_gt": "14,15,16,17,18"
    },
    {
        "Task ID": 150,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if n == 1:",
        "Correct Code": "def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))",
        "Semantic Level": "Miss condition",
        "Semantic Error ID": "Aa1",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def x_or_y(n, x, y): if n == 1: return x else: return y",
        "Ground Truth": "def x_or_y(n, x, y): def is_prime(a): return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) return x if is_prime(n) else y",
        "highlight_llm": "10",
        "highlight_gt": "10,11"
    },
    {
        "Task ID": 151,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "if i > 0 and i % 2 != 0:",
        "Correct Code": "if num % 2 == 1 and num > 0 and \".\" not in str(num):",
        "Semantic Level": "Miss condition",
        "Semantic Error ID": "Aa1",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def double_the_difference(lst): # Your code here sum = 0 for i in lst: if i > 0 and i % 2 != 0: sum += i ** 2 return sum",
        "Ground Truth": "def double_the_difference(lst): ans = 0 for num in lst: if num % 2 == 1 and num > 0 and \".\" not in str(num): ans += num ** 2 return ans",
        "highlight_llm": "16",
        "highlight_gt": "15"
    },
    {
        "Task ID": 153,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "def strength(s: str) -> int: CAP, SM = 0, 0 for ch in s: if ch.isupper(): CAP += 1 if ch.islower(): SM += 1 return CAP - SM max_strength = max(map(strength, extensions)) for e in extensions: if strength(e) == max_strength: return class_name + \".\" + e",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def Strongest_Extension(class_name, extensions): pass",
        "Ground Truth": "def Strongest_Extension(class_name, extensions): def strength(s: str) -> int: CAP, SM = 0, 0 for ch in s: if ch.isupper(): CAP += 1 if ch.islower(): SM += 1 return CAP - SM max_strength = max(map(strength, extensions)) for e in extensions: if strength(e) == max_strength: return class_name + \".\" + e",
        "highlight_llm": "18",
        "highlight_gt": "18,19,20,21,22,23,24,25,26,27"
    },
    {
        "Task ID": 154,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "if b in a: return True",
        "Correct Code": "if a == b: return True if b == \"\": return True for i in range(0, len(b)): if b[i:] + b[:i] in a:",
        "Semantic Level": "Miss condition",
        "Semantic Error ID": "Aa1",
        "Syntactic Level": "If error",
        "Syntactic Error ID": "Ba1",
        "Generated Code": "def cycpattern_check(a , b): if b in a: return True else: return False",
        "Ground Truth": "def cycpattern_check(a , b): if a == b: return True if b == \"\": return True for i in range(0, len(b)): if b[i:] + b[:i] in a: return True return False",
        "highlight_llm": "11,12",
        "highlight_gt": "11,12,13,14,15,16,17"
    },
    {
        "Task ID": 155,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "while num > 0:",
        "Correct Code": "for ch in str(num):",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "While error",
        "Syntactic Error ID": "Bb2",
        "Generated Code": "def even_odd_count(num): even = 0 odd = 0 while num > 0: if num % 2 == 0: even += 1 else: odd += 1 num = num // 10 return (even, odd)",
        "Ground Truth": "def even_odd_count(num): even, odd = 0, 0 for ch in str(num): if ch in \"02468\": even += 1 if ch in \"13579\": odd += 1 return even, odd",
        "highlight_llm": "10",
        "highlight_gt": "9"
    },
    {
        "Task ID": 156,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "roman_numerals = { 1: 'i', 5: 'v', 10: 'x', 50: 'l', 100: 'c', 500: 'd', 1000: 'm' }",
        "Correct Code": "m = [\"\", \"m\"] c = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"] x = [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"] i = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"]",
        "Semantic Level": "Constant Value Error",
        "Semantic Error ID": "Ab1",
        "Syntactic Level": "Incorrect constant",
        "Syntactic Error ID": "Be4",
        "Generated Code": "def int_to_mini_roman(number): roman_numerals = { 1: 'i', 5: 'v', 10: 'x', 50: 'l', 100: 'c', 500: 'd', 1000: 'm' } result = '' for key in sorted(roman_numerals.keys(), reverse=True): while number >= key: result += roman_numerals[key] number -= key return result",
        "Ground Truth": "def int_to_mini_roman(number): m = [\"\", \"m\"] c = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"] x = [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"] i = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"] thousands = m[number // 1000] hundreds = c[(number % 1000) // 100] tens = x[(number % 100) // 10] ones = i[number % 10] return thousands + hundreds + tens + ones",
        "highlight_llm": "12,13,14,15,16,17,18,19,20",
        "highlight_gt": "12,13,14,15"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "number -= key",
        "Correct Code": "thousands = m[number // 1000] hundreds = c[(number % 1000) // 100] tens = x[(number % 100) // 10] ones = i[number % 10]",
        "Semantic Level": "Incorrect arithmetic operation",
        "Semantic Error ID": "Ad1",
        "Syntactic Level": "Incorrect arithmetic",
        "Syntactic Error ID": "Be1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "25",
        "highlight_gt": "16,17,18,19"
    },
    {
        "Task ID": 158,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "# words = [\"name\", \"of\", \"string\"] # words = [\"name\", \"enam\", \"game\"] # words = [\"aaaaaaa\", \"bb\" ,\"cc\"] # words = [\"a\", \"b\", \"c\"] # words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"] # words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"] # words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q",
        "Correct Code": "mx_ch_cnt, ans = 0, \"\" for word in words: ch_cnt = len(set(word)) if ch_cnt > mx_ch_cnt or (ch_cnt == mx_ch_cnt and word < ans): mx_ch_cnt, ans = ch_cnt, word return ans",
        "Semantic Level": "Only comments",
        "Semantic Error ID": "Ae1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def find_max(words): # words = [\"name\", \"of\", \"string\"] # words = [\"name\", \"enam\", \"game\"] # words = [\"aaaaaaa\", \"bb\" ,\"cc\"] # words = [\"a\", \"b\", \"c\"] # words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"] # words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"] # words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q",
        "Ground Truth": "def find_max(words): mx_ch_cnt, ans = 0, \"\" for word in words: ch_cnt = len(set(word)) if ch_cnt > mx_ch_cnt or (ch_cnt == mx_ch_cnt and word < ans): mx_ch_cnt, ans = ch_cnt, word return ans",
        "highlight_llm": "11,12,13,14,15,16,17",
        "highlight_gt": "11,12,13,14,15,16"
    },
    {
        "Task ID": 159,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "pass",
        "Correct Code": "if need <= remaining: return [number + need, remaining - need] else: return [number + remaining, 0]",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def eat(number, need, remaining): pass",
        "Ground Truth": "def eat(number, need, remaining): if need <= remaining: return [number + need, remaining - need] else: return [number + remaining, 0]",
        "highlight_llm": "30",
        "highlight_gt": "30,31,32,33"
    },
    {
        "Task ID": 160,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "# TODO: complete this function return 0",
        "Correct Code": "exp = \"\" for i in range(len(operator)): exp += str(operand[i]) + operator[i] exp += str(operand[-1]) return eval(exp)",
        "Semantic Level": "Meaningless code snippet",
        "Semantic Error ID": "Ae2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def do_algebra(operator, operand): # TODO: complete this function return 0",
        "Ground Truth": "def do_algebra(operator, operand): exp = \"\" for i in range(len(operator)): exp += str(operand[i]) + operator[i] exp += str(operand[-1]) return eval(exp)",
        "highlight_llm": "26,27",
        "highlight_gt": "26,27,28,29,30"
    },
    {
        "Task ID": 161,
        "Are the correct and incorrect answers similar": "no",
        "Error ID": 1,
        "Incorrect Code": "return ''.join(map(lambda x: x.swapcase() if x.isalpha() else x, s))",
        "Correct Code": "ans, has_letter = \"\", False for ch in s: if ch.isalpha(): has_letter = True ans += ch.swapcase() else: ans += ch return ans if has_letter else s[::-1]",
        "Semantic Level": "Missing multiple statements",
        "Semantic Error ID": "Af2",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def solve(s): return ''.join(map(lambda x: x.swapcase() if x.isalpha() else x, s))",
        "Ground Truth": "def solve(s): ans, has_letter = \"\", False for ch in s: if ch.isalpha(): has_letter = True ans += ch.swapcase() else: ans += ch return ans if has_letter else s[::-1]",
        "highlight_llm": "12",
        "highlight_gt": "12,13,14,15,16,17,18,19"
    },
    {
        "Task ID": 162,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "import hashlib",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "Import error",
        "Syntactic Error ID": "Bf1",
        "Generated Code": "def string_to_md5(text): if not text: return None return hashlib.md5(text.encode('utf-8')).hexdigest()",
        "Ground Truth": "def string_to_md5(text): if text == \"\": return None import hashlib m = hashlib.md5() m.update(text.encode(\"utf-8\")) return m.hexdigest()",
        "highlight_llm": "",
        "highlight_gt": "9"
    },
    {
        "Task ID": 163,
        "Are the correct and incorrect answers similar": "yes",
        "Error ID": 1,
        "Incorrect Code": "",
        "Correct Code": "if a > b: a, b = b, a",
        "Semantic Level": "Missing one statement",
        "Semantic Error ID": "Af1",
        "Syntactic Level": "missing code block",
        "Syntactic Error ID": "Bg2",
        "Generated Code": "def generate_integers(a, b): return [i for i in range(a, b+1) if i % 2 == 0]",
        "Ground Truth": "def generate_integers(a, b): if a > b: a, b = b, a return [i for i in range(a, min(b + 1, 10)) if i % 2 == 0]",
        "highlight_llm": "",
        "highlight_gt": "11"
    },
    {
        "Task ID": "",
        "Are the correct and incorrect answers similar": "",
        "Error ID": 2,
        "Incorrect Code": "in range(a, b+1)",
        "Correct Code": "in range(a, min(b + 1, 10))",
        "Semantic Level": "Incorrect condition",
        "Semantic Error ID": "Aa2",
        "Syntactic Level": "For error",
        "Syntactic Error ID": "Bb1",
        "Generated Code": "",
        "Ground Truth": "",
        "highlight_llm": "11",
        "highlight_gt": "12"
    } 
]